
BNO_STM_HAIL_MARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac4  08005ac4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005acc  08005acc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000314  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000092fb  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001526  00000000  00000000  000293da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000828  00000000  00000000  0002a900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000654  00000000  00000000  0002b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000206f6  00000000  00000000  0002b77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a25a  00000000  00000000  0004be72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3bd5  00000000  00000000  000560cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d98  00000000  00000000  00119ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0011ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800592c 	.word	0x0800592c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800592c 	.word	0x0800592c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b0af      	sub	sp, #188	; 0xbc
 8000570:	af2a      	add	r7, sp, #168	; 0xa8
 8000572:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	799b      	ldrb	r3, [r3, #6]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000584:	687c      	ldr	r4, [r7, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9329      	str	r3, [sp, #164]	; 0xa4
 800058a:	f107 030e 	add.w	r3, r7, #14
 800058e:	9328      	str	r3, [sp, #160]	; 0xa0
 8000590:	2300      	movs	r3, #0
 8000592:	9327      	str	r3, [sp, #156]	; 0x9c
 8000594:	4668      	mov	r0, sp
 8000596:	f104 0310 	add.w	r3, r4, #16
 800059a:	229c      	movs	r2, #156	; 0x9c
 800059c:	4619      	mov	r1, r3
 800059e:	f004 fb34 	bl	8004c0a <memcpy>
 80005a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005a6:	f001 fbb6 	bl	8001d16 <bno055_read_regs>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <bno055_init+0x4c>
        return err;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	e0b6      	b.n	8000726 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
 80005ba:	2ba0      	cmp	r3, #160	; 0xa0
 80005bc:	d001      	beq.n	80005c2 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80005be:	2306      	movs	r3, #6
 80005c0:	e0b1      	b.n	8000726 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80005c2:	2100      	movs	r1, #0
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f001 fa74 	bl	8001ab2 <bno055_set_opmode>
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <bno055_init+0x6c>
        return err;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	e0a6      	b.n	8000726 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 80005d8:	2002      	movs	r0, #2
 80005da:	f001 ffe5 	bl	80025a8 <HAL_Delay>
    bno055_reset(imu);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f001 fb53 	bl	8001c8a <bno055_reset>
    HAL_Delay(5000);
 80005e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80005e8:	f001 ffde 	bl	80025a8 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f001 faee 	bl	8001bd0 <bno055_set_pwr_mode>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <bno055_init+0x96>
        return err;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	e091      	b.n	8000726 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f001 ffd0 	bl	80025a8 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000608:	2100      	movs	r1, #0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 fbe6 	bl	8001ddc <bno055_set_page>
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <bno055_init+0xb2>
        return err;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	e083      	b.n	8000726 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800061e:	200c      	movs	r0, #12
 8000620:	f001 ffc2 	bl	80025a8 <HAL_Delay>
    bno055_on(imu);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f001 fb53 	bl	8001cd0 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	4619      	mov	r1, r3
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f001 fa3e 	bl	8001ab2 <bno055_set_opmode>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <bno055_init+0xd8>
        return err;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	e070      	b.n	8000726 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000644:	2018      	movs	r0, #24
 8000646:	f001 ffaf 	bl	80025a8 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a38      	ldr	r2, [pc, #224]	; (8000730 <bno055_init+0x1c4>)
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a38      	ldr	r2, [pc, #224]	; (8000734 <bno055_init+0x1c8>)
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a37      	ldr	r2, [pc, #220]	; (8000738 <bno055_init+0x1cc>)
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a37      	ldr	r2, [pc, #220]	; (800073c <bno055_init+0x1d0>)
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a36      	ldr	r2, [pc, #216]	; (8000740 <bno055_init+0x1d4>)
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a36      	ldr	r2, [pc, #216]	; (8000744 <bno055_init+0x1d8>)
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a35      	ldr	r2, [pc, #212]	; (8000748 <bno055_init+0x1dc>)
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a35      	ldr	r2, [pc, #212]	; (800074c <bno055_init+0x1e0>)
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a34      	ldr	r2, [pc, #208]	; (8000750 <bno055_init+0x1e4>)
 800067e:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <bno055_init+0x1e8>)
 8000684:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a33      	ldr	r2, [pc, #204]	; (8000758 <bno055_init+0x1ec>)
 800068a:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a33      	ldr	r2, [pc, #204]	; (800075c <bno055_init+0x1f0>)
 8000690:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a32      	ldr	r2, [pc, #200]	; (8000760 <bno055_init+0x1f4>)
 8000696:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a32      	ldr	r2, [pc, #200]	; (8000764 <bno055_init+0x1f8>)
 800069c:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a31      	ldr	r2, [pc, #196]	; (8000768 <bno055_init+0x1fc>)
 80006a2:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <bno055_init+0x200>)
 80006a8:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a30      	ldr	r2, [pc, #192]	; (8000770 <bno055_init+0x204>)
 80006ae:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a30      	ldr	r2, [pc, #192]	; (8000774 <bno055_init+0x208>)
 80006b4:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <bno055_init+0x20c>)
 80006ba:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a2f      	ldr	r2, [pc, #188]	; (800077c <bno055_init+0x210>)
 80006c0:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <bno055_init+0x214>)
 80006c6:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <bno055_init+0x218>)
 80006cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <bno055_init+0x21c>)
 80006d4:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a2c      	ldr	r2, [pc, #176]	; (800078c <bno055_init+0x220>)
 80006da:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <bno055_init+0x224>)
 80006e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <bno055_init+0x228>)
 80006e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <bno055_init+0x22c>)
 80006f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a29      	ldr	r2, [pc, #164]	; (800079c <bno055_init+0x230>)
 80006f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <bno055_init+0x234>)
 8000700:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <bno055_init+0x238>)
 8000708:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <bno055_init+0x23c>)
 8000710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a25      	ldr	r2, [pc, #148]	; (80007ac <bno055_init+0x240>)
 8000718:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a24      	ldr	r2, [pc, #144]	; (80007b0 <bno055_init+0x244>)
 8000720:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	bf00      	nop
 8000730:	080007b5 	.word	0x080007b5
 8000734:	0800081d 	.word	0x0800081d
 8000738:	0800089d 	.word	0x0800089d
 800073c:	0800091d 	.word	0x0800091d
 8000740:	0800099d 	.word	0x0800099d
 8000744:	08000a69 	.word	0x08000a69
 8000748:	08000ae9 	.word	0x08000ae9
 800074c:	08000b69 	.word	0x08000b69
 8000750:	08000be9 	.word	0x08000be9
 8000754:	08000cb5 	.word	0x08000cb5
 8000758:	08000d35 	.word	0x08000d35
 800075c:	08000db5 	.word	0x08000db5
 8000760:	08000e35 	.word	0x08000e35
 8000764:	08000f01 	.word	0x08000f01
 8000768:	08000f6d 	.word	0x08000f6d
 800076c:	08000fd9 	.word	0x08000fd9
 8000770:	08001045 	.word	0x08001045
 8000774:	080010f9 	.word	0x080010f9
 8000778:	0800117d 	.word	0x0800117d
 800077c:	08001201 	.word	0x08001201
 8000780:	08001285 	.word	0x08001285
 8000784:	08001351 	.word	0x08001351
 8000788:	080013d5 	.word	0x080013d5
 800078c:	08001459 	.word	0x08001459
 8000790:	080014dd 	.word	0x080014dd
 8000794:	080015a9 	.word	0x080015a9
 8000798:	08001619 	.word	0x08001619
 800079c:	08001689 	.word	0x08001689
 80007a0:	080016f9 	.word	0x080016f9
 80007a4:	08001769 	.word	0x08001769
 80007a8:	08001845 	.word	0x08001845
 80007ac:	08001915 	.word	0x08001915
 80007b0:	080019e3 	.word	0x080019e3

080007b4 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b0af      	sub	sp, #188	; 0xbc
 80007b8:	af2a      	add	r7, sp, #168	; 0xa8
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80007c2:	687c      	ldr	r4, [r7, #4]
 80007c4:	2301      	movs	r3, #1
 80007c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80007c8:	f107 030e 	add.w	r3, r7, #14
 80007cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80007ce:	2334      	movs	r3, #52	; 0x34
 80007d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80007d2:	4668      	mov	r0, sp
 80007d4:	f104 0310 	add.w	r3, r4, #16
 80007d8:	229c      	movs	r2, #156	; 0x9c
 80007da:	4619      	mov	r1, r3
 80007dc:	f004 fa15 	bl	8004c0a <memcpy>
 80007e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007e4:	f001 fa97 	bl	8001d16 <bno055_read_regs>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <bno055_temperature+0x42>
        return err;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	e00d      	b.n	8000812 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7bdb      	ldrb	r3, [r3, #15]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <bno055_temperature+0x54>
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b25b      	sxtb	r3, r3
 8000806:	e001      	b.n	800080c <bno055_temperature+0x58>
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	b25b      	sxtb	r3, r3
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}
	...

0800081c <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b0af      	sub	sp, #188	; 0xbc
 8000820:	af2a      	add	r7, sp, #168	; 0xa8
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000826:	687c      	ldr	r4, [r7, #4]
 8000828:	2302      	movs	r3, #2
 800082a:	9329      	str	r3, [sp, #164]	; 0xa4
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	9328      	str	r3, [sp, #160]	; 0xa0
 8000832:	2308      	movs	r3, #8
 8000834:	9327      	str	r3, [sp, #156]	; 0x9c
 8000836:	4668      	mov	r0, sp
 8000838:	f104 0310 	add.w	r3, r4, #16
 800083c:	229c      	movs	r2, #156	; 0x9c
 800083e:	4619      	mov	r1, r3
 8000840:	f004 f9e3 	bl	8004c0a <memcpy>
 8000844:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000848:	f001 fa65 	bl	8001d16 <bno055_read_regs>
 800084c:	4603      	mov	r3, r0
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <bno055_acc_x+0x3e>
        return err;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	e019      	b.n	800088e <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800085a:	7b7b      	ldrb	r3, [r7, #13]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b21a      	sxth	r2, r3
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <bno055_acc_x+0x62>
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <bno055_acc_x+0x7c>
 800087c:	e001      	b.n	8000882 <bno055_acc_x+0x66>
 800087e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800088c:	2300      	movs	r3, #0
};
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	42c80000 	.word	0x42c80000

0800089c <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b0af      	sub	sp, #188	; 0xbc
 80008a0:	af2a      	add	r7, sp, #168	; 0xa8
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80008a6:	687c      	ldr	r4, [r7, #4]
 80008a8:	2302      	movs	r3, #2
 80008aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80008b2:	230a      	movs	r3, #10
 80008b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80008b6:	4668      	mov	r0, sp
 80008b8:	f104 0310 	add.w	r3, r4, #16
 80008bc:	229c      	movs	r2, #156	; 0x9c
 80008be:	4619      	mov	r1, r3
 80008c0:	f004 f9a3 	bl	8004c0a <memcpy>
 80008c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008c8:	f001 fa25 	bl	8001d16 <bno055_read_regs>
 80008cc:	4603      	mov	r3, r0
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <bno055_acc_y+0x3e>
        return err;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	e019      	b.n	800090e <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	b21a      	sxth	r2, r3
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <bno055_acc_y+0x62>
 80008f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000918 <bno055_acc_y+0x7c>
 80008fc:	e001      	b.n	8000902 <bno055_acc_y+0x66>
 80008fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800090c:	2300      	movs	r3, #0
};
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	42c80000 	.word	0x42c80000

0800091c <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b0af      	sub	sp, #188	; 0xbc
 8000920:	af2a      	add	r7, sp, #168	; 0xa8
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000926:	687c      	ldr	r4, [r7, #4]
 8000928:	2302      	movs	r3, #2
 800092a:	9329      	str	r3, [sp, #164]	; 0xa4
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	9328      	str	r3, [sp, #160]	; 0xa0
 8000932:	230c      	movs	r3, #12
 8000934:	9327      	str	r3, [sp, #156]	; 0x9c
 8000936:	4668      	mov	r0, sp
 8000938:	f104 0310 	add.w	r3, r4, #16
 800093c:	229c      	movs	r2, #156	; 0x9c
 800093e:	4619      	mov	r1, r3
 8000940:	f004 f963 	bl	8004c0a <memcpy>
 8000944:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000948:	f001 f9e5 	bl	8001d16 <bno055_read_regs>
 800094c:	4603      	mov	r3, r0
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <bno055_acc_z+0x3e>
        return err;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	e019      	b.n	800098e <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800095a:	7b7b      	ldrb	r3, [r7, #13]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <bno055_acc_z+0x62>
 8000978:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000998 <bno055_acc_z+0x7c>
 800097c:	e001      	b.n	8000982 <bno055_acc_z+0x66>
 800097e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800098c:	2300      	movs	r3, #0
};
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	bf00      	nop
 8000998:	42c80000 	.word	0x42c80000

0800099c <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b0b1      	sub	sp, #196	; 0xc4
 80009a0:	af2a      	add	r7, sp, #168	; 0xa8
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80009a6:	687c      	ldr	r4, [r7, #4]
 80009a8:	2306      	movs	r3, #6
 80009aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80009b2:	2308      	movs	r3, #8
 80009b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80009b6:	4668      	mov	r0, sp
 80009b8:	f104 0310 	add.w	r3, r4, #16
 80009bc:	229c      	movs	r2, #156	; 0x9c
 80009be:	4619      	mov	r1, r3
 80009c0:	f004 f923 	bl	8004c0a <memcpy>
 80009c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009c8:	f001 f9a5 	bl	8001d16 <bno055_read_regs>
 80009cc:	4603      	mov	r3, r0
 80009ce:	75fb      	strb	r3, [r7, #23]
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <bno055_acc+0x3e>
        return err;
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	e03f      	b.n	8000a5a <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <bno055_acc+0x4a>
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <bno055_acc+0xc8>)
 80009e4:	e001      	b.n	80009ea <bno055_acc+0x4e>
 80009e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80009ea:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80009ec:	7a7b      	ldrb	r3, [r7, #9]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	7a3b      	ldrb	r3, [r7, #8]
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	ee07 3a90 	vmov	s15, r3
 80009fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a02:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	7abb      	ldrb	r3, [r7, #10]
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	ee07 3a90 	vmov	s15, r3
 8000a22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a26:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000a34:	7b7b      	ldrb	r3, [r7, #13]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	7b3b      	ldrb	r3, [r7, #12]
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000a58:	2300      	movs	r3, #0
};
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	42c80000 	.word	0x42c80000

08000a68 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b0af      	sub	sp, #188	; 0xbc
 8000a6c:	af2a      	add	r7, sp, #168	; 0xa8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000a72:	687c      	ldr	r4, [r7, #4]
 8000a74:	2302      	movs	r3, #2
 8000a76:	9329      	str	r3, [sp, #164]	; 0xa4
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000a7e:	2328      	movs	r3, #40	; 0x28
 8000a80:	9327      	str	r3, [sp, #156]	; 0x9c
 8000a82:	4668      	mov	r0, sp
 8000a84:	f104 0310 	add.w	r3, r4, #16
 8000a88:	229c      	movs	r2, #156	; 0x9c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f004 f8bd 	bl	8004c0a <memcpy>
 8000a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a94:	f001 f93f 	bl	8001d16 <bno055_read_regs>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <bno055_linear_acc_x+0x3e>
        return err;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	e019      	b.n	8000ada <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	7b3b      	ldrb	r3, [r7, #12]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <bno055_linear_acc_x+0x62>
 8000ac4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000ae4 <bno055_linear_acc_x+0x7c>
 8000ac8:	e001      	b.n	8000ace <bno055_linear_acc_x+0x66>
 8000aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ad8:	2300      	movs	r3, #0
};
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	42c80000 	.word	0x42c80000

08000ae8 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b0af      	sub	sp, #188	; 0xbc
 8000aec:	af2a      	add	r7, sp, #168	; 0xa8
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000af2:	687c      	ldr	r4, [r7, #4]
 8000af4:	2302      	movs	r3, #2
 8000af6:	9329      	str	r3, [sp, #164]	; 0xa4
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	9328      	str	r3, [sp, #160]	; 0xa0
 8000afe:	232a      	movs	r3, #42	; 0x2a
 8000b00:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b02:	4668      	mov	r0, sp
 8000b04:	f104 0310 	add.w	r3, r4, #16
 8000b08:	229c      	movs	r2, #156	; 0x9c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f004 f87d 	bl	8004c0a <memcpy>
 8000b10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b14:	f001 f8ff 	bl	8001d16 <bno055_read_regs>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <bno055_linear_acc_y+0x3e>
        return err;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	e019      	b.n	8000b5a <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b26:	7b7b      	ldrb	r3, [r7, #13]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	7b3b      	ldrb	r3, [r7, #12]
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <bno055_linear_acc_y+0x62>
 8000b44:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b64 <bno055_linear_acc_y+0x7c>
 8000b48:	e001      	b.n	8000b4e <bno055_linear_acc_y+0x66>
 8000b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b58:	2300      	movs	r3, #0
};
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	42c80000 	.word	0x42c80000

08000b68 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b0af      	sub	sp, #188	; 0xbc
 8000b6c:	af2a      	add	r7, sp, #168	; 0xa8
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000b72:	687c      	ldr	r4, [r7, #4]
 8000b74:	2302      	movs	r3, #2
 8000b76:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b7e:	232c      	movs	r3, #44	; 0x2c
 8000b80:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b82:	4668      	mov	r0, sp
 8000b84:	f104 0310 	add.w	r3, r4, #16
 8000b88:	229c      	movs	r2, #156	; 0x9c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f004 f83d 	bl	8004c0a <memcpy>
 8000b90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b94:	f001 f8bf 	bl	8001d16 <bno055_read_regs>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <bno055_linear_acc_z+0x3e>
        return err;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	e019      	b.n	8000bda <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ba6:	7b7b      	ldrb	r3, [r7, #13]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	7b3b      	ldrb	r3, [r7, #12]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <bno055_linear_acc_z+0x62>
 8000bc4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000be4 <bno055_linear_acc_z+0x7c>
 8000bc8:	e001      	b.n	8000bce <bno055_linear_acc_z+0x66>
 8000bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000bd8:	2300      	movs	r3, #0
};
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	42c80000 	.word	0x42c80000

08000be8 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b0b1      	sub	sp, #196	; 0xc4
 8000bec:	af2a      	add	r7, sp, #168	; 0xa8
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000bf2:	687c      	ldr	r4, [r7, #4]
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	9329      	str	r3, [sp, #164]	; 0xa4
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	9328      	str	r3, [sp, #160]	; 0xa0
 8000bfe:	2328      	movs	r3, #40	; 0x28
 8000c00:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c02:	4668      	mov	r0, sp
 8000c04:	f104 0310 	add.w	r3, r4, #16
 8000c08:	229c      	movs	r2, #156	; 0x9c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f003 fffd 	bl	8004c0a <memcpy>
 8000c10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c14:	f001 f87f 	bl	8001d16 <bno055_read_regs>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	75fb      	strb	r3, [r7, #23]
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <bno055_linear_acc+0x3e>
        return err;
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	e03f      	b.n	8000ca6 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <bno055_linear_acc+0x4a>
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <bno055_linear_acc+0xc8>)
 8000c30:	e001      	b.n	8000c36 <bno055_linear_acc+0x4e>
 8000c32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c36:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000c38:	7a7b      	ldrb	r3, [r7, #9]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	7a3b      	ldrb	r3, [r7, #8]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	7abb      	ldrb	r3, [r7, #10]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c72:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000c80:	7b7b      	ldrb	r3, [r7, #13]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7b3b      	ldrb	r3, [r7, #12]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000ca4:	2300      	movs	r3, #0
};
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	42c80000 	.word	0x42c80000

08000cb4 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b0af      	sub	sp, #188	; 0xbc
 8000cb8:	af2a      	add	r7, sp, #168	; 0xa8
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000cbe:	687c      	ldr	r4, [r7, #4]
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	9329      	str	r3, [sp, #164]	; 0xa4
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8000cca:	2314      	movs	r3, #20
 8000ccc:	9327      	str	r3, [sp, #156]	; 0x9c
 8000cce:	4668      	mov	r0, sp
 8000cd0:	f104 0310 	add.w	r3, r4, #16
 8000cd4:	229c      	movs	r2, #156	; 0x9c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f003 ff97 	bl	8004c0a <memcpy>
 8000cdc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ce0:	f001 f819 	bl	8001d16 <bno055_read_regs>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <bno055_gyro_x+0x3e>
        return err;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	e019      	b.n	8000d26 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <bno055_gyro_x+0x62>
 8000d10:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d14:	e001      	b.n	8000d1a <bno055_gyro_x+0x66>
 8000d16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d30 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d24:	2300      	movs	r3, #0
};
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	44610000 	.word	0x44610000

08000d34 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b0af      	sub	sp, #188	; 0xbc
 8000d38:	af2a      	add	r7, sp, #168	; 0xa8
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000d3e:	687c      	ldr	r4, [r7, #4]
 8000d40:	2302      	movs	r3, #2
 8000d42:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d4a:	2316      	movs	r3, #22
 8000d4c:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d4e:	4668      	mov	r0, sp
 8000d50:	f104 0310 	add.w	r3, r4, #16
 8000d54:	229c      	movs	r2, #156	; 0x9c
 8000d56:	4619      	mov	r1, r3
 8000d58:	f003 ff57 	bl	8004c0a <memcpy>
 8000d5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d60:	f000 ffd9 	bl	8001d16 <bno055_read_regs>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <bno055_gyro_y+0x3e>
        return err;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	e019      	b.n	8000da6 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <bno055_gyro_y+0x62>
 8000d90:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d94:	e001      	b.n	8000d9a <bno055_gyro_y+0x66>
 8000d96:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000db0 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000da4:	2300      	movs	r3, #0
};
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	44610000 	.word	0x44610000

08000db4 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b0af      	sub	sp, #188	; 0xbc
 8000db8:	af2a      	add	r7, sp, #168	; 0xa8
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000dbe:	687c      	ldr	r4, [r7, #4]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8000dca:	2318      	movs	r3, #24
 8000dcc:	9327      	str	r3, [sp, #156]	; 0x9c
 8000dce:	4668      	mov	r0, sp
 8000dd0:	f104 0310 	add.w	r3, r4, #16
 8000dd4:	229c      	movs	r2, #156	; 0x9c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f003 ff17 	bl	8004c0a <memcpy>
 8000ddc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000de0:	f000 ff99 	bl	8001d16 <bno055_read_regs>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <bno055_gyro_z+0x3e>
        return err;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	e019      	b.n	8000e26 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000df2:	7b7b      	ldrb	r3, [r7, #13]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	7b3b      	ldrb	r3, [r7, #12]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <bno055_gyro_z+0x62>
 8000e10:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000e14:	e001      	b.n	8000e1a <bno055_gyro_z+0x66>
 8000e16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e30 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e24:	2300      	movs	r3, #0
};
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	44610000 	.word	0x44610000

08000e34 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b0b1      	sub	sp, #196	; 0xc4
 8000e38:	af2a      	add	r7, sp, #168	; 0xa8
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000e3e:	687c      	ldr	r4, [r7, #4]
 8000e40:	2306      	movs	r3, #6
 8000e42:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e4e:	4668      	mov	r0, sp
 8000e50:	f104 0310 	add.w	r3, r4, #16
 8000e54:	229c      	movs	r2, #156	; 0x9c
 8000e56:	4619      	mov	r1, r3
 8000e58:	f003 fed7 	bl	8004c0a <memcpy>
 8000e5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e60:	f000 ff59 	bl	8001d16 <bno055_read_regs>
 8000e64:	4603      	mov	r3, r0
 8000e66:	75fb      	strb	r3, [r7, #23]
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <bno055_gyro+0x3e>
        return err;
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	e03f      	b.n	8000ef2 <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <bno055_gyro+0x4c>
 8000e7a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000e7e:	e000      	b.n	8000e82 <bno055_gyro+0x4e>
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e82:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000e84:	7a7b      	ldrb	r3, [r7, #9]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	7a3b      	ldrb	r3, [r7, #8]
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000ea8:	7afb      	ldrb	r3, [r7, #11]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	7abb      	ldrb	r3, [r7, #10]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ebe:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	7b3b      	ldrb	r3, [r7, #12]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ee2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	44610000 	.word	0x44610000

08000f00 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b0af      	sub	sp, #188	; 0xbc
 8000f04:	af2a      	add	r7, sp, #168	; 0xa8
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000f0a:	687c      	ldr	r4, [r7, #4]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f16:	230e      	movs	r3, #14
 8000f18:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f1a:	4668      	mov	r0, sp
 8000f1c:	f104 0310 	add.w	r3, r4, #16
 8000f20:	229c      	movs	r2, #156	; 0x9c
 8000f22:	4619      	mov	r1, r3
 8000f24:	f003 fe71 	bl	8004c0a <memcpy>
 8000f28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f2c:	f000 fef3 	bl	8001d16 <bno055_read_regs>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <bno055_mag_x+0x3e>
        return err;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	e012      	b.n	8000f64 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	7b3b      	ldrb	r3, [r7, #12]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f54:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}

08000f6c <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b0af      	sub	sp, #188	; 0xbc
 8000f70:	af2a      	add	r7, sp, #168	; 0xa8
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000f76:	687c      	ldr	r4, [r7, #4]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f82:	2310      	movs	r3, #16
 8000f84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f86:	4668      	mov	r0, sp
 8000f88:	f104 0310 	add.w	r3, r4, #16
 8000f8c:	229c      	movs	r2, #156	; 0x9c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f003 fe3b 	bl	8004c0a <memcpy>
 8000f94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f98:	f000 febd 	bl	8001d16 <bno055_read_regs>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <bno055_mag_y+0x3e>
        return err;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	e012      	b.n	8000fd0 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b0af      	sub	sp, #188	; 0xbc
 8000fdc:	af2a      	add	r7, sp, #168	; 0xa8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000fe2:	687c      	ldr	r4, [r7, #4]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fee:	2312      	movs	r3, #18
 8000ff0:	9327      	str	r3, [sp, #156]	; 0x9c
 8000ff2:	4668      	mov	r0, sp
 8000ff4:	f104 0310 	add.w	r3, r4, #16
 8000ff8:	229c      	movs	r2, #156	; 0x9c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f003 fe05 	bl	8004c0a <memcpy>
 8001000:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001004:	f000 fe87 	bl	8001d16 <bno055_read_regs>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <bno055_mag_z+0x3e>
        return err;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	e012      	b.n	800103c <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}

08001044 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b0af      	sub	sp, #188	; 0xbc
 8001048:	af2a      	add	r7, sp, #168	; 0xa8
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 800104e:	687c      	ldr	r4, [r7, #4]
 8001050:	2306      	movs	r3, #6
 8001052:	9329      	str	r3, [sp, #164]	; 0xa4
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	9328      	str	r3, [sp, #160]	; 0xa0
 800105a:	230e      	movs	r3, #14
 800105c:	9327      	str	r3, [sp, #156]	; 0x9c
 800105e:	4668      	mov	r0, sp
 8001060:	f104 0310 	add.w	r3, r4, #16
 8001064:	229c      	movs	r2, #156	; 0x9c
 8001066:	4619      	mov	r1, r3
 8001068:	f003 fdcf 	bl	8004c0a <memcpy>
 800106c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001070:	f000 fe51 	bl	8001d16 <bno055_read_regs>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <bno055_mag+0x3e>
        return err;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	e036      	b.n	80010f0 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001082:	7a7b      	ldrb	r3, [r7, #9]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7a3b      	ldrb	r3, [r7, #8]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001098:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7abb      	ldrb	r3, [r7, #10]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7b3b      	ldrb	r3, [r7, #12]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80010ee:	2300      	movs	r3, #0
};
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b0b1      	sub	sp, #196	; 0xc4
 80010fc:	af2a      	add	r7, sp, #168	; 0xa8
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001102:	687c      	ldr	r4, [r7, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	9329      	str	r3, [sp, #164]	; 0xa4
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	9328      	str	r3, [sp, #160]	; 0xa0
 800110e:	232e      	movs	r3, #46	; 0x2e
 8001110:	9327      	str	r3, [sp, #156]	; 0x9c
 8001112:	4668      	mov	r0, sp
 8001114:	f104 0310 	add.w	r3, r4, #16
 8001118:	229c      	movs	r2, #156	; 0x9c
 800111a:	4619      	mov	r1, r3
 800111c:	f003 fd75 	bl	8004c0a <memcpy>
 8001120:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001124:	f000 fdf7 	bl	8001d16 <bno055_read_regs>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <bno055_gravity_x+0x3e>
        return err;
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	e01b      	b.n	800116e <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <bno055_gravity_x+0x4a>
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <bno055_gravity_x+0x80>)
 8001140:	e001      	b.n	8001146 <bno055_gravity_x+0x4e>
 8001142:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001146:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21b      	sxth	r3, r3
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800115e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	42c80000 	.word	0x42c80000

0800117c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b0b1      	sub	sp, #196	; 0xc4
 8001180:	af2a      	add	r7, sp, #168	; 0xa8
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001186:	687c      	ldr	r4, [r7, #4]
 8001188:	2302      	movs	r3, #2
 800118a:	9329      	str	r3, [sp, #164]	; 0xa4
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	9328      	str	r3, [sp, #160]	; 0xa0
 8001192:	2330      	movs	r3, #48	; 0x30
 8001194:	9327      	str	r3, [sp, #156]	; 0x9c
 8001196:	4668      	mov	r0, sp
 8001198:	f104 0310 	add.w	r3, r4, #16
 800119c:	229c      	movs	r2, #156	; 0x9c
 800119e:	4619      	mov	r1, r3
 80011a0:	f003 fd33 	bl	8004c0a <memcpy>
 80011a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011a8:	f000 fdb5 	bl	8001d16 <bno055_read_regs>
 80011ac:	4603      	mov	r3, r0
 80011ae:	75fb      	strb	r3, [r7, #23]
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <bno055_gravity_y+0x3e>
        return err;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	e01b      	b.n	80011f2 <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <bno055_gravity_y+0x4a>
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <bno055_gravity_y+0x80>)
 80011c4:	e001      	b.n	80011ca <bno055_gravity_y+0x4e>
 80011c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011ca:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7b3b      	ldrb	r3, [r7, #12]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	42c80000 	.word	0x42c80000

08001200 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b0b1      	sub	sp, #196	; 0xc4
 8001204:	af2a      	add	r7, sp, #168	; 0xa8
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800120a:	687c      	ldr	r4, [r7, #4]
 800120c:	2302      	movs	r3, #2
 800120e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	9328      	str	r3, [sp, #160]	; 0xa0
 8001216:	2332      	movs	r3, #50	; 0x32
 8001218:	9327      	str	r3, [sp, #156]	; 0x9c
 800121a:	4668      	mov	r0, sp
 800121c:	f104 0310 	add.w	r3, r4, #16
 8001220:	229c      	movs	r2, #156	; 0x9c
 8001222:	4619      	mov	r1, r3
 8001224:	f003 fcf1 	bl	8004c0a <memcpy>
 8001228:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800122c:	f000 fd73 	bl	8001d16 <bno055_read_regs>
 8001230:	4603      	mov	r3, r0
 8001232:	75fb      	strb	r3, [r7, #23]
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <bno055_gravity_z+0x3e>
        return err;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	e01b      	b.n	8001276 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <bno055_gravity_z+0x4a>
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <bno055_gravity_z+0x80>)
 8001248:	e001      	b.n	800124e <bno055_gravity_z+0x4e>
 800124a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800124e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7b3b      	ldrb	r3, [r7, #12]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001266:	ed97 7a04 	vldr	s14, [r7, #16]
 800126a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	42c80000 	.word	0x42c80000

08001284 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b0b1      	sub	sp, #196	; 0xc4
 8001288:	af2a      	add	r7, sp, #168	; 0xa8
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 800128e:	687c      	ldr	r4, [r7, #4]
 8001290:	2306      	movs	r3, #6
 8001292:	9329      	str	r3, [sp, #164]	; 0xa4
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	9328      	str	r3, [sp, #160]	; 0xa0
 800129a:	232e      	movs	r3, #46	; 0x2e
 800129c:	9327      	str	r3, [sp, #156]	; 0x9c
 800129e:	4668      	mov	r0, sp
 80012a0:	f104 0310 	add.w	r3, r4, #16
 80012a4:	229c      	movs	r2, #156	; 0x9c
 80012a6:	4619      	mov	r1, r3
 80012a8:	f003 fcaf 	bl	8004c0a <memcpy>
 80012ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012b0:	f000 fd31 	bl	8001d16 <bno055_read_regs>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <bno055_gravity+0x3e>
        return err;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	e03f      	b.n	8001342 <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <bno055_gravity+0x4a>
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <bno055_gravity+0xc8>)
 80012cc:	e001      	b.n	80012d2 <bno055_gravity+0x4e>
 80012ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012d2:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 80012d4:	7a7b      	ldrb	r3, [r7, #9]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7a3b      	ldrb	r3, [r7, #8]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80012ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800130e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001332:	ed97 7a04 	vldr	s14, [r7, #16]
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	42c80000 	.word	0x42c80000

08001350 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b0b1      	sub	sp, #196	; 0xc4
 8001354:	af2a      	add	r7, sp, #168	; 0xa8
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 800135a:	687c      	ldr	r4, [r7, #4]
 800135c:	2302      	movs	r3, #2
 800135e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	9328      	str	r3, [sp, #160]	; 0xa0
 8001366:	231a      	movs	r3, #26
 8001368:	9327      	str	r3, [sp, #156]	; 0x9c
 800136a:	4668      	mov	r0, sp
 800136c:	f104 0310 	add.w	r3, r4, #16
 8001370:	229c      	movs	r2, #156	; 0x9c
 8001372:	4619      	mov	r1, r3
 8001374:	f003 fc49 	bl	8004c0a <memcpy>
 8001378:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800137c:	f000 fccb 	bl	8001d16 <bno055_read_regs>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	e01b      	b.n	80013c6 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <bno055_euler_yaw+0x4c>
 8001396:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800139a:	e000      	b.n	800139e <bno055_euler_yaw+0x4e>
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800139e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80013a0:	7b7b      	ldrb	r3, [r7, #13]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80013ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	44610000 	.word	0x44610000

080013d4 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b0b1      	sub	sp, #196	; 0xc4
 80013d8:	af2a      	add	r7, sp, #168	; 0xa8
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 80013de:	687c      	ldr	r4, [r7, #4]
 80013e0:	2302      	movs	r3, #2
 80013e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80013ea:	231c      	movs	r3, #28
 80013ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80013ee:	4668      	mov	r0, sp
 80013f0:	f104 0310 	add.w	r3, r4, #16
 80013f4:	229c      	movs	r2, #156	; 0x9c
 80013f6:	4619      	mov	r1, r3
 80013f8:	f003 fc07 	bl	8004c0a <memcpy>
 80013fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001400:	f000 fc89 	bl	8001d16 <bno055_read_regs>
 8001404:	4603      	mov	r3, r0
 8001406:	75fb      	strb	r3, [r7, #23]
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <bno055_euler_roll+0x3e>
        return err;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	e01b      	b.n	800144a <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <bno055_euler_roll+0x4c>
 800141a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800141e:	e000      	b.n	8001422 <bno055_euler_roll+0x4e>
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001422:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21b      	sxth	r3, r3
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800143a:	ed97 7a04 	vldr	s14, [r7, #16]
 800143e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	44610000 	.word	0x44610000

08001458 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b0b1      	sub	sp, #196	; 0xc4
 800145c:	af2a      	add	r7, sp, #168	; 0xa8
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001462:	687c      	ldr	r4, [r7, #4]
 8001464:	2302      	movs	r3, #2
 8001466:	9329      	str	r3, [sp, #164]	; 0xa4
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	9328      	str	r3, [sp, #160]	; 0xa0
 800146e:	231e      	movs	r3, #30
 8001470:	9327      	str	r3, [sp, #156]	; 0x9c
 8001472:	4668      	mov	r0, sp
 8001474:	f104 0310 	add.w	r3, r4, #16
 8001478:	229c      	movs	r2, #156	; 0x9c
 800147a:	4619      	mov	r1, r3
 800147c:	f003 fbc5 	bl	8004c0a <memcpy>
 8001480:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001484:	f000 fc47 	bl	8001d16 <bno055_read_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <bno055_euler_pitch+0x3e>
        return err;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	e01b      	b.n	80014ce <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <bno055_euler_pitch+0x4c>
 800149e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014a2:	e000      	b.n	80014a6 <bno055_euler_pitch+0x4e>
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014a6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80014a8:	7b7b      	ldrb	r3, [r7, #13]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7b3b      	ldrb	r3, [r7, #12]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014be:	ed97 7a04 	vldr	s14, [r7, #16]
 80014c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	44610000 	.word	0x44610000

080014dc <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b0b1      	sub	sp, #196	; 0xc4
 80014e0:	af2a      	add	r7, sp, #168	; 0xa8
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 80014e6:	687c      	ldr	r4, [r7, #4]
 80014e8:	2306      	movs	r3, #6
 80014ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80014f2:	231a      	movs	r3, #26
 80014f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80014f6:	4668      	mov	r0, sp
 80014f8:	f104 0310 	add.w	r3, r4, #16
 80014fc:	229c      	movs	r2, #156	; 0x9c
 80014fe:	4619      	mov	r1, r3
 8001500:	f003 fb83 	bl	8004c0a <memcpy>
 8001504:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001508:	f000 fc05 	bl	8001d16 <bno055_read_regs>
 800150c:	4603      	mov	r3, r0
 800150e:	75fb      	strb	r3, [r7, #23]
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	e03f      	b.n	800159a <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <bno055_euler+0x4c>
 8001522:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001526:	e000      	b.n	800152a <bno055_euler+0x4e>
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800152a:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 800152c:	7a7b      	ldrb	r3, [r7, #9]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7a3b      	ldrb	r3, [r7, #8]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001542:	ed97 7a04 	vldr	s14, [r7, #16]
 8001546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001550:	7afb      	ldrb	r3, [r7, #11]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7abb      	ldrb	r3, [r7, #10]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001566:	ed97 7a04 	vldr	s14, [r7, #16]
 800156a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7b3b      	ldrb	r3, [r7, #12]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	44610000 	.word	0x44610000

080015a8 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b0af      	sub	sp, #188	; 0xbc
 80015ac:	af2a      	add	r7, sp, #168	; 0xa8
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80015b2:	687c      	ldr	r4, [r7, #4]
 80015b4:	2302      	movs	r3, #2
 80015b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80015be:	2320      	movs	r3, #32
 80015c0:	9327      	str	r3, [sp, #156]	; 0x9c
 80015c2:	4668      	mov	r0, sp
 80015c4:	f104 0310 	add.w	r3, r4, #16
 80015c8:	229c      	movs	r2, #156	; 0x9c
 80015ca:	4619      	mov	r1, r3
 80015cc:	f003 fb1d 	bl	8004c0a <memcpy>
 80015d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015d4:	f000 fb9f 	bl	8001d16 <bno055_read_regs>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <bno055_quaternion_w+0x3e>
        return err;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	e012      	b.n	800160c <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fc:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001614 <bno055_quaternion_w+0x6c>
 8001600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	46800000 	.word	0x46800000

08001618 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b0af      	sub	sp, #188	; 0xbc
 800161c:	af2a      	add	r7, sp, #168	; 0xa8
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001622:	687c      	ldr	r4, [r7, #4]
 8001624:	2302      	movs	r3, #2
 8001626:	9329      	str	r3, [sp, #164]	; 0xa4
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	9328      	str	r3, [sp, #160]	; 0xa0
 800162e:	2322      	movs	r3, #34	; 0x22
 8001630:	9327      	str	r3, [sp, #156]	; 0x9c
 8001632:	4668      	mov	r0, sp
 8001634:	f104 0310 	add.w	r3, r4, #16
 8001638:	229c      	movs	r2, #156	; 0x9c
 800163a:	4619      	mov	r1, r3
 800163c:	f003 fae5 	bl	8004c0a <memcpy>
 8001640:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001644:	f000 fb67 	bl	8001d16 <bno055_read_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <bno055_quaternion_x+0x3e>
        return err;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	e012      	b.n	800167c <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001656:	7b7b      	ldrb	r3, [r7, #13]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21b      	sxth	r3, r3
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001684 <bno055_quaternion_x+0x6c>
 8001670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	46800000 	.word	0x46800000

08001688 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b0af      	sub	sp, #188	; 0xbc
 800168c:	af2a      	add	r7, sp, #168	; 0xa8
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001692:	687c      	ldr	r4, [r7, #4]
 8001694:	2302      	movs	r3, #2
 8001696:	9329      	str	r3, [sp, #164]	; 0xa4
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	9328      	str	r3, [sp, #160]	; 0xa0
 800169e:	2324      	movs	r3, #36	; 0x24
 80016a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80016a2:	4668      	mov	r0, sp
 80016a4:	f104 0310 	add.w	r3, r4, #16
 80016a8:	229c      	movs	r2, #156	; 0x9c
 80016aa:	4619      	mov	r1, r3
 80016ac:	f003 faad 	bl	8004c0a <memcpy>
 80016b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016b4:	f000 fb2f 	bl	8001d16 <bno055_read_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <bno055_quaternion_y+0x3e>
        return err;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	e012      	b.n	80016ec <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7b3b      	ldrb	r3, [r7, #12]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016f4 <bno055_quaternion_y+0x6c>
 80016e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	46800000 	.word	0x46800000

080016f8 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b0af      	sub	sp, #188	; 0xbc
 80016fc:	af2a      	add	r7, sp, #168	; 0xa8
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001702:	687c      	ldr	r4, [r7, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9329      	str	r3, [sp, #164]	; 0xa4
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	9328      	str	r3, [sp, #160]	; 0xa0
 800170e:	2326      	movs	r3, #38	; 0x26
 8001710:	9327      	str	r3, [sp, #156]	; 0x9c
 8001712:	4668      	mov	r0, sp
 8001714:	f104 0310 	add.w	r3, r4, #16
 8001718:	229c      	movs	r2, #156	; 0x9c
 800171a:	4619      	mov	r1, r3
 800171c:	f003 fa75 	bl	8004c0a <memcpy>
 8001720:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001724:	f000 faf7 	bl	8001d16 <bno055_read_regs>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <bno055_quaternion_z+0x3e>
        return err;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	e012      	b.n	800175c <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21b      	sxth	r3, r3
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001764 <bno055_quaternion_z+0x6c>
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	46800000 	.word	0x46800000

08001768 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b0b1      	sub	sp, #196	; 0xc4
 800176c:	af2a      	add	r7, sp, #168	; 0xa8
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8001772:	687c      	ldr	r4, [r7, #4]
 8001774:	2308      	movs	r3, #8
 8001776:	9329      	str	r3, [sp, #164]	; 0xa4
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	9328      	str	r3, [sp, #160]	; 0xa0
 800177e:	2320      	movs	r3, #32
 8001780:	9327      	str	r3, [sp, #156]	; 0x9c
 8001782:	4668      	mov	r0, sp
 8001784:	f104 0310 	add.w	r3, r4, #16
 8001788:	229c      	movs	r2, #156	; 0x9c
 800178a:	4619      	mov	r1, r3
 800178c:	f003 fa3d 	bl	8004c0a <memcpy>
 8001790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001794:	f000 fabf 	bl	8001d16 <bno055_read_regs>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <bno055_quaternion+0x3e>
        return err;
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	e048      	b.n	8001838 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7b3b      	ldrb	r3, [r7, #12]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001840 <bno055_quaternion+0xd8>
 80017c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	7bbb      	ldrb	r3, [r7, #14]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001840 <bno055_quaternion+0xd8>
 80017e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 80017ee:	7c7b      	ldrb	r3, [r7, #17]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7c3b      	ldrb	r3, [r7, #16]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001840 <bno055_quaternion+0xd8>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	7cbb      	ldrb	r3, [r7, #18]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001828:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001840 <bno055_quaternion+0xd8>
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	46800000 	.word	0x46800000

08001844 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b0af      	sub	sp, #188	; 0xbc
 8001848:	af2a      	add	r7, sp, #168	; 0xa8
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	70fb      	strb	r3, [r7, #3]
 8001856:	460b      	mov	r3, r1
 8001858:	70bb      	strb	r3, [r7, #2]
 800185a:	4613      	mov	r3, r2
 800185c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800185e:	2101      	movs	r1, #1
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fabb 	bl	8001ddc <bno055_set_page>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <bno055_acc_conf+0x30>
        return err;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	e04b      	b.n	800190c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f91b 	bl	8001ab2 <bno055_set_opmode>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <bno055_acc_conf+0x46>
        return err;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	e040      	b.n	800190c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800188a:	200c      	movs	r0, #12
 800188c:	f000 fe8c 	bl	80025a8 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	78bb      	ldrb	r3, [r7, #2]
 8001894:	4313      	orrs	r3, r2
 8001896:	b2da      	uxtb	r2, r3
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	4313      	orrs	r3, r2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80018a0:	687c      	ldr	r4, [r7, #4]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80018a6:	f107 030e 	add.w	r3, r7, #14
 80018aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80018ac:	2308      	movs	r3, #8
 80018ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80018b0:	4668      	mov	r0, sp
 80018b2:	f104 0310 	add.w	r3, r4, #16
 80018b6:	229c      	movs	r2, #156	; 0x9c
 80018b8:	4619      	mov	r1, r3
 80018ba:	f003 f9a6 	bl	8004c0a <memcpy>
 80018be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018c2:	f000 fa5e 	bl	8001d82 <bno055_write_regs>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <bno055_acc_conf+0x90>
        return err;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	e01b      	b.n	800190c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	791b      	ldrb	r3, [r3, #4]
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8e9 	bl	8001ab2 <bno055_set_opmode>
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <bno055_acc_conf+0xaa>
        return err;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	e00e      	b.n	800190c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80018ee:	2018      	movs	r0, #24
 80018f0:	f000 fe5a 	bl	80025a8 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fa70 	bl	8001ddc <bno055_set_page>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <bno055_acc_conf+0xc6>
        return err;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	e000      	b.n	800190c <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b0af      	sub	sp, #188	; 0xbc
 8001918:	af2a      	add	r7, sp, #168	; 0xa8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	70fb      	strb	r3, [r7, #3]
 8001926:	460b      	mov	r3, r1
 8001928:	70bb      	strb	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800192e:	2101      	movs	r1, #1
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fa53 	bl	8001ddc <bno055_set_page>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <bno055_gyr_conf+0x30>
        return err;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	e04a      	b.n	80019da <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001944:	2100      	movs	r1, #0
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f8b3 	bl	8001ab2 <bno055_set_opmode>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <bno055_gyr_conf+0x46>
        return err;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	e03f      	b.n	80019da <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800195a:	200c      	movs	r0, #12
 800195c:	f000 fe24 	bl	80025a8 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	78bb      	ldrb	r3, [r7, #2]
 8001964:	4313      	orrs	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	733b      	strb	r3, [r7, #12]
 800196a:	787b      	ldrb	r3, [r7, #1]
 800196c:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800196e:	687c      	ldr	r4, [r7, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9329      	str	r3, [sp, #164]	; 0xa4
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	9328      	str	r3, [sp, #160]	; 0xa0
 800197a:	230a      	movs	r3, #10
 800197c:	9327      	str	r3, [sp, #156]	; 0x9c
 800197e:	4668      	mov	r0, sp
 8001980:	f104 0310 	add.w	r3, r4, #16
 8001984:	229c      	movs	r2, #156	; 0x9c
 8001986:	4619      	mov	r1, r3
 8001988:	f003 f93f 	bl	8004c0a <memcpy>
 800198c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001990:	f000 f9f7 	bl	8001d82 <bno055_write_regs>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	e01b      	b.n	80019da <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f882 	bl	8001ab2 <bno055_set_opmode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <bno055_gyr_conf+0xa8>
        return err;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	e00e      	b.n	80019da <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80019bc:	2018      	movs	r0, #24
 80019be:	f000 fdf3 	bl	80025a8 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80019c2:	2100      	movs	r1, #0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fa09 	bl	8001ddc <bno055_set_page>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <bno055_gyr_conf+0xc4>
        return err;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	e000      	b.n	80019da <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}

080019e2 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80019e2:	b590      	push	{r4, r7, lr}
 80019e4:	b0af      	sub	sp, #188	; 0xbc
 80019e6:	af2a      	add	r7, sp, #168	; 0xa8
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70bb      	strb	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80019fc:	2101      	movs	r1, #1
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f9ec 	bl	8001ddc <bno055_set_page>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <bno055_mag_conf+0x30>
        return err;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	e04b      	b.n	8001aaa <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001a12:	2100      	movs	r1, #0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f84c 	bl	8001ab2 <bno055_set_opmode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <bno055_mag_conf+0x46>
        return err;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	e040      	b.n	8001aaa <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001a28:	200c      	movs	r0, #12
 8001a2a:	f000 fdbd 	bl	80025a8 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	78bb      	ldrb	r3, [r7, #2]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	787b      	ldrb	r3, [r7, #1]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8001a3e:	687c      	ldr	r4, [r7, #4]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a44:	f107 030e 	add.w	r3, r7, #14
 8001a48:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a4a:	2309      	movs	r3, #9
 8001a4c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a4e:	4668      	mov	r0, sp
 8001a50:	f104 0310 	add.w	r3, r4, #16
 8001a54:	229c      	movs	r2, #156	; 0x9c
 8001a56:	4619      	mov	r1, r3
 8001a58:	f003 f8d7 	bl	8004c0a <memcpy>
 8001a5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a60:	f000 f98f 	bl	8001d82 <bno055_write_regs>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <bno055_mag_conf+0x90>
        return err;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	e01b      	b.n	8001aaa <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	791b      	ldrb	r3, [r3, #4]
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f81a 	bl	8001ab2 <bno055_set_opmode>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <bno055_mag_conf+0xaa>
        return err;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	e00e      	b.n	8001aaa <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001a8c:	2018      	movs	r0, #24
 8001a8e:	f000 fd8b 	bl	80025a8 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f9a1 	bl	8001ddc <bno055_set_page>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <bno055_mag_conf+0xc6>
        return err;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	e000      	b.n	8001aaa <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8001ab2:	b590      	push	{r4, r7, lr}
 8001ab4:	b0af      	sub	sp, #188	; 0xbc
 8001ab6:	af2a      	add	r7, sp, #168	; 0xa8
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8001abe:	687c      	ldr	r4, [r7, #4]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ac4:	1cfb      	adds	r3, r7, #3
 8001ac6:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ac8:	233d      	movs	r3, #61	; 0x3d
 8001aca:	9327      	str	r3, [sp, #156]	; 0x9c
 8001acc:	4668      	mov	r0, sp
 8001ace:	f104 0310 	add.w	r3, r4, #16
 8001ad2:	229c      	movs	r2, #156	; 0x9c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f003 f898 	bl	8004c0a <memcpy>
 8001ada:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ade:	f000 f950 	bl	8001d82 <bno055_write_regs>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	e003      	b.n	8001af8 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001af0:	2018      	movs	r0, #24
 8001af2:	f000 fd59 	bl	80025a8 <HAL_Delay>
    return BNO_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b0af      	sub	sp, #188	; 0xbc
 8001b04:	af2a      	add	r7, sp, #168	; 0xa8
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	70fb      	strb	r3, [r7, #3]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70bb      	strb	r3, [r7, #2]
 8001b16:	4613      	mov	r3, r2
 8001b18:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffc8 	bl	8001ab2 <bno055_set_opmode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <bno055_set_unit+0x30>
        return err;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	e04b      	b.n	8001bc8 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f952 	bl	8001ddc <bno055_set_page>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <bno055_set_unit+0x46>
        return err;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	e040      	b.n	8001bc8 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	78bb      	ldrb	r3, [r7, #2]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	787b      	ldrb	r3, [r7, #1]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8001b5e:	687c      	ldr	r4, [r7, #4]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b64:	f107 030e 	add.w	r3, r7, #14
 8001b68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b6a:	233b      	movs	r3, #59	; 0x3b
 8001b6c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b6e:	4668      	mov	r0, sp
 8001b70:	f104 0310 	add.w	r3, r4, #16
 8001b74:	229c      	movs	r2, #156	; 0x9c
 8001b76:	4619      	mov	r1, r3
 8001b78:	f003 f847 	bl	8004c0a <memcpy>
 8001b7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b80:	f000 f8ff 	bl	8001d82 <bno055_write_regs>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <bno055_set_unit+0x92>
        return err;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	e01a      	b.n	8001bc8 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	78ba      	ldrb	r2, [r7, #2]
 8001b96:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	787a      	ldrb	r2, [r7, #1]
 8001b9c:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ba4:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff7d 	bl	8001ab2 <bno055_set_opmode>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <bno055_set_unit+0xc6>
        return err;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	e000      	b.n	8001bc8 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b0af      	sub	sp, #188	; 0xbc
 8001bd4:	af2a      	add	r7, sp, #168	; 0xa8
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8001be2:	2304      	movs	r3, #4
 8001be4:	e04d      	b.n	8001c82 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff62 	bl	8001ab2 <bno055_set_opmode>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <bno055_set_pwr_mode+0x2c>
        return err;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	e042      	b.n	8001c82 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8ec 	bl	8001ddc <bno055_set_page>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <bno055_set_pwr_mode+0x42>
        return err;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	e037      	b.n	8001c82 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8001c12:	687c      	ldr	r4, [r7, #4]
 8001c14:	2301      	movs	r3, #1
 8001c16:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c18:	1cfb      	adds	r3, r7, #3
 8001c1a:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c1c:	233e      	movs	r3, #62	; 0x3e
 8001c1e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c20:	4668      	mov	r0, sp
 8001c22:	f104 0310 	add.w	r3, r4, #16
 8001c26:	229c      	movs	r2, #156	; 0x9c
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f002 ffee 	bl	8004c0a <memcpy>
 8001c2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c32:	f000 f8a6 	bl	8001d82 <bno055_write_regs>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	e01e      	b.n	8001c82 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8c5 	bl	8001ddc <bno055_set_page>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <bno055_set_pwr_mode+0x90>
        return err;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	e010      	b.n	8001c82 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	791b      	ldrb	r3, [r3, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff23 	bl	8001ab2 <bno055_set_opmode>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <bno055_set_pwr_mode+0xaa>
        return err;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	e003      	b.n	8001c82 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	f000 fc94 	bl	80025a8 <HAL_Delay>
    return BNO_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}

08001c8a <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b0af      	sub	sp, #188	; 0xbc
 8001c8e:	af2a      	add	r7, sp, #168	; 0xa8
 8001c90:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8001c92:	2320      	movs	r3, #32
 8001c94:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001c96:	687c      	ldr	r4, [r7, #4]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c9c:	f107 030f 	add.w	r3, r7, #15
 8001ca0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ca2:	233f      	movs	r3, #63	; 0x3f
 8001ca4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	f104 0310 	add.w	r3, r4, #16
 8001cac:	229c      	movs	r2, #156	; 0x9c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f002 ffab 	bl	8004c0a <memcpy>
 8001cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb8:	f000 f863 	bl	8001d82 <bno055_write_regs>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b0af      	sub	sp, #188	; 0xbc
 8001cd4:	af2a      	add	r7, sp, #168	; 0xa8
 8001cd6:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001cdc:	687c      	ldr	r4, [r7, #4]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ce8:	233f      	movs	r3, #63	; 0x3f
 8001cea:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cec:	4668      	mov	r0, sp
 8001cee:	f104 0310 	add.w	r3, r4, #16
 8001cf2:	229c      	movs	r2, #156	; 0x9c
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f002 ff88 	bl	8004c0a <memcpy>
 8001cfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cfe:	f000 f840 	bl	8001d82 <bno055_write_regs>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <bno055_on+0x3e>
    }
    return BNO_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}

08001d16 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8001d16:	b084      	sub	sp, #16
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	f107 0c10 	add.w	ip, r7, #16
 8001d22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8001d26:	6938      	ldr	r0, [r7, #16]
 8001d28:	7dbb      	ldrb	r3, [r7, #22]
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	f001 f820 	bl	8002d7c <HAL_I2C_Master_Transmit>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e014      	b.n	8001d74 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8001d4a:	6938      	ldr	r0, [r7, #16]
 8001d4c:	7dbb      	ldrb	r3, [r7, #22]
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d60:	f001 f90a 	bl	8002f78 <HAL_I2C_Master_Receive>
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d7e:	b004      	add	sp, #16
 8001d80:	4770      	bx	lr

08001d82 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8001d82:	b084      	sub	sp, #16
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	f107 0418 	add.w	r4, r7, #24
 8001d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8001d92:	69b8      	ldr	r0, [r7, #24]
 8001d94:	7fbb      	ldrb	r3, [r7, #30]
 8001d96:	b299      	uxth	r1, r3
 8001d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001da2:	b29c      	uxth	r4, r3
 8001da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f04f 35ff 	mov.w	r5, #4294967295
 8001dae:	9502      	str	r5, [sp, #8]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4623      	mov	r3, r4
 8001dba:	f001 fb0f 	bl	80033dc <HAL_I2C_Mem_Write>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001dd8:	b004      	add	sp, #16
 8001dda:	4770      	bx	lr

08001ddc <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b0af      	sub	sp, #188	; 0xbc
 8001de0:	af2a      	add	r7, sp, #168	; 0xa8
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7b5a      	ldrb	r2, [r3, #13]
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <bno055_set_page+0x1a>
        return BNO_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e024      	b.n	8001e40 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d901      	bls.n	8001e00 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e01f      	b.n	8001e40 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8001e00:	687c      	ldr	r4, [r7, #4]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e06:	1cfb      	adds	r3, r7, #3
 8001e08:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e0e:	4668      	mov	r0, sp
 8001e10:	f104 0310 	add.w	r3, r4, #16
 8001e14:	229c      	movs	r2, #156	; 0x9c
 8001e16:	4619      	mov	r1, r3
 8001e18:	f002 fef7 	bl	8004c0a <memcpy>
 8001e1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e20:	f7ff ffaf 	bl	8001d82 <bno055_write_regs>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <bno055_set_page+0x56>
        return err;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	e006      	b.n	8001e40 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f000 fbb5 	bl	80025a8 <HAL_Delay>
    return BNO_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}

08001e48 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d81f      	bhi.n	8001e98 <bno055_err_str+0x50>
 8001e58:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <bno055_err_str+0x18>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001e7d 	.word	0x08001e7d
 8001e64:	08001e81 	.word	0x08001e81
 8001e68:	08001e85 	.word	0x08001e85
 8001e6c:	08001e91 	.word	0x08001e91
 8001e70:	08001e89 	.word	0x08001e89
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001e95 	.word	0x08001e95
        case BNO_OK:
            return "[BNO] Ok!";
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <bno055_err_str+0x60>)
 8001e7e:	e00c      	b.n	8001e9a <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <bno055_err_str+0x64>)
 8001e82:	e00a      	b.n	8001e9a <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <bno055_err_str+0x68>)
 8001e86:	e008      	b.n	8001e9a <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <bno055_err_str+0x6c>)
 8001e8a:	e006      	b.n	8001e9a <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <bno055_err_str+0x70>)
 8001e8e:	e004      	b.n	8001e9a <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <bno055_err_str+0x74>)
 8001e92:	e002      	b.n	8001e9a <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <bno055_err_str+0x78>)
 8001e96:	e000      	b.n	8001e9a <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <bno055_err_str+0x60>)
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	08005944 	.word	0x08005944
 8001eac:	08005950 	.word	0x08005950
 8001eb0:	08005964 	.word	0x08005964
 8001eb4:	08005980 	.word	0x08005980
 8001eb8:	080059a4 	.word	0x080059a4
 8001ebc:	080059bc 	.word	0x080059bc
 8001ec0:	080059c8 	.word	0x080059c8

08001ec4 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

// static void MX_I2C2_Init(void);

int main(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0c4      	sub	sp, #272	; 0x110
 8001ec8:	af02      	add	r7, sp, #8
    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001eca:	f000 fafb 	bl	80024c4 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8001ece:	f000 f9ad 	bl	800222c <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001ed2:	f000 f92f 	bl	8002134 <MX_GPIO_Init>
//    uart_init();
    MX_I2C1_Init();
 8001ed6:	f000 f8eb 	bl	80020b0 <MX_I2C1_Init>
    // MX_I2C2_Init();

    bno = (bno055_t){
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <main+0x1cc>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	23ac      	movs	r3, #172	; 0xac
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f002 fe1c 	bl	8004b20 <memset>
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <main+0x1cc>)
 8001eea:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <main+0x1d0>)
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	4b68      	ldr	r3, [pc, #416]	; (8002090 <main+0x1cc>)
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	711a      	strb	r2, [r3, #4]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <main+0x1cc>)
 8001ef6:	2229      	movs	r2, #41	; 0x29
 8001ef8:	719a      	strb	r2, [r3, #6]
        .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU, ._temp_unit = 0,
        // .ptr = &bno,
    };
    HAL_Delay(1000);
 8001efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efe:	f000 fb53 	bl	80025a8 <HAL_Delay>

    if ((err = bno055_init(&bno)) == BNO_OK) {
 8001f02:	4863      	ldr	r0, [pc, #396]	; (8002090 <main+0x1cc>)
 8001f04:	f7fe fb32 	bl	800056c <bno055_init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <main+0x1d4>)
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <main+0x1d4>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <main+0x62>
        printf("[+] BNO055 init success\r\n");
 8001f18:	4860      	ldr	r0, [pc, #384]	; (800209c <main+0x1d8>)
 8001f1a:	f002 fd21 	bl	8004960 <puts>

        HAL_Delay(100);
 8001f1e:	2064      	movs	r0, #100	; 0x64
 8001f20:	f000 fb42 	bl	80025a8 <HAL_Delay>
 8001f24:	e00d      	b.n	8001f42 <main+0x7e>
    } else {
        printf("[!] BNO055 init failed\r\n");
 8001f26:	485e      	ldr	r0, [pc, #376]	; (80020a0 <main+0x1dc>)
 8001f28:	f002 fd1a 	bl	8004960 <puts>
        printf("%s\n", bno055_err_str(err));
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <main+0x1d4>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff89 	bl	8001e48 <bno055_err_str>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fd11 	bl	8004960 <puts>
        Error_Handler();
 8001f3e:	f000 f9e5 	bl	800230c <Error_Handler>
    }
    HAL_Delay(100);
 8001f42:	2064      	movs	r0, #100	; 0x64
 8001f44:	f000 fb30 	bl	80025a8 <HAL_Delay>
    err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	484f      	ldr	r0, [pc, #316]	; (8002090 <main+0x1cc>)
 8001f54:	f7ff fdd4 	bl	8001b00 <bno055_set_unit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <main+0x1d4>)
 8001f5e:	701a      	strb	r2, [r3, #0]
                          BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
    if (err != BNO_OK) {
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <main+0x1d4>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <main+0xb2>
        printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <main+0x1d4>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	484d      	ldr	r0, [pc, #308]	; (80020a4 <main+0x1e0>)
 8001f70:	f002 fc90 	bl	8004894 <iprintf>
 8001f74:	e002      	b.n	8001f7c <main+0xb8>
    } else {
        printf("[BNO] Unit selection success\r\n");
 8001f76:	484c      	ldr	r0, [pc, #304]	; (80020a8 <main+0x1e4>)
 8001f78:	f002 fcf2 	bl	8004960 <puts>
    }

    HAL_Delay(1000);
 8001f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f80:	f000 fb12 	bl	80025a8 <HAL_Delay>
    s8 temperature = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    // f32 acc_x = 0.0f, acc_y = 0.0f, acc_z = 0.0f;
    bno055_vec3_t acc = {0, 0, 0};
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	653b      	str	r3, [r7, #80]	; 0x50
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	657b      	str	r3, [r7, #84]	; 0x54
    bno055_vec3_t lia = {0, 0, 0};
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
    bno055_vec3_t gyr = {0, 0, 0};
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    bno055_vec3_t mag = {0, 0, 0};
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
    bno055_vec3_t grv = {0, 0, 0};
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    bno055_euler_t eul = {0, 0, 0};
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
    bno055_vec4_t qua = {0, 0, 0};
 8001ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ffe:	461a      	mov	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	6053      	str	r3, [r2, #4]
 8002006:	6093      	str	r3, [r2, #8]
 8002008:	60d3      	str	r3, [r2, #12]
    while (1) {
        // bno055_temperature(&bno, &temperature);
        bno.temperature(&bno, &temperature);
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <main+0x1cc>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f107 025b 	add.w	r2, r7, #91	; 0x5b
 8002012:	4611      	mov	r1, r2
 8002014:	481e      	ldr	r0, [pc, #120]	; (8002090 <main+0x1cc>)
 8002016:	4798      	blx	r3
        bno.acc(&bno, &acc);
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <main+0x1cc>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002020:	4611      	mov	r1, r2
 8002022:	481b      	ldr	r0, [pc, #108]	; (8002090 <main+0x1cc>)
 8002024:	4798      	blx	r3
        bno.linear_acc(&bno, &lia);
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <main+0x1cc>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800202e:	4611      	mov	r1, r2
 8002030:	4817      	ldr	r0, [pc, #92]	; (8002090 <main+0x1cc>)
 8002032:	4798      	blx	r3
        bno.gyro(&bno, &gyr);
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <main+0x1cc>)
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800203c:	4611      	mov	r1, r2
 800203e:	4814      	ldr	r0, [pc, #80]	; (8002090 <main+0x1cc>)
 8002040:	4798      	blx	r3
        bno.mag(&bno, &mag);
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <main+0x1cc>)
 8002044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002046:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800204a:	4611      	mov	r1, r2
 800204c:	4810      	ldr	r0, [pc, #64]	; (8002090 <main+0x1cc>)
 800204e:	4798      	blx	r3
        bno.gravity(&bno, &grv);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <main+0x1cc>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f107 021c 	add.w	r2, r7, #28
 8002058:	4611      	mov	r1, r2
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <main+0x1cc>)
 800205c:	4798      	blx	r3
        bno.euler(&bno, &eul);
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <main+0x1cc>)
 8002060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002064:	f107 0210 	add.w	r2, r7, #16
 8002068:	4611      	mov	r1, r2
 800206a:	4809      	ldr	r0, [pc, #36]	; (8002090 <main+0x1cc>)
 800206c:	4798      	blx	r3
        bno.quaternion(&bno, &qua);
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <main+0x1cc>)
 8002070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002074:	463a      	mov	r2, r7
 8002076:	4611      	mov	r1, r2
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <main+0x1cc>)
 800207a:	4798      	blx	r3
        printf("[+] Temperature: %2d°C\r\n", temperature);
 800207c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8002080:	4619      	mov	r1, r3
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <main+0x1e8>)
 8002084:	f002 fc06 	bl	8004894 <iprintf>
//        printf("[+] Roll: %+2.2f | Pitch: %+2.2f | Yaw: %+2.2f\r\n", eul.roll,
//               eul.pitch, eul.yaw);
//        printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
//               qua.w, qua.x, qua.y, qua.z);
//        HAL_GPIO_TogglePin(STATUS_LED_PORT, STATUS_LED);
        HAL_Delay(100);
 8002088:	2064      	movs	r0, #100	; 0x64
 800208a:	f000 fa8d 	bl	80025a8 <HAL_Delay>
        bno.temperature(&bno, &temperature);
 800208e:	e7bc      	b.n	800200a <main+0x146>
 8002090:	200000dc 	.word	0x200000dc
 8002094:	20000088 	.word	0x20000088
 8002098:	20000188 	.word	0x20000188
 800209c:	080059e0 	.word	0x080059e0
 80020a0:	080059fc 	.word	0x080059fc
 80020a4:	08005a14 	.word	0x08005a14
 80020a8:	08005a3c 	.word	0x08005a3c
 80020ac:	08005a5c 	.word	0x08005a5c

080020b0 <MX_I2C1_Init>:
    }
}

static void MX_I2C1_Init(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_I2C1_Init+0x74>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a19      	ldr	r2, [pc, #100]	; (8002124 <MX_I2C1_Init+0x74>)
 80020c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_I2C1_Init+0x74>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
    hi2c1.Instance = I2C1;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_I2C1_Init+0x78>)
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <MX_I2C1_Init+0x7c>)
 80020d6:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_I2C1_Init+0x78>)
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <MX_I2C1_Init+0x80>)
 80020dc:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_I2C1_Init+0x78>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_I2C1_Init+0x78>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_I2C1_Init+0x78>)
 80020ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020f0:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_I2C1_Init+0x78>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_I2C1_Init+0x78>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_I2C1_Init+0x78>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_I2C1_Init+0x78>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <MX_I2C1_Init+0x78>)
 800210c:	f000 fcf2 	bl	8002af4 <HAL_I2C_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_I2C1_Init+0x6a>
        Error_Handler();
 8002116:	f000 f8f9 	bl	800230c <Error_Handler>
    }
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	20000088 	.word	0x20000088
 800212c:	40005400 	.word	0x40005400
 8002130:	000186a0 	.word	0x000186a0

08002134 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <MX_GPIO_Init+0xec>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a37      	ldr	r2, [pc, #220]	; (8002220 <MX_GPIO_Init+0xec>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <MX_GPIO_Init+0xec>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <MX_GPIO_Init+0xec>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a30      	ldr	r2, [pc, #192]	; (8002220 <MX_GPIO_Init+0xec>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <MX_GPIO_Init+0xec>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <MX_GPIO_Init+0xec>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a29      	ldr	r2, [pc, #164]	; (8002220 <MX_GPIO_Init+0xec>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <MX_GPIO_Init+0xec>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <MX_GPIO_Init+0xec>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <MX_GPIO_Init+0xec>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <MX_GPIO_Init+0xec>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef gpio = {0};
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
    gpio.Pin = ERROR_LED;
 80021c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c6:	617b      	str	r3, [r7, #20]
    gpio.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ERROR_LED_PORT, &gpio);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4814      	ldr	r0, [pc, #80]	; (8002224 <MX_GPIO_Init+0xf0>)
 80021d4:	f000 faf2 	bl	80027bc <HAL_GPIO_Init>

    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
    gpio.Pin = STATUS_LED;
 80021e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e4:	617b      	str	r3, [r7, #20]
    gpio.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_PORT, &gpio);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_GPIO_Init+0xf4>)
 80021f2:	f000 fae3 	bl	80027bc <HAL_GPIO_Init>

    gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021f6:	2301      	movs	r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
    gpio.Mode = GPIO_MODE_AF_OD;
 80021fa:	2312      	movs	r3, #18
 80021fc:	61bb      	str	r3, [r7, #24]
    gpio.Alternate = GPIO_AF4_I2C1;
 80021fe:	2304      	movs	r3, #4
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    gpio.Pin = I2C1_SCL | I2C1_SDA;
 8002202:	23c0      	movs	r3, #192	; 0xc0
 8002204:	617b      	str	r3, [r7, #20]
    gpio.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C1_PORT, &gpio);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <MX_GPIO_Init+0xf0>)
 8002212:	f000 fad3 	bl	80027bc <HAL_GPIO_Init>
    // gpio.Mode = GPIO_MODE_AF_OD;
    // gpio.Alternate = GPIO_AF9_I2C2;
    // gpio.Pin =  I2C2_SDA;
    // gpio.Pull = GPIO_NOPULL;
    // HAL_GPIO_Init(I2C2_PORT, &gpio);
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40020400 	.word	0x40020400
 8002228:	40020000 	.word	0x40020000

0800222c <SystemClock_Config>:

void SystemClock_Config(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b094      	sub	sp, #80	; 0x50
 8002230:	af00      	add	r7, sp, #0
    /* SysTick_IRQn interrupt configuration */
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	2230      	movs	r2, #48	; 0x30
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fc70 	bl	8004b20 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <SystemClock_Config+0xd8>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <SystemClock_Config+0xd8>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <SystemClock_Config+0xd8>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800226c:	2300      	movs	r3, #0
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <SystemClock_Config+0xdc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <SystemClock_Config+0xdc>)
 8002276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <SystemClock_Config+0xdc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002288:	2302      	movs	r3, #2
 800228a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800228c:	2301      	movs	r3, #1
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002290:	2310      	movs	r3, #16
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002294:	2302      	movs	r3, #2
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800229c:	2308      	movs	r3, #8
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 192;
 80022a0:	23c0      	movs	r3, #192	; 0xc0
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022a4:	2304      	movs	r3, #4
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 8;
 80022a8:	2308      	movs	r3, #8
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80022ac:	f107 0320 	add.w	r3, r7, #32
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 fda9 	bl	8003e08 <HAL_RCC_OscConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SystemClock_Config+0x94>
        Error_Handler();
 80022bc:	f000 f826 	bl	800230c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80022c0:	230f      	movs	r3, #15
 80022c2:	60fb      	str	r3, [r7, #12]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c4:	2302      	movs	r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022d0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d6:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	2103      	movs	r1, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 f80a 	bl	80042f8 <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0xc2>
        Error_Handler();
 80022ea:	f000 f80f 	bl	800230c <Error_Handler>
    }
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	f04f 30ff 	mov.w	r0, #4294967295
 80022f6:	f000 fa38 	bl	800276a <HAL_NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3750      	adds	r7, #80	; 0x50
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000

0800230c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    //__disable_irq();
    while (1) {
        HAL_Delay(200);
 8002310:	20c8      	movs	r0, #200	; 0xc8
 8002312:	f000 f949 	bl	80025a8 <HAL_Delay>
 8002316:	e7fb      	b.n	8002310 <Error_Handler+0x4>

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_MspInit+0x4c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_MspInit+0x4c>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_MspInit+0x4c>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_MspInit+0x4c>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_MspInit+0x4c>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_MspInit+0x4c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002356:	2007      	movs	r0, #7
 8002358:	f000 f9fc 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_I2C_MspInit+0x84>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12b      	bne.n	80023e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a6:	23c0      	movs	r3, #192	; 0xc0
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b6:	2304      	movs	r3, #4
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <HAL_I2C_MspInit+0x8c>)
 80023c2:	f000 f9fb 	bl	80027bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 80023d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40005400 	.word	0x40005400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020400 	.word	0x40020400

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002444:	f000 f890 	bl	8002568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002474:	f7ff ffea 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	; (80024b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f002 fb8d 	bl	8004bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7ff fd0f 	bl	8001ec4 <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80024b4:	08005ad4 	.word	0x08005ad4
  ldr r2, =_sbss
 80024b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80024bc:	20000380 	.word	0x20000380

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <HAL_Init+0x40>)
 80024ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_Init+0x40>)
 80024da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_Init+0x40>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f931 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 f808 	bl	8002508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f7ff ff0e 	bl	8002318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x54>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x58>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f93b 	bl	80027a2 <HAL_SYSTICK_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e00e      	b.n	8002554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b0f      	cmp	r3, #15
 800253a:	d80a      	bhi.n	8002552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253c:	2200      	movs	r2, #0
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f000 f911 	bl	800276a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <HAL_InitTick+0x5c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000000 	.word	0x20000000
 8002560:	20000008 	.word	0x20000008
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x20>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_IncTick+0x24>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4413      	add	r3, r2
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_IncTick+0x24>)
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000008 	.word	0x20000008
 800258c:	2000018c 	.word	0x2000018c

08002590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return uwTick;
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_GetTick+0x14>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	2000018c 	.word	0x2000018c

080025a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff ffee 	bl	8002590 <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d005      	beq.n	80025ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_Delay+0x44>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ce:	bf00      	nop
 80025d0:	f7ff ffde 	bl	8002590 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d8f7      	bhi.n	80025d0 <HAL_Delay+0x28>
  {
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f7ff ff8e 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff47 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff5c 	bl	8002638 <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff8e 	bl	80026a8 <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5d 	bl	8002654 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffb0 	bl	8002710 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e16b      	b.n	8002ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f040 815a 	bne.w	8002aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d005      	beq.n	800280e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	2b02      	cmp	r3, #2
 800280c:	d130      	bne.n	8002870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 0201 	and.w	r2, r3, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b03      	cmp	r3, #3
 800287a:	d017      	beq.n	80028ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d123      	bne.n	8002900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	220f      	movs	r2, #15
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0203 	and.w	r2, r3, #3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80b4 	beq.w	8002aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <HAL_GPIO_Init+0x30c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_GPIO_Init+0x30c>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_GPIO_Init+0x30c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295e:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <HAL_GPIO_Init+0x310>)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_GPIO_Init+0x314>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02b      	beq.n	80029e2 <HAL_GPIO_Init+0x226>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <HAL_GPIO_Init+0x318>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x222>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a50      	ldr	r2, [pc, #320]	; (8002ad8 <HAL_GPIO_Init+0x31c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x21e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4f      	ldr	r2, [pc, #316]	; (8002adc <HAL_GPIO_Init+0x320>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x21a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_GPIO_Init+0x324>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x216>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_GPIO_Init+0x328>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x212>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4c      	ldr	r2, [pc, #304]	; (8002ae8 <HAL_GPIO_Init+0x32c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x20e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4b      	ldr	r2, [pc, #300]	; (8002aec <HAL_GPIO_Init+0x330>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x20a>
 80029c2:	2307      	movs	r3, #7
 80029c4:	e00e      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	; (8002acc <HAL_GPIO_Init+0x310>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_GPIO_Init+0x334>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae90 	bls.w	80027d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40021c00 	.word	0x40021c00
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e12b      	b.n	8002d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fc24 	bl	8002368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b58:	f001 fdc6 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8002b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a81      	ldr	r2, [pc, #516]	; (8002d68 <HAL_I2C_Init+0x274>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d807      	bhi.n	8002b78 <HAL_I2C_Init+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a80      	ldr	r2, [pc, #512]	; (8002d6c <HAL_I2C_Init+0x278>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e006      	b.n	8002b86 <HAL_I2C_Init+0x92>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a7d      	ldr	r2, [pc, #500]	; (8002d70 <HAL_I2C_Init+0x27c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0e7      	b.n	8002d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a78      	ldr	r2, [pc, #480]	; (8002d74 <HAL_I2C_Init+0x280>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a6a      	ldr	r2, [pc, #424]	; (8002d68 <HAL_I2C_Init+0x274>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_I2C_Init+0xd4>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e009      	b.n	8002bdc <HAL_I2C_Init+0xe8>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a69      	ldr	r2, [pc, #420]	; (8002d78 <HAL_I2C_Init+0x284>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	3301      	adds	r3, #1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	495c      	ldr	r1, [pc, #368]	; (8002d68 <HAL_I2C_Init+0x274>)
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d819      	bhi.n	8002c30 <HAL_I2C_Init+0x13c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e59      	subs	r1, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0a:	1c59      	adds	r1, r3, #1
 8002c0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c10:	400b      	ands	r3, r1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_I2C_Init+0x138>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e59      	subs	r1, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2a:	e051      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e04f      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <HAL_I2C_Init+0x168>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e012      	b.n	8002c82 <HAL_I2C_Init+0x18e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1e58      	subs	r0, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	0099      	lsls	r1, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Init+0x196>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e022      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10e      	bne.n	8002cb0 <HAL_I2C_Init+0x1bc>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1e58      	subs	r0, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	440b      	add	r3, r1
 8002ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	e00f      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	0099      	lsls	r1, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6809      	ldr	r1, [r1, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6911      	ldr	r1, [r2, #16]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68d2      	ldr	r2, [r2, #12]
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	000186a0 	.word	0x000186a0
 8002d6c:	001e847f 	.word	0x001e847f
 8002d70:	003d08ff 	.word	0x003d08ff
 8002d74:	431bde83 	.word	0x431bde83
 8002d78:	10624dd3 	.word	0x10624dd3

08002d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	460b      	mov	r3, r1
 8002d8a:	817b      	strh	r3, [r7, #10]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fbfe 	bl	8002590 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	f040 80e0 	bne.w	8002f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2319      	movs	r3, #25
 8002daa:	2201      	movs	r2, #1
 8002dac:	4970      	ldr	r1, [pc, #448]	; (8002f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fdf4 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0d3      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2C_Master_Transmit+0x50>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0cc      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d007      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2221      	movs	r2, #33	; 0x21
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	893a      	ldrh	r2, [r7, #8]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a50      	ldr	r2, [pc, #320]	; (8002f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fbc8 	bl	80035d0 <I2C_MasterRequestWrite>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e08d      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e60:	e066      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 feb2 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d107      	bne.n	8002e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06b      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_I2C_Master_Transmit+0x188>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d017      	beq.n	8002f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	6a39      	ldr	r1, [r7, #32]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fea9 	bl	8003c60 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d107      	bne.n	8002f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01a      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d194      	bne.n	8002e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	00100002 	.word	0x00100002
 8002f74:	ffff0000 	.word	0xffff0000

08002f78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08c      	sub	sp, #48	; 0x30
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff fb00 	bl	8002590 <HAL_GetTick>
 8002f90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 8217 	bne.w	80033ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	497c      	ldr	r1, [pc, #496]	; (800319c <HAL_I2C_Master_Receive+0x224>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fcf6 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e20a      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2C_Master_Receive+0x50>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e203      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2222      	movs	r2, #34	; 0x22
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2210      	movs	r2, #16
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_I2C_Master_Receive+0x228>)
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fb4c 	bl	80036d4 <I2C_MasterRequestRead>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1c4      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	623b      	str	r3, [r7, #32]
 8003062:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e198      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	2b01      	cmp	r3, #1
 800307c:	d11b      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e178      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d11b      	bne.n	80030f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	e158      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800311c:	e144      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	2b03      	cmp	r3, #3
 8003124:	f200 80f1 	bhi.w	800330a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	2b01      	cmp	r3, #1
 800312e:	d123      	bne.n	8003178 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fddb 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e145      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003176:	e117      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	2b02      	cmp	r3, #2
 800317e:	d14e      	bne.n	800321e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	2200      	movs	r2, #0
 8003188:	4906      	ldr	r1, [pc, #24]	; (80031a4 <HAL_I2C_Master_Receive+0x22c>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fc06 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e11a      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
 800319a:	bf00      	nop
 800319c:	00100002 	.word	0x00100002
 80031a0:	ffff0000 	.word	0xffff0000
 80031a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321c:	e0c4      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2200      	movs	r2, #0
 8003226:	496c      	ldr	r1, [pc, #432]	; (80033d8 <HAL_I2C_Master_Receive+0x460>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fbb7 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cb      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	2200      	movs	r2, #0
 8003282:	4955      	ldr	r1, [pc, #340]	; (80033d8 <HAL_I2C_Master_Receive+0x460>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fb89 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e09d      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003308:	e04e      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fcee 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e058      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d124      	bne.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	2b03      	cmp	r3, #3
 8003364:	d107      	bne.n	8003376 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003374:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f aeb6 	bne.w	800311e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	00010004 	.word	0x00010004

080033dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f6:	f7ff f8cb 	bl	8002590 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	f040 80d9 	bne.w	80035bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2319      	movs	r3, #25
 8003410:	2201      	movs	r2, #1
 8003412:	496d      	ldr	r1, [pc, #436]	; (80035c8 <HAL_I2C_Mem_Write+0x1ec>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fac1 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
 8003422:	e0cc      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Mem_Write+0x56>
 800342e:	2302      	movs	r3, #2
 8003430:	e0c5      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d007      	beq.n	8003458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_I2C_Mem_Write+0x1f0>)
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349a:	88f8      	ldrh	r0, [r7, #6]
 800349c:	893a      	ldrh	r2, [r7, #8]
 800349e:	8979      	ldrh	r1, [r7, #10]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4603      	mov	r3, r0
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f9e0 	bl	8003870 <I2C_RequestMemoryWrite>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d052      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e081      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fb86 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_I2C_Mem_Write+0x180>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1aa      	bne.n	80034ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb79 	bl	8003c60 <I2C_WaitOnBTFFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e016      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000

080035d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	460b      	mov	r3, r1
 80035de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d006      	beq.n	80035fa <I2C_MasterRequestWrite+0x2a>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d003      	beq.n	80035fa <I2C_MasterRequestWrite+0x2a>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035f8:	d108      	bne.n	800360c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e00b      	b.n	8003624 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	2b12      	cmp	r3, #18
 8003612:	d107      	bne.n	8003624 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003622:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f9b3 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d103      	bne.n	8003654 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e035      	b.n	80036c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003660:	d108      	bne.n	8003674 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003670:	611a      	str	r2, [r3, #16]
 8003672:	e01b      	b.n	80036ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003674:	897b      	ldrh	r3, [r7, #10]
 8003676:	11db      	asrs	r3, r3, #7
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0306 	and.w	r3, r3, #6
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f063 030f 	orn	r3, r3, #15
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <I2C_MasterRequestWrite+0xfc>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f9fc 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e010      	b.n	80036c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4907      	ldr	r1, [pc, #28]	; (80036d0 <I2C_MasterRequestWrite+0x100>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9ec 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	00010008 	.word	0x00010008
 80036d0:	00010002 	.word	0x00010002

080036d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	460b      	mov	r3, r1
 80036e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d006      	beq.n	800370e <I2C_MasterRequestRead+0x3a>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d003      	beq.n	800370e <I2C_MasterRequestRead+0x3a>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800370c:	d108      	bne.n	8003720 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00b      	b.n	8003738 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	2b11      	cmp	r3, #17
 8003726:	d107      	bne.n	8003738 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003736:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f929 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375e:	d103      	bne.n	8003768 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e079      	b.n	8003860 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d108      	bne.n	8003788 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
 8003786:	e05f      	b.n	8003848 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003788:	897b      	ldrh	r3, [r7, #10]
 800378a:	11db      	asrs	r3, r3, #7
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 0306 	and.w	r3, r3, #6
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f063 030f 	orn	r3, r3, #15
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4930      	ldr	r1, [pc, #192]	; (8003868 <I2C_MasterRequestRead+0x194>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f972 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e054      	b.n	8003860 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4929      	ldr	r1, [pc, #164]	; (800386c <I2C_MasterRequestRead+0x198>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f962 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e044      	b.n	8003860 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f8c7 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d103      	bne.n	800382c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e017      	b.n	8003860 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003830:	897b      	ldrh	r3, [r7, #10]
 8003832:	11db      	asrs	r3, r3, #7
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0306 	and.w	r3, r3, #6
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f063 030e 	orn	r3, r3, #14
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <I2C_MasterRequestRead+0x198>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f91e 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010008 	.word	0x00010008
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003898:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f878 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d103      	bne.n	80038ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e05f      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	492d      	ldr	r1, [pc, #180]	; (8003998 <I2C_RequestMemoryWrite+0x128>)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f8d3 	bl	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04c      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f95e 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b04      	cmp	r3, #4
 8003920:	d107      	bne.n	8003932 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e02b      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d105      	bne.n	8003948 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800393c:	893b      	ldrh	r3, [r7, #8]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]
 8003946:	e021      	b.n	800398c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003948:	893b      	ldrh	r3, [r7, #8]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	b29b      	uxth	r3, r3
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f938 	bl	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e005      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003982:	893b      	ldrh	r3, [r7, #8]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	00010002 	.word	0x00010002

0800399c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ac:	e048      	b.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d044      	beq.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fe fdeb 	bl	8002590 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d139      	bne.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d10d      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	43da      	mvns	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	e00c      	b.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x70>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	43da      	mvns	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d116      	bne.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e023      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10d      	bne.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	e00c      	b.n	8003a80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d093      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9e:	e071      	b.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d123      	bne.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e067      	b.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d041      	beq.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b00:	f7fe fd46 	bl	8002590 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d302      	bcc.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d136      	bne.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10c      	bne.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e00b      	b.n	8003b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e021      	b.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d10c      	bne.n	8003ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	43da      	mvns	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e00b      	b.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f af6d 	bne.w	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bdc:	e034      	b.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f8e3 	bl	8003daa <I2C_IsAcknowledgeFailed>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e034      	b.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d028      	beq.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fe fccb 	bl	8002590 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11d      	bne.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d016      	beq.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d1c3      	bne.n	8003bde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c6c:	e034      	b.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f89b 	bl	8003daa <I2C_IsAcknowledgeFailed>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e034      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d028      	beq.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fc83 	bl	8002590 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11d      	bne.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d1c3      	bne.n	8003c6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cfc:	e049      	b.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d119      	bne.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0210 	mvn.w	r2, #16
 8003d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e030      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fe fc26 	bl	8002590 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11d      	bne.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d016      	beq.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e007      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d1ae      	bne.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d11b      	bne.n	8003dfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e267      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d075      	beq.n	8003f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d00c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b85      	ldr	r3, [pc, #532]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b82      	ldr	r3, [pc, #520]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x108>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d157      	bne.n	8003f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e242      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x74>
 8003e6e:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a75      	ldr	r2, [pc, #468]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e01d      	b.n	8003eb8 <HAL_RCC_OscConfig+0xb0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x98>
 8003e86:	4b70      	ldr	r3, [pc, #448]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6f      	ldr	r2, [pc, #444]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b6d      	ldr	r3, [pc, #436]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6c      	ldr	r2, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xb0>
 8003ea0:	4b69      	ldr	r3, [pc, #420]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a65      	ldr	r2, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fb66 	bl	8002590 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fb62 	bl	8002590 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e207      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b5b      	ldr	r3, [pc, #364]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xc0>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fb52 	bl	8002590 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fb4e 	bl	8002590 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e1f3      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xe8>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d11c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f36:	4b44      	ldr	r3, [pc, #272]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d116      	bne.n	8003f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x152>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e1c7      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4937      	ldr	r1, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6e:	e03a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x244>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fb07 	bl	8002590 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f86:	f7fe fb03 	bl	8002590 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1a8      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b28      	ldr	r3, [pc, #160]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4925      	ldr	r1, [pc, #148]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_OscConfig+0x244>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fae6 	bl	8002590 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fae2 	bl	8002590 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e187      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d036      	beq.n	8004060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCC_OscConfig+0x248>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fe fac6 	bl	8002590 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004008:	f7fe fac2 	bl	8002590 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e167      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_OscConfig+0x240>)
 800401c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x200>
 8004026:	e01b      	b.n	8004060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCC_OscConfig+0x248>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe faaf 	bl	8002590 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	e00e      	b.n	8004054 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004036:	f7fe faab 	bl	8002590 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d907      	bls.n	8004054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e150      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ea      	bne.n	8004036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8097 	beq.w	800419c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004072:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b7a      	ldr	r3, [pc, #488]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b77      	ldr	r3, [pc, #476]	; (800427c <HAL_RCC_OscConfig+0x474>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040aa:	4b74      	ldr	r3, [pc, #464]	; (800427c <HAL_RCC_OscConfig+0x474>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a73      	ldr	r2, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x474>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b6:	f7fe fa6b 	bl	8002590 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fe fa67 	bl	8002590 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e10c      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCC_OscConfig+0x474>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ea>
 80040e4:	4b64      	ldr	r3, [pc, #400]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a63      	ldr	r2, [pc, #396]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	e01c      	b.n	800412c <HAL_RCC_OscConfig+0x324>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x30c>
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	4a5e      	ldr	r2, [pc, #376]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	6713      	str	r3, [r2, #112]	; 0x70
 8004106:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	4a5b      	ldr	r2, [pc, #364]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6713      	str	r3, [r2, #112]	; 0x70
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0x324>
 8004114:	4b58      	ldr	r3, [pc, #352]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a57      	ldr	r2, [pc, #348]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
 8004120:	4b55      	ldr	r3, [pc, #340]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	4a54      	ldr	r2, [pc, #336]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004126:	f023 0304 	bic.w	r3, r3, #4
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fe fa2c 	bl	8002590 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe fa28 	bl	8002590 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0cb      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	4b49      	ldr	r3, [pc, #292]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ee      	beq.n	800413c <HAL_RCC_OscConfig+0x334>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004160:	f7fe fa16 	bl	8002590 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fe fa12 	bl	8002590 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	; 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0b5      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417e:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1ee      	bne.n	8004168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	4a38      	ldr	r2, [pc, #224]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a1 	beq.w	80042e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a6:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d05c      	beq.n	800426c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d141      	bne.n	800423e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCC_OscConfig+0x478>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fe f9e6 	bl	8002590 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe f9e2 	bl	8002590 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e087      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	019b      	lsls	r3, r3, #6
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	491b      	ldr	r1, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCC_OscConfig+0x478>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fe f9bb 	bl	8002590 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7fe f9b7 	bl	8002590 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e05c      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x416>
 800423c:	e054      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <HAL_RCC_OscConfig+0x478>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fe f9a4 	bl	8002590 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe f9a0 	bl	8002590 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e045      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RCC_OscConfig+0x470>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x444>
 800426a:	e03d      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e038      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
 8004278:	40023800 	.word	0x40023800
 800427c:	40007000 	.word	0x40007000
 8004280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004284:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCC_OscConfig+0x4ec>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d028      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d121      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d11a      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042bc:	4293      	cmp	r3, r2
 80042be:	d111      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	3b01      	subs	r3, #1
 80042ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800

080042f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0cc      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b68      	ldr	r3, [pc, #416]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d90c      	bls.n	8004334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b63      	ldr	r3, [pc, #396]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b8      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a58      	ldr	r2, [pc, #352]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a52      	ldr	r2, [pc, #328]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494d      	ldr	r1, [pc, #308]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d044      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e067      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4934      	ldr	r1, [pc, #208]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7fe f8d2 	bl	8002590 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fe f8ce 	bl	8002590 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e04f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20c      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e032      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4916      	ldr	r1, [pc, #88]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490e      	ldr	r1, [pc, #56]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f821 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	490a      	ldr	r1, [pc, #40]	; (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe f832 	bl	8002508 <HAL_InitTick>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023c00 	.word	0x40023c00
 80044b4:	40023800 	.word	0x40023800
 80044b8:	08005a78 	.word	0x08005a78
 80044bc:	20000000 	.word	0x20000000
 80044c0:	20000004 	.word	0x20000004

080044c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b094      	sub	sp, #80	; 0x50
 80044ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	647b      	str	r3, [r7, #68]	; 0x44
 80044d0:	2300      	movs	r3, #0
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044dc:	4b79      	ldr	r3, [pc, #484]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d00d      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x40>
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	f200 80e1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x34>
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x3a>
 80044f6:	e0db      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044fc:	e0db      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044fe:	4b73      	ldr	r3, [pc, #460]	; (80046cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004502:	e0d8      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004504:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800450e:	4b6d      	ldr	r3, [pc, #436]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451a:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	2200      	movs	r2, #0
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
 8004524:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	f04f 0000 	mov.w	r0, #0
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	0159      	lsls	r1, r3, #5
 8004544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004548:	0150      	lsls	r0, r2, #5
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4621      	mov	r1, r4
 8004550:	1a51      	subs	r1, r2, r1
 8004552:	6139      	str	r1, [r7, #16]
 8004554:	4629      	mov	r1, r5
 8004556:	eb63 0301 	sbc.w	r3, r3, r1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004568:	4659      	mov	r1, fp
 800456a:	018b      	lsls	r3, r1, #6
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004572:	4651      	mov	r1, sl
 8004574:	018a      	lsls	r2, r1, #6
 8004576:	4651      	mov	r1, sl
 8004578:	ebb2 0801 	subs.w	r8, r2, r1
 800457c:	4659      	mov	r1, fp
 800457e:	eb63 0901 	sbc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	462b      	mov	r3, r5
 80045a4:	eb49 0303 	adc.w	r3, r9, r3
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045b6:	4629      	mov	r1, r5
 80045b8:	024b      	lsls	r3, r1, #9
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c0:	4621      	mov	r1, r4
 80045c2:	024a      	lsls	r2, r1, #9
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d4:	f7fb fe4c 	bl	8000270 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	e058      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	4611      	mov	r1, r2
 80045ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f2:	623b      	str	r3, [r7, #32]
 80045f4:	2300      	movs	r3, #0
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
 80045f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	f04f 0000 	mov.w	r0, #0
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	0159      	lsls	r1, r3, #5
 800460a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800460e:	0150      	lsls	r0, r2, #5
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4641      	mov	r1, r8
 8004616:	ebb2 0a01 	subs.w	sl, r2, r1
 800461a:	4649      	mov	r1, r9
 800461c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800462c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004634:	ebb2 040a 	subs.w	r4, r2, sl
 8004638:	eb63 050b 	sbc.w	r5, r3, fp
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	464b      	mov	r3, r9
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	61fa      	str	r2, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	f7fb fdf2 	bl	8000270 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3750      	adds	r7, #80	; 0x50
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	08005a88 	.word	0x08005a88

08004710 <std>:
 8004710:	2300      	movs	r3, #0
 8004712:	b510      	push	{r4, lr}
 8004714:	4604      	mov	r4, r0
 8004716:	e9c0 3300 	strd	r3, r3, [r0]
 800471a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800471e:	6083      	str	r3, [r0, #8]
 8004720:	8181      	strh	r1, [r0, #12]
 8004722:	6643      	str	r3, [r0, #100]	; 0x64
 8004724:	81c2      	strh	r2, [r0, #14]
 8004726:	6183      	str	r3, [r0, #24]
 8004728:	4619      	mov	r1, r3
 800472a:	2208      	movs	r2, #8
 800472c:	305c      	adds	r0, #92	; 0x5c
 800472e:	f000 f9f7 	bl	8004b20 <memset>
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <std+0x58>)
 8004734:	6263      	str	r3, [r4, #36]	; 0x24
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <std+0x5c>)
 8004738:	62a3      	str	r3, [r4, #40]	; 0x28
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <std+0x60>)
 800473c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <std+0x64>)
 8004740:	6323      	str	r3, [r4, #48]	; 0x30
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <std+0x68>)
 8004744:	6224      	str	r4, [r4, #32]
 8004746:	429c      	cmp	r4, r3
 8004748:	d006      	beq.n	8004758 <std+0x48>
 800474a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800474e:	4294      	cmp	r4, r2
 8004750:	d002      	beq.n	8004758 <std+0x48>
 8004752:	33d0      	adds	r3, #208	; 0xd0
 8004754:	429c      	cmp	r4, r3
 8004756:	d105      	bne.n	8004764 <std+0x54>
 8004758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800475c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004760:	f000 ba50 	b.w	8004c04 <__retarget_lock_init_recursive>
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	08004971 	.word	0x08004971
 800476c:	08004993 	.word	0x08004993
 8004770:	080049cb 	.word	0x080049cb
 8004774:	080049ef 	.word	0x080049ef
 8004778:	20000190 	.word	0x20000190

0800477c <stdio_exit_handler>:
 800477c:	4a02      	ldr	r2, [pc, #8]	; (8004788 <stdio_exit_handler+0xc>)
 800477e:	4903      	ldr	r1, [pc, #12]	; (800478c <stdio_exit_handler+0x10>)
 8004780:	4803      	ldr	r0, [pc, #12]	; (8004790 <stdio_exit_handler+0x14>)
 8004782:	f000 b869 	b.w	8004858 <_fwalk_sglue>
 8004786:	bf00      	nop
 8004788:	2000000c 	.word	0x2000000c
 800478c:	080054cd 	.word	0x080054cd
 8004790:	20000018 	.word	0x20000018

08004794 <cleanup_stdio>:
 8004794:	6841      	ldr	r1, [r0, #4]
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <cleanup_stdio+0x34>)
 8004798:	4299      	cmp	r1, r3
 800479a:	b510      	push	{r4, lr}
 800479c:	4604      	mov	r4, r0
 800479e:	d001      	beq.n	80047a4 <cleanup_stdio+0x10>
 80047a0:	f000 fe94 	bl	80054cc <_fflush_r>
 80047a4:	68a1      	ldr	r1, [r4, #8]
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <cleanup_stdio+0x38>)
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d002      	beq.n	80047b2 <cleanup_stdio+0x1e>
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 fe8d 	bl	80054cc <_fflush_r>
 80047b2:	68e1      	ldr	r1, [r4, #12]
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <cleanup_stdio+0x3c>)
 80047b6:	4299      	cmp	r1, r3
 80047b8:	d004      	beq.n	80047c4 <cleanup_stdio+0x30>
 80047ba:	4620      	mov	r0, r4
 80047bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c0:	f000 be84 	b.w	80054cc <_fflush_r>
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop
 80047c8:	20000190 	.word	0x20000190
 80047cc:	200001f8 	.word	0x200001f8
 80047d0:	20000260 	.word	0x20000260

080047d4 <global_stdio_init.part.0>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <global_stdio_init.part.0+0x30>)
 80047d8:	4c0b      	ldr	r4, [pc, #44]	; (8004808 <global_stdio_init.part.0+0x34>)
 80047da:	4a0c      	ldr	r2, [pc, #48]	; (800480c <global_stdio_init.part.0+0x38>)
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	4620      	mov	r0, r4
 80047e0:	2200      	movs	r2, #0
 80047e2:	2104      	movs	r1, #4
 80047e4:	f7ff ff94 	bl	8004710 <std>
 80047e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047ec:	2201      	movs	r2, #1
 80047ee:	2109      	movs	r1, #9
 80047f0:	f7ff ff8e 	bl	8004710 <std>
 80047f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047f8:	2202      	movs	r2, #2
 80047fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fe:	2112      	movs	r1, #18
 8004800:	f7ff bf86 	b.w	8004710 <std>
 8004804:	200002c8 	.word	0x200002c8
 8004808:	20000190 	.word	0x20000190
 800480c:	0800477d 	.word	0x0800477d

08004810 <__sfp_lock_acquire>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__sfp_lock_acquire+0x8>)
 8004812:	f000 b9f8 	b.w	8004c06 <__retarget_lock_acquire_recursive>
 8004816:	bf00      	nop
 8004818:	200002d1 	.word	0x200002d1

0800481c <__sfp_lock_release>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__sfp_lock_release+0x8>)
 800481e:	f000 b9f3 	b.w	8004c08 <__retarget_lock_release_recursive>
 8004822:	bf00      	nop
 8004824:	200002d1 	.word	0x200002d1

08004828 <__sinit>:
 8004828:	b510      	push	{r4, lr}
 800482a:	4604      	mov	r4, r0
 800482c:	f7ff fff0 	bl	8004810 <__sfp_lock_acquire>
 8004830:	6a23      	ldr	r3, [r4, #32]
 8004832:	b11b      	cbz	r3, 800483c <__sinit+0x14>
 8004834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004838:	f7ff bff0 	b.w	800481c <__sfp_lock_release>
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <__sinit+0x28>)
 800483e:	6223      	str	r3, [r4, #32]
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <__sinit+0x2c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f5      	bne.n	8004834 <__sinit+0xc>
 8004848:	f7ff ffc4 	bl	80047d4 <global_stdio_init.part.0>
 800484c:	e7f2      	b.n	8004834 <__sinit+0xc>
 800484e:	bf00      	nop
 8004850:	08004795 	.word	0x08004795
 8004854:	200002c8 	.word	0x200002c8

08004858 <_fwalk_sglue>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	4607      	mov	r7, r0
 800485e:	4688      	mov	r8, r1
 8004860:	4614      	mov	r4, r2
 8004862:	2600      	movs	r6, #0
 8004864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004868:	f1b9 0901 	subs.w	r9, r9, #1
 800486c:	d505      	bpl.n	800487a <_fwalk_sglue+0x22>
 800486e:	6824      	ldr	r4, [r4, #0]
 8004870:	2c00      	cmp	r4, #0
 8004872:	d1f7      	bne.n	8004864 <_fwalk_sglue+0xc>
 8004874:	4630      	mov	r0, r6
 8004876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487a:	89ab      	ldrh	r3, [r5, #12]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d907      	bls.n	8004890 <_fwalk_sglue+0x38>
 8004880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004884:	3301      	adds	r3, #1
 8004886:	d003      	beq.n	8004890 <_fwalk_sglue+0x38>
 8004888:	4629      	mov	r1, r5
 800488a:	4638      	mov	r0, r7
 800488c:	47c0      	blx	r8
 800488e:	4306      	orrs	r6, r0
 8004890:	3568      	adds	r5, #104	; 0x68
 8004892:	e7e9      	b.n	8004868 <_fwalk_sglue+0x10>

08004894 <iprintf>:
 8004894:	b40f      	push	{r0, r1, r2, r3}
 8004896:	b507      	push	{r0, r1, r2, lr}
 8004898:	4906      	ldr	r1, [pc, #24]	; (80048b4 <iprintf+0x20>)
 800489a:	ab04      	add	r3, sp, #16
 800489c:	6808      	ldr	r0, [r1, #0]
 800489e:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a2:	6881      	ldr	r1, [r0, #8]
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	f000 fae1 	bl	8004e6c <_vfiprintf_r>
 80048aa:	b003      	add	sp, #12
 80048ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b0:	b004      	add	sp, #16
 80048b2:	4770      	bx	lr
 80048b4:	20000064 	.word	0x20000064

080048b8 <_puts_r>:
 80048b8:	6a03      	ldr	r3, [r0, #32]
 80048ba:	b570      	push	{r4, r5, r6, lr}
 80048bc:	6884      	ldr	r4, [r0, #8]
 80048be:	4605      	mov	r5, r0
 80048c0:	460e      	mov	r6, r1
 80048c2:	b90b      	cbnz	r3, 80048c8 <_puts_r+0x10>
 80048c4:	f7ff ffb0 	bl	8004828 <__sinit>
 80048c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048ca:	07db      	lsls	r3, r3, #31
 80048cc:	d405      	bmi.n	80048da <_puts_r+0x22>
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	0598      	lsls	r0, r3, #22
 80048d2:	d402      	bmi.n	80048da <_puts_r+0x22>
 80048d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048d6:	f000 f996 	bl	8004c06 <__retarget_lock_acquire_recursive>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	0719      	lsls	r1, r3, #28
 80048de:	d513      	bpl.n	8004908 <_puts_r+0x50>
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	b18b      	cbz	r3, 8004908 <_puts_r+0x50>
 80048e4:	3e01      	subs	r6, #1
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	b9e9      	cbnz	r1, 800492e <_puts_r+0x76>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da2e      	bge.n	8004954 <_puts_r+0x9c>
 80048f6:	4622      	mov	r2, r4
 80048f8:	210a      	movs	r1, #10
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f87b 	bl	80049f6 <__swbuf_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d007      	beq.n	8004914 <_puts_r+0x5c>
 8004904:	250a      	movs	r5, #10
 8004906:	e007      	b.n	8004918 <_puts_r+0x60>
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f8b0 	bl	8004a70 <__swsetup_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	d0e7      	beq.n	80048e4 <_puts_r+0x2c>
 8004914:	f04f 35ff 	mov.w	r5, #4294967295
 8004918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800491a:	07da      	lsls	r2, r3, #31
 800491c:	d405      	bmi.n	800492a <_puts_r+0x72>
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	059b      	lsls	r3, r3, #22
 8004922:	d402      	bmi.n	800492a <_puts_r+0x72>
 8004924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004926:	f000 f96f 	bl	8004c08 <__retarget_lock_release_recursive>
 800492a:	4628      	mov	r0, r5
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	2b00      	cmp	r3, #0
 8004930:	da04      	bge.n	800493c <_puts_r+0x84>
 8004932:	69a2      	ldr	r2, [r4, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	dc06      	bgt.n	8004946 <_puts_r+0x8e>
 8004938:	290a      	cmp	r1, #10
 800493a:	d004      	beq.n	8004946 <_puts_r+0x8e>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	6022      	str	r2, [r4, #0]
 8004942:	7019      	strb	r1, [r3, #0]
 8004944:	e7cf      	b.n	80048e6 <_puts_r+0x2e>
 8004946:	4622      	mov	r2, r4
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f854 	bl	80049f6 <__swbuf_r>
 800494e:	3001      	adds	r0, #1
 8004950:	d1c9      	bne.n	80048e6 <_puts_r+0x2e>
 8004952:	e7df      	b.n	8004914 <_puts_r+0x5c>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	250a      	movs	r5, #10
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	701d      	strb	r5, [r3, #0]
 800495e:	e7db      	b.n	8004918 <_puts_r+0x60>

08004960 <puts>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <puts+0xc>)
 8004962:	4601      	mov	r1, r0
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f7ff bfa7 	b.w	80048b8 <_puts_r>
 800496a:	bf00      	nop
 800496c:	20000064 	.word	0x20000064

08004970 <__sread>:
 8004970:	b510      	push	{r4, lr}
 8004972:	460c      	mov	r4, r1
 8004974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004978:	f000 f8fc 	bl	8004b74 <_read_r>
 800497c:	2800      	cmp	r0, #0
 800497e:	bfab      	itete	ge
 8004980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004982:	89a3      	ldrhlt	r3, [r4, #12]
 8004984:	181b      	addge	r3, r3, r0
 8004986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800498a:	bfac      	ite	ge
 800498c:	6563      	strge	r3, [r4, #84]	; 0x54
 800498e:	81a3      	strhlt	r3, [r4, #12]
 8004990:	bd10      	pop	{r4, pc}

08004992 <__swrite>:
 8004992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	461f      	mov	r7, r3
 8004998:	898b      	ldrh	r3, [r1, #12]
 800499a:	05db      	lsls	r3, r3, #23
 800499c:	4605      	mov	r5, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	4616      	mov	r6, r2
 80049a2:	d505      	bpl.n	80049b0 <__swrite+0x1e>
 80049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a8:	2302      	movs	r3, #2
 80049aa:	2200      	movs	r2, #0
 80049ac:	f000 f8d0 	bl	8004b50 <_lseek_r>
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	4632      	mov	r2, r6
 80049be:	463b      	mov	r3, r7
 80049c0:	4628      	mov	r0, r5
 80049c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049c6:	f000 b8e7 	b.w	8004b98 <_write_r>

080049ca <__sseek>:
 80049ca:	b510      	push	{r4, lr}
 80049cc:	460c      	mov	r4, r1
 80049ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d2:	f000 f8bd 	bl	8004b50 <_lseek_r>
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	bf15      	itete	ne
 80049dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80049de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049e6:	81a3      	strheq	r3, [r4, #12]
 80049e8:	bf18      	it	ne
 80049ea:	81a3      	strhne	r3, [r4, #12]
 80049ec:	bd10      	pop	{r4, pc}

080049ee <__sclose>:
 80049ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f2:	f000 b89d 	b.w	8004b30 <_close_r>

080049f6 <__swbuf_r>:
 80049f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f8:	460e      	mov	r6, r1
 80049fa:	4614      	mov	r4, r2
 80049fc:	4605      	mov	r5, r0
 80049fe:	b118      	cbz	r0, 8004a08 <__swbuf_r+0x12>
 8004a00:	6a03      	ldr	r3, [r0, #32]
 8004a02:	b90b      	cbnz	r3, 8004a08 <__swbuf_r+0x12>
 8004a04:	f7ff ff10 	bl	8004828 <__sinit>
 8004a08:	69a3      	ldr	r3, [r4, #24]
 8004a0a:	60a3      	str	r3, [r4, #8]
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	071a      	lsls	r2, r3, #28
 8004a10:	d525      	bpl.n	8004a5e <__swbuf_r+0x68>
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	b31b      	cbz	r3, 8004a5e <__swbuf_r+0x68>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	6922      	ldr	r2, [r4, #16]
 8004a1a:	1a98      	subs	r0, r3, r2
 8004a1c:	6963      	ldr	r3, [r4, #20]
 8004a1e:	b2f6      	uxtb	r6, r6
 8004a20:	4283      	cmp	r3, r0
 8004a22:	4637      	mov	r7, r6
 8004a24:	dc04      	bgt.n	8004a30 <__swbuf_r+0x3a>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 fd4f 	bl	80054cc <_fflush_r>
 8004a2e:	b9e0      	cbnz	r0, 8004a6a <__swbuf_r+0x74>
 8004a30:	68a3      	ldr	r3, [r4, #8]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	701e      	strb	r6, [r3, #0]
 8004a3e:	6962      	ldr	r2, [r4, #20]
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d004      	beq.n	8004a50 <__swbuf_r+0x5a>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	07db      	lsls	r3, r3, #31
 8004a4a:	d506      	bpl.n	8004a5a <__swbuf_r+0x64>
 8004a4c:	2e0a      	cmp	r6, #10
 8004a4e:	d104      	bne.n	8004a5a <__swbuf_r+0x64>
 8004a50:	4621      	mov	r1, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 fd3a 	bl	80054cc <_fflush_r>
 8004a58:	b938      	cbnz	r0, 8004a6a <__swbuf_r+0x74>
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f805 	bl	8004a70 <__swsetup_r>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0d5      	beq.n	8004a16 <__swbuf_r+0x20>
 8004a6a:	f04f 37ff 	mov.w	r7, #4294967295
 8004a6e:	e7f4      	b.n	8004a5a <__swbuf_r+0x64>

08004a70 <__swsetup_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <__swsetup_r+0xac>)
 8004a74:	4605      	mov	r5, r0
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	460c      	mov	r4, r1
 8004a7a:	b118      	cbz	r0, 8004a84 <__swsetup_r+0x14>
 8004a7c:	6a03      	ldr	r3, [r0, #32]
 8004a7e:	b90b      	cbnz	r3, 8004a84 <__swsetup_r+0x14>
 8004a80:	f7ff fed2 	bl	8004828 <__sinit>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a8a:	0718      	lsls	r0, r3, #28
 8004a8c:	d422      	bmi.n	8004ad4 <__swsetup_r+0x64>
 8004a8e:	06d9      	lsls	r1, r3, #27
 8004a90:	d407      	bmi.n	8004aa2 <__swsetup_r+0x32>
 8004a92:	2309      	movs	r3, #9
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	e034      	b.n	8004b0c <__swsetup_r+0x9c>
 8004aa2:	0758      	lsls	r0, r3, #29
 8004aa4:	d512      	bpl.n	8004acc <__swsetup_r+0x5c>
 8004aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa8:	b141      	cbz	r1, 8004abc <__swsetup_r+0x4c>
 8004aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aae:	4299      	cmp	r1, r3
 8004ab0:	d002      	beq.n	8004ab8 <__swsetup_r+0x48>
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f8b8 	bl	8004c28 <_free_r>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6363      	str	r3, [r4, #52]	; 0x34
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6063      	str	r3, [r4, #4]
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f043 0308 	orr.w	r3, r3, #8
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	b94b      	cbnz	r3, 8004aec <__swsetup_r+0x7c>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae2:	d003      	beq.n	8004aec <__swsetup_r+0x7c>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 fd3e 	bl	8005568 <__smakebuf_r>
 8004aec:	89a0      	ldrh	r0, [r4, #12]
 8004aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004af2:	f010 0301 	ands.w	r3, r0, #1
 8004af6:	d00a      	beq.n	8004b0e <__swsetup_r+0x9e>
 8004af8:	2300      	movs	r3, #0
 8004afa:	60a3      	str	r3, [r4, #8]
 8004afc:	6963      	ldr	r3, [r4, #20]
 8004afe:	425b      	negs	r3, r3
 8004b00:	61a3      	str	r3, [r4, #24]
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	b943      	cbnz	r3, 8004b18 <__swsetup_r+0xa8>
 8004b06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b0a:	d1c4      	bne.n	8004a96 <__swsetup_r+0x26>
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	0781      	lsls	r1, r0, #30
 8004b10:	bf58      	it	pl
 8004b12:	6963      	ldrpl	r3, [r4, #20]
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	e7f4      	b.n	8004b02 <__swsetup_r+0x92>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e7f7      	b.n	8004b0c <__swsetup_r+0x9c>
 8004b1c:	20000064 	.word	0x20000064

08004b20 <memset>:
 8004b20:	4402      	add	r2, r0
 8004b22:	4603      	mov	r3, r0
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d100      	bne.n	8004b2a <memset+0xa>
 8004b28:	4770      	bx	lr
 8004b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2e:	e7f9      	b.n	8004b24 <memset+0x4>

08004b30 <_close_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d06      	ldr	r5, [pc, #24]	; (8004b4c <_close_r+0x1c>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f000 fe5a 	bl	80057f4 <_close>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_close_r+0x1a>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_close_r+0x1a>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	200002cc 	.word	0x200002cc

08004b50 <_lseek_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4d07      	ldr	r5, [pc, #28]	; (8004b70 <_lseek_r+0x20>)
 8004b54:	4604      	mov	r4, r0
 8004b56:	4608      	mov	r0, r1
 8004b58:	4611      	mov	r1, r2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	602a      	str	r2, [r5, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fe05 	bl	800576e <_lseek>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_lseek_r+0x1e>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_lseek_r+0x1e>
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	200002cc 	.word	0x200002cc

08004b74 <_read_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d07      	ldr	r5, [pc, #28]	; (8004b94 <_read_r+0x20>)
 8004b78:	4604      	mov	r4, r0
 8004b7a:	4608      	mov	r0, r1
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	2200      	movs	r2, #0
 8004b80:	602a      	str	r2, [r5, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 fd9b 	bl	80056be <_read>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_read_r+0x1e>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_read_r+0x1e>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	200002cc 	.word	0x200002cc

08004b98 <_write_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d07      	ldr	r5, [pc, #28]	; (8004bb8 <_write_r+0x20>)
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	602a      	str	r2, [r5, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 fdf3 	bl	8005792 <_write>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_write_r+0x1e>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_write_r+0x1e>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	200002cc 	.word	0x200002cc

08004bbc <__libc_init_array>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	4d0d      	ldr	r5, [pc, #52]	; (8004bf4 <__libc_init_array+0x38>)
 8004bc0:	4c0d      	ldr	r4, [pc, #52]	; (8004bf8 <__libc_init_array+0x3c>)
 8004bc2:	1b64      	subs	r4, r4, r5
 8004bc4:	10a4      	asrs	r4, r4, #2
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	d109      	bne.n	8004be0 <__libc_init_array+0x24>
 8004bcc:	4d0b      	ldr	r5, [pc, #44]	; (8004bfc <__libc_init_array+0x40>)
 8004bce:	4c0c      	ldr	r4, [pc, #48]	; (8004c00 <__libc_init_array+0x44>)
 8004bd0:	f000 feac 	bl	800592c <_init>
 8004bd4:	1b64      	subs	r4, r4, r5
 8004bd6:	10a4      	asrs	r4, r4, #2
 8004bd8:	2600      	movs	r6, #0
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	d105      	bne.n	8004bea <__libc_init_array+0x2e>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be4:	4798      	blx	r3
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7ee      	b.n	8004bc8 <__libc_init_array+0xc>
 8004bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bee:	4798      	blx	r3
 8004bf0:	3601      	adds	r6, #1
 8004bf2:	e7f2      	b.n	8004bda <__libc_init_array+0x1e>
 8004bf4:	08005acc 	.word	0x08005acc
 8004bf8:	08005acc 	.word	0x08005acc
 8004bfc:	08005acc 	.word	0x08005acc
 8004c00:	08005ad0 	.word	0x08005ad0

08004c04 <__retarget_lock_init_recursive>:
 8004c04:	4770      	bx	lr

08004c06 <__retarget_lock_acquire_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_release_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <memcpy>:
 8004c0a:	440a      	add	r2, r1
 8004c0c:	4291      	cmp	r1, r2
 8004c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c12:	d100      	bne.n	8004c16 <memcpy+0xc>
 8004c14:	4770      	bx	lr
 8004c16:	b510      	push	{r4, lr}
 8004c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c20:	4291      	cmp	r1, r2
 8004c22:	d1f9      	bne.n	8004c18 <memcpy+0xe>
 8004c24:	bd10      	pop	{r4, pc}
	...

08004c28 <_free_r>:
 8004c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c2a:	2900      	cmp	r1, #0
 8004c2c:	d044      	beq.n	8004cb8 <_free_r+0x90>
 8004c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c32:	9001      	str	r0, [sp, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f1a1 0404 	sub.w	r4, r1, #4
 8004c3a:	bfb8      	it	lt
 8004c3c:	18e4      	addlt	r4, r4, r3
 8004c3e:	f000 f8df 	bl	8004e00 <__malloc_lock>
 8004c42:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <_free_r+0x94>)
 8004c44:	9801      	ldr	r0, [sp, #4]
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	b933      	cbnz	r3, 8004c58 <_free_r+0x30>
 8004c4a:	6063      	str	r3, [r4, #4]
 8004c4c:	6014      	str	r4, [r2, #0]
 8004c4e:	b003      	add	sp, #12
 8004c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c54:	f000 b8da 	b.w	8004e0c <__malloc_unlock>
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d908      	bls.n	8004c6e <_free_r+0x46>
 8004c5c:	6825      	ldr	r5, [r4, #0]
 8004c5e:	1961      	adds	r1, r4, r5
 8004c60:	428b      	cmp	r3, r1
 8004c62:	bf01      	itttt	eq
 8004c64:	6819      	ldreq	r1, [r3, #0]
 8004c66:	685b      	ldreq	r3, [r3, #4]
 8004c68:	1949      	addeq	r1, r1, r5
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	e7ed      	b.n	8004c4a <_free_r+0x22>
 8004c6e:	461a      	mov	r2, r3
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b10b      	cbz	r3, 8004c78 <_free_r+0x50>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d9fa      	bls.n	8004c6e <_free_r+0x46>
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	1855      	adds	r5, r2, r1
 8004c7c:	42a5      	cmp	r5, r4
 8004c7e:	d10b      	bne.n	8004c98 <_free_r+0x70>
 8004c80:	6824      	ldr	r4, [r4, #0]
 8004c82:	4421      	add	r1, r4
 8004c84:	1854      	adds	r4, r2, r1
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	d1e0      	bne.n	8004c4e <_free_r+0x26>
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6053      	str	r3, [r2, #4]
 8004c92:	440c      	add	r4, r1
 8004c94:	6014      	str	r4, [r2, #0]
 8004c96:	e7da      	b.n	8004c4e <_free_r+0x26>
 8004c98:	d902      	bls.n	8004ca0 <_free_r+0x78>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	6003      	str	r3, [r0, #0]
 8004c9e:	e7d6      	b.n	8004c4e <_free_r+0x26>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	1961      	adds	r1, r4, r5
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	bf04      	itt	eq
 8004ca8:	6819      	ldreq	r1, [r3, #0]
 8004caa:	685b      	ldreq	r3, [r3, #4]
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	bf04      	itt	eq
 8004cb0:	1949      	addeq	r1, r1, r5
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	6054      	str	r4, [r2, #4]
 8004cb6:	e7ca      	b.n	8004c4e <_free_r+0x26>
 8004cb8:	b003      	add	sp, #12
 8004cba:	bd30      	pop	{r4, r5, pc}
 8004cbc:	200002d4 	.word	0x200002d4

08004cc0 <sbrk_aligned>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4e0e      	ldr	r6, [pc, #56]	; (8004cfc <sbrk_aligned+0x3c>)
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	6831      	ldr	r1, [r6, #0]
 8004cc8:	4605      	mov	r5, r0
 8004cca:	b911      	cbnz	r1, 8004cd2 <sbrk_aligned+0x12>
 8004ccc:	f000 fcaa 	bl	8005624 <_sbrk_r>
 8004cd0:	6030      	str	r0, [r6, #0]
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 fca5 	bl	8005624 <_sbrk_r>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	d00a      	beq.n	8004cf4 <sbrk_aligned+0x34>
 8004cde:	1cc4      	adds	r4, r0, #3
 8004ce0:	f024 0403 	bic.w	r4, r4, #3
 8004ce4:	42a0      	cmp	r0, r4
 8004ce6:	d007      	beq.n	8004cf8 <sbrk_aligned+0x38>
 8004ce8:	1a21      	subs	r1, r4, r0
 8004cea:	4628      	mov	r0, r5
 8004cec:	f000 fc9a 	bl	8005624 <_sbrk_r>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d101      	bne.n	8004cf8 <sbrk_aligned+0x38>
 8004cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	200002d8 	.word	0x200002d8

08004d00 <_malloc_r>:
 8004d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d04:	1ccd      	adds	r5, r1, #3
 8004d06:	f025 0503 	bic.w	r5, r5, #3
 8004d0a:	3508      	adds	r5, #8
 8004d0c:	2d0c      	cmp	r5, #12
 8004d0e:	bf38      	it	cc
 8004d10:	250c      	movcc	r5, #12
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	4607      	mov	r7, r0
 8004d16:	db01      	blt.n	8004d1c <_malloc_r+0x1c>
 8004d18:	42a9      	cmp	r1, r5
 8004d1a:	d905      	bls.n	8004d28 <_malloc_r+0x28>
 8004d1c:	230c      	movs	r3, #12
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	2600      	movs	r6, #0
 8004d22:	4630      	mov	r0, r6
 8004d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004dfc <_malloc_r+0xfc>
 8004d2c:	f000 f868 	bl	8004e00 <__malloc_lock>
 8004d30:	f8d8 3000 	ldr.w	r3, [r8]
 8004d34:	461c      	mov	r4, r3
 8004d36:	bb5c      	cbnz	r4, 8004d90 <_malloc_r+0x90>
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	f7ff ffc0 	bl	8004cc0 <sbrk_aligned>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	4604      	mov	r4, r0
 8004d44:	d155      	bne.n	8004df2 <_malloc_r+0xf2>
 8004d46:	f8d8 4000 	ldr.w	r4, [r8]
 8004d4a:	4626      	mov	r6, r4
 8004d4c:	2e00      	cmp	r6, #0
 8004d4e:	d145      	bne.n	8004ddc <_malloc_r+0xdc>
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	d048      	beq.n	8004de6 <_malloc_r+0xe6>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	4631      	mov	r1, r6
 8004d58:	4638      	mov	r0, r7
 8004d5a:	eb04 0903 	add.w	r9, r4, r3
 8004d5e:	f000 fc61 	bl	8005624 <_sbrk_r>
 8004d62:	4581      	cmp	r9, r0
 8004d64:	d13f      	bne.n	8004de6 <_malloc_r+0xe6>
 8004d66:	6821      	ldr	r1, [r4, #0]
 8004d68:	1a6d      	subs	r5, r5, r1
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f7ff ffa7 	bl	8004cc0 <sbrk_aligned>
 8004d72:	3001      	adds	r0, #1
 8004d74:	d037      	beq.n	8004de6 <_malloc_r+0xe6>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	442b      	add	r3, r5
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d038      	beq.n	8004df6 <_malloc_r+0xf6>
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	42a2      	cmp	r2, r4
 8004d88:	d12b      	bne.n	8004de2 <_malloc_r+0xe2>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	e00f      	b.n	8004db0 <_malloc_r+0xb0>
 8004d90:	6822      	ldr	r2, [r4, #0]
 8004d92:	1b52      	subs	r2, r2, r5
 8004d94:	d41f      	bmi.n	8004dd6 <_malloc_r+0xd6>
 8004d96:	2a0b      	cmp	r2, #11
 8004d98:	d917      	bls.n	8004dca <_malloc_r+0xca>
 8004d9a:	1961      	adds	r1, r4, r5
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	6025      	str	r5, [r4, #0]
 8004da0:	bf18      	it	ne
 8004da2:	6059      	strne	r1, [r3, #4]
 8004da4:	6863      	ldr	r3, [r4, #4]
 8004da6:	bf08      	it	eq
 8004da8:	f8c8 1000 	streq.w	r1, [r8]
 8004dac:	5162      	str	r2, [r4, r5]
 8004dae:	604b      	str	r3, [r1, #4]
 8004db0:	4638      	mov	r0, r7
 8004db2:	f104 060b 	add.w	r6, r4, #11
 8004db6:	f000 f829 	bl	8004e0c <__malloc_unlock>
 8004dba:	f026 0607 	bic.w	r6, r6, #7
 8004dbe:	1d23      	adds	r3, r4, #4
 8004dc0:	1af2      	subs	r2, r6, r3
 8004dc2:	d0ae      	beq.n	8004d22 <_malloc_r+0x22>
 8004dc4:	1b9b      	subs	r3, r3, r6
 8004dc6:	50a3      	str	r3, [r4, r2]
 8004dc8:	e7ab      	b.n	8004d22 <_malloc_r+0x22>
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	6862      	ldr	r2, [r4, #4]
 8004dce:	d1dd      	bne.n	8004d8c <_malloc_r+0x8c>
 8004dd0:	f8c8 2000 	str.w	r2, [r8]
 8004dd4:	e7ec      	b.n	8004db0 <_malloc_r+0xb0>
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	6864      	ldr	r4, [r4, #4]
 8004dda:	e7ac      	b.n	8004d36 <_malloc_r+0x36>
 8004ddc:	4634      	mov	r4, r6
 8004dde:	6876      	ldr	r6, [r6, #4]
 8004de0:	e7b4      	b.n	8004d4c <_malloc_r+0x4c>
 8004de2:	4613      	mov	r3, r2
 8004de4:	e7cc      	b.n	8004d80 <_malloc_r+0x80>
 8004de6:	230c      	movs	r3, #12
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	4638      	mov	r0, r7
 8004dec:	f000 f80e 	bl	8004e0c <__malloc_unlock>
 8004df0:	e797      	b.n	8004d22 <_malloc_r+0x22>
 8004df2:	6025      	str	r5, [r4, #0]
 8004df4:	e7dc      	b.n	8004db0 <_malloc_r+0xb0>
 8004df6:	605b      	str	r3, [r3, #4]
 8004df8:	deff      	udf	#255	; 0xff
 8004dfa:	bf00      	nop
 8004dfc:	200002d4 	.word	0x200002d4

08004e00 <__malloc_lock>:
 8004e00:	4801      	ldr	r0, [pc, #4]	; (8004e08 <__malloc_lock+0x8>)
 8004e02:	f7ff bf00 	b.w	8004c06 <__retarget_lock_acquire_recursive>
 8004e06:	bf00      	nop
 8004e08:	200002d0 	.word	0x200002d0

08004e0c <__malloc_unlock>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <__malloc_unlock+0x8>)
 8004e0e:	f7ff befb 	b.w	8004c08 <__retarget_lock_release_recursive>
 8004e12:	bf00      	nop
 8004e14:	200002d0 	.word	0x200002d0

08004e18 <__sfputc_r>:
 8004e18:	6893      	ldr	r3, [r2, #8]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	b410      	push	{r4}
 8004e20:	6093      	str	r3, [r2, #8]
 8004e22:	da08      	bge.n	8004e36 <__sfputc_r+0x1e>
 8004e24:	6994      	ldr	r4, [r2, #24]
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	db01      	blt.n	8004e2e <__sfputc_r+0x16>
 8004e2a:	290a      	cmp	r1, #10
 8004e2c:	d103      	bne.n	8004e36 <__sfputc_r+0x1e>
 8004e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e32:	f7ff bde0 	b.w	80049f6 <__swbuf_r>
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	1c58      	adds	r0, r3, #1
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	7019      	strb	r1, [r3, #0]
 8004e3e:	4608      	mov	r0, r1
 8004e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <__sfputs_r>:
 8004e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e48:	4606      	mov	r6, r0
 8004e4a:	460f      	mov	r7, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	18d5      	adds	r5, r2, r3
 8004e50:	42ac      	cmp	r4, r5
 8004e52:	d101      	bne.n	8004e58 <__sfputs_r+0x12>
 8004e54:	2000      	movs	r0, #0
 8004e56:	e007      	b.n	8004e68 <__sfputs_r+0x22>
 8004e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5c:	463a      	mov	r2, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ffda 	bl	8004e18 <__sfputc_r>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d1f3      	bne.n	8004e50 <__sfputs_r+0xa>
 8004e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e6c <_vfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	460d      	mov	r5, r1
 8004e72:	b09d      	sub	sp, #116	; 0x74
 8004e74:	4614      	mov	r4, r2
 8004e76:	4698      	mov	r8, r3
 8004e78:	4606      	mov	r6, r0
 8004e7a:	b118      	cbz	r0, 8004e84 <_vfiprintf_r+0x18>
 8004e7c:	6a03      	ldr	r3, [r0, #32]
 8004e7e:	b90b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x18>
 8004e80:	f7ff fcd2 	bl	8004828 <__sinit>
 8004e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_vfiprintf_r+0x2a>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	059a      	lsls	r2, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_vfiprintf_r+0x2a>
 8004e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e92:	f7ff feb8 	bl	8004c06 <__retarget_lock_acquire_recursive>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	d501      	bpl.n	8004ea0 <_vfiprintf_r+0x34>
 8004e9c:	692b      	ldr	r3, [r5, #16]
 8004e9e:	b99b      	cbnz	r3, 8004ec8 <_vfiprintf_r+0x5c>
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff fde4 	bl	8004a70 <__swsetup_r>
 8004ea8:	b170      	cbz	r0, 8004ec8 <_vfiprintf_r+0x5c>
 8004eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eac:	07dc      	lsls	r4, r3, #31
 8004eae:	d504      	bpl.n	8004eba <_vfiprintf_r+0x4e>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	b01d      	add	sp, #116	; 0x74
 8004eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	0598      	lsls	r0, r3, #22
 8004ebe:	d4f7      	bmi.n	8004eb0 <_vfiprintf_r+0x44>
 8004ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ec2:	f7ff fea1 	bl	8004c08 <__retarget_lock_release_recursive>
 8004ec6:	e7f3      	b.n	8004eb0 <_vfiprintf_r+0x44>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9309      	str	r3, [sp, #36]	; 0x24
 8004ecc:	2320      	movs	r3, #32
 8004ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed6:	2330      	movs	r3, #48	; 0x30
 8004ed8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800508c <_vfiprintf_r+0x220>
 8004edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee0:	f04f 0901 	mov.w	r9, #1
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	469a      	mov	sl, r3
 8004ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eec:	b10a      	cbz	r2, 8004ef2 <_vfiprintf_r+0x86>
 8004eee:	2a25      	cmp	r2, #37	; 0x25
 8004ef0:	d1f9      	bne.n	8004ee6 <_vfiprintf_r+0x7a>
 8004ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef6:	d00b      	beq.n	8004f10 <_vfiprintf_r+0xa4>
 8004ef8:	465b      	mov	r3, fp
 8004efa:	4622      	mov	r2, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	4630      	mov	r0, r6
 8004f00:	f7ff ffa1 	bl	8004e46 <__sfputs_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	f000 80a9 	beq.w	800505c <_vfiprintf_r+0x1f0>
 8004f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f0c:	445a      	add	r2, fp
 8004f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8004f10:	f89a 3000 	ldrb.w	r3, [sl]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80a1 	beq.w	800505c <_vfiprintf_r+0x1f0>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f24:	f10a 0a01 	add.w	sl, sl, #1
 8004f28:	9304      	str	r3, [sp, #16]
 8004f2a:	9307      	str	r3, [sp, #28]
 8004f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f30:	931a      	str	r3, [sp, #104]	; 0x68
 8004f32:	4654      	mov	r4, sl
 8004f34:	2205      	movs	r2, #5
 8004f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3a:	4854      	ldr	r0, [pc, #336]	; (800508c <_vfiprintf_r+0x220>)
 8004f3c:	f7fb f948 	bl	80001d0 <memchr>
 8004f40:	9a04      	ldr	r2, [sp, #16]
 8004f42:	b9d8      	cbnz	r0, 8004f7c <_vfiprintf_r+0x110>
 8004f44:	06d1      	lsls	r1, r2, #27
 8004f46:	bf44      	itt	mi
 8004f48:	2320      	movmi	r3, #32
 8004f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f4e:	0713      	lsls	r3, r2, #28
 8004f50:	bf44      	itt	mi
 8004f52:	232b      	movmi	r3, #43	; 0x2b
 8004f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f58:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5e:	d015      	beq.n	8004f8c <_vfiprintf_r+0x120>
 8004f60:	9a07      	ldr	r2, [sp, #28]
 8004f62:	4654      	mov	r4, sl
 8004f64:	2000      	movs	r0, #0
 8004f66:	f04f 0c0a 	mov.w	ip, #10
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f70:	3b30      	subs	r3, #48	; 0x30
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	d94d      	bls.n	8005012 <_vfiprintf_r+0x1a6>
 8004f76:	b1b0      	cbz	r0, 8004fa6 <_vfiprintf_r+0x13a>
 8004f78:	9207      	str	r2, [sp, #28]
 8004f7a:	e014      	b.n	8004fa6 <_vfiprintf_r+0x13a>
 8004f7c:	eba0 0308 	sub.w	r3, r0, r8
 8004f80:	fa09 f303 	lsl.w	r3, r9, r3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	46a2      	mov	sl, r4
 8004f8a:	e7d2      	b.n	8004f32 <_vfiprintf_r+0xc6>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	1d19      	adds	r1, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	9103      	str	r1, [sp, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfbb      	ittet	lt
 8004f98:	425b      	neglt	r3, r3
 8004f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9e:	9307      	strge	r3, [sp, #28]
 8004fa0:	9307      	strlt	r3, [sp, #28]
 8004fa2:	bfb8      	it	lt
 8004fa4:	9204      	strlt	r2, [sp, #16]
 8004fa6:	7823      	ldrb	r3, [r4, #0]
 8004fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8004faa:	d10c      	bne.n	8004fc6 <_vfiprintf_r+0x15a>
 8004fac:	7863      	ldrb	r3, [r4, #1]
 8004fae:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb0:	d134      	bne.n	800501c <_vfiprintf_r+0x1b0>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	9203      	str	r2, [sp, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bfb8      	it	lt
 8004fbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fc2:	3402      	adds	r4, #2
 8004fc4:	9305      	str	r3, [sp, #20]
 8004fc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800509c <_vfiprintf_r+0x230>
 8004fca:	7821      	ldrb	r1, [r4, #0]
 8004fcc:	2203      	movs	r2, #3
 8004fce:	4650      	mov	r0, sl
 8004fd0:	f7fb f8fe 	bl	80001d0 <memchr>
 8004fd4:	b138      	cbz	r0, 8004fe6 <_vfiprintf_r+0x17a>
 8004fd6:	9b04      	ldr	r3, [sp, #16]
 8004fd8:	eba0 000a 	sub.w	r0, r0, sl
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	4082      	lsls	r2, r0
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	3401      	adds	r4, #1
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fea:	4829      	ldr	r0, [pc, #164]	; (8005090 <_vfiprintf_r+0x224>)
 8004fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ff0:	2206      	movs	r2, #6
 8004ff2:	f7fb f8ed 	bl	80001d0 <memchr>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d03f      	beq.n	800507a <_vfiprintf_r+0x20e>
 8004ffa:	4b26      	ldr	r3, [pc, #152]	; (8005094 <_vfiprintf_r+0x228>)
 8004ffc:	bb1b      	cbnz	r3, 8005046 <_vfiprintf_r+0x1da>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	3307      	adds	r3, #7
 8005002:	f023 0307 	bic.w	r3, r3, #7
 8005006:	3308      	adds	r3, #8
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500c:	443b      	add	r3, r7
 800500e:	9309      	str	r3, [sp, #36]	; 0x24
 8005010:	e768      	b.n	8004ee4 <_vfiprintf_r+0x78>
 8005012:	fb0c 3202 	mla	r2, ip, r2, r3
 8005016:	460c      	mov	r4, r1
 8005018:	2001      	movs	r0, #1
 800501a:	e7a6      	b.n	8004f6a <_vfiprintf_r+0xfe>
 800501c:	2300      	movs	r3, #0
 800501e:	3401      	adds	r4, #1
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0c0a 	mov.w	ip, #10
 8005028:	4620      	mov	r0, r4
 800502a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502e:	3a30      	subs	r2, #48	; 0x30
 8005030:	2a09      	cmp	r2, #9
 8005032:	d903      	bls.n	800503c <_vfiprintf_r+0x1d0>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0c6      	beq.n	8004fc6 <_vfiprintf_r+0x15a>
 8005038:	9105      	str	r1, [sp, #20]
 800503a:	e7c4      	b.n	8004fc6 <_vfiprintf_r+0x15a>
 800503c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005040:	4604      	mov	r4, r0
 8005042:	2301      	movs	r3, #1
 8005044:	e7f0      	b.n	8005028 <_vfiprintf_r+0x1bc>
 8005046:	ab03      	add	r3, sp, #12
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	462a      	mov	r2, r5
 800504c:	4b12      	ldr	r3, [pc, #72]	; (8005098 <_vfiprintf_r+0x22c>)
 800504e:	a904      	add	r1, sp, #16
 8005050:	4630      	mov	r0, r6
 8005052:	f3af 8000 	nop.w
 8005056:	4607      	mov	r7, r0
 8005058:	1c78      	adds	r0, r7, #1
 800505a:	d1d6      	bne.n	800500a <_vfiprintf_r+0x19e>
 800505c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505e:	07d9      	lsls	r1, r3, #31
 8005060:	d405      	bmi.n	800506e <_vfiprintf_r+0x202>
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	059a      	lsls	r2, r3, #22
 8005066:	d402      	bmi.n	800506e <_vfiprintf_r+0x202>
 8005068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800506a:	f7ff fdcd 	bl	8004c08 <__retarget_lock_release_recursive>
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	065b      	lsls	r3, r3, #25
 8005072:	f53f af1d 	bmi.w	8004eb0 <_vfiprintf_r+0x44>
 8005076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005078:	e71c      	b.n	8004eb4 <_vfiprintf_r+0x48>
 800507a:	ab03      	add	r3, sp, #12
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	462a      	mov	r2, r5
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <_vfiprintf_r+0x22c>)
 8005082:	a904      	add	r1, sp, #16
 8005084:	4630      	mov	r0, r6
 8005086:	f000 f879 	bl	800517c <_printf_i>
 800508a:	e7e4      	b.n	8005056 <_vfiprintf_r+0x1ea>
 800508c:	08005a90 	.word	0x08005a90
 8005090:	08005a9a 	.word	0x08005a9a
 8005094:	00000000 	.word	0x00000000
 8005098:	08004e47 	.word	0x08004e47
 800509c:	08005a96 	.word	0x08005a96

080050a0 <_printf_common>:
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	4616      	mov	r6, r2
 80050a6:	4699      	mov	r9, r3
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	690b      	ldr	r3, [r1, #16]
 80050ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b0:	4293      	cmp	r3, r2
 80050b2:	bfb8      	it	lt
 80050b4:	4613      	movlt	r3, r2
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050bc:	4607      	mov	r7, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	b10a      	cbz	r2, 80050c6 <_printf_common+0x26>
 80050c2:	3301      	adds	r3, #1
 80050c4:	6033      	str	r3, [r6, #0]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	0699      	lsls	r1, r3, #26
 80050ca:	bf42      	ittt	mi
 80050cc:	6833      	ldrmi	r3, [r6, #0]
 80050ce:	3302      	addmi	r3, #2
 80050d0:	6033      	strmi	r3, [r6, #0]
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	f015 0506 	ands.w	r5, r5, #6
 80050d8:	d106      	bne.n	80050e8 <_printf_common+0x48>
 80050da:	f104 0a19 	add.w	sl, r4, #25
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	6832      	ldr	r2, [r6, #0]
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dc26      	bgt.n	8005136 <_printf_common+0x96>
 80050e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050ec:	1e13      	subs	r3, r2, #0
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	bf18      	it	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	0692      	lsls	r2, r2, #26
 80050f6:	d42b      	bmi.n	8005150 <_printf_common+0xb0>
 80050f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fc:	4649      	mov	r1, r9
 80050fe:	4638      	mov	r0, r7
 8005100:	47c0      	blx	r8
 8005102:	3001      	adds	r0, #1
 8005104:	d01e      	beq.n	8005144 <_printf_common+0xa4>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	f003 0306 	and.w	r3, r3, #6
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf02      	ittt	eq
 8005112:	68e5      	ldreq	r5, [r4, #12]
 8005114:	6833      	ldreq	r3, [r6, #0]
 8005116:	1aed      	subeq	r5, r5, r3
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	bf0c      	ite	eq
 800511c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005120:	2500      	movne	r5, #0
 8005122:	4293      	cmp	r3, r2
 8005124:	bfc4      	itt	gt
 8005126:	1a9b      	subgt	r3, r3, r2
 8005128:	18ed      	addgt	r5, r5, r3
 800512a:	2600      	movs	r6, #0
 800512c:	341a      	adds	r4, #26
 800512e:	42b5      	cmp	r5, r6
 8005130:	d11a      	bne.n	8005168 <_printf_common+0xc8>
 8005132:	2000      	movs	r0, #0
 8005134:	e008      	b.n	8005148 <_printf_common+0xa8>
 8005136:	2301      	movs	r3, #1
 8005138:	4652      	mov	r2, sl
 800513a:	4649      	mov	r1, r9
 800513c:	4638      	mov	r0, r7
 800513e:	47c0      	blx	r8
 8005140:	3001      	adds	r0, #1
 8005142:	d103      	bne.n	800514c <_printf_common+0xac>
 8005144:	f04f 30ff 	mov.w	r0, #4294967295
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	3501      	adds	r5, #1
 800514e:	e7c6      	b.n	80050de <_printf_common+0x3e>
 8005150:	18e1      	adds	r1, r4, r3
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	2030      	movs	r0, #48	; 0x30
 8005156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800515a:	4422      	add	r2, r4
 800515c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005164:	3302      	adds	r3, #2
 8005166:	e7c7      	b.n	80050f8 <_printf_common+0x58>
 8005168:	2301      	movs	r3, #1
 800516a:	4622      	mov	r2, r4
 800516c:	4649      	mov	r1, r9
 800516e:	4638      	mov	r0, r7
 8005170:	47c0      	blx	r8
 8005172:	3001      	adds	r0, #1
 8005174:	d0e6      	beq.n	8005144 <_printf_common+0xa4>
 8005176:	3601      	adds	r6, #1
 8005178:	e7d9      	b.n	800512e <_printf_common+0x8e>
	...

0800517c <_printf_i>:
 800517c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	7e0f      	ldrb	r7, [r1, #24]
 8005182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005184:	2f78      	cmp	r7, #120	; 0x78
 8005186:	4691      	mov	r9, r2
 8005188:	4680      	mov	r8, r0
 800518a:	460c      	mov	r4, r1
 800518c:	469a      	mov	sl, r3
 800518e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005192:	d807      	bhi.n	80051a4 <_printf_i+0x28>
 8005194:	2f62      	cmp	r7, #98	; 0x62
 8005196:	d80a      	bhi.n	80051ae <_printf_i+0x32>
 8005198:	2f00      	cmp	r7, #0
 800519a:	f000 80d4 	beq.w	8005346 <_printf_i+0x1ca>
 800519e:	2f58      	cmp	r7, #88	; 0x58
 80051a0:	f000 80c0 	beq.w	8005324 <_printf_i+0x1a8>
 80051a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051ac:	e03a      	b.n	8005224 <_printf_i+0xa8>
 80051ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051b2:	2b15      	cmp	r3, #21
 80051b4:	d8f6      	bhi.n	80051a4 <_printf_i+0x28>
 80051b6:	a101      	add	r1, pc, #4	; (adr r1, 80051bc <_printf_i+0x40>)
 80051b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051bc:	08005215 	.word	0x08005215
 80051c0:	08005229 	.word	0x08005229
 80051c4:	080051a5 	.word	0x080051a5
 80051c8:	080051a5 	.word	0x080051a5
 80051cc:	080051a5 	.word	0x080051a5
 80051d0:	080051a5 	.word	0x080051a5
 80051d4:	08005229 	.word	0x08005229
 80051d8:	080051a5 	.word	0x080051a5
 80051dc:	080051a5 	.word	0x080051a5
 80051e0:	080051a5 	.word	0x080051a5
 80051e4:	080051a5 	.word	0x080051a5
 80051e8:	0800532d 	.word	0x0800532d
 80051ec:	08005255 	.word	0x08005255
 80051f0:	080052e7 	.word	0x080052e7
 80051f4:	080051a5 	.word	0x080051a5
 80051f8:	080051a5 	.word	0x080051a5
 80051fc:	0800534f 	.word	0x0800534f
 8005200:	080051a5 	.word	0x080051a5
 8005204:	08005255 	.word	0x08005255
 8005208:	080051a5 	.word	0x080051a5
 800520c:	080051a5 	.word	0x080051a5
 8005210:	080052ef 	.word	0x080052ef
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	1d1a      	adds	r2, r3, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	602a      	str	r2, [r5, #0]
 800521c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005224:	2301      	movs	r3, #1
 8005226:	e09f      	b.n	8005368 <_printf_i+0x1ec>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	0607      	lsls	r7, r0, #24
 800522e:	f103 0104 	add.w	r1, r3, #4
 8005232:	6029      	str	r1, [r5, #0]
 8005234:	d501      	bpl.n	800523a <_printf_i+0xbe>
 8005236:	681e      	ldr	r6, [r3, #0]
 8005238:	e003      	b.n	8005242 <_printf_i+0xc6>
 800523a:	0646      	lsls	r6, r0, #25
 800523c:	d5fb      	bpl.n	8005236 <_printf_i+0xba>
 800523e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005242:	2e00      	cmp	r6, #0
 8005244:	da03      	bge.n	800524e <_printf_i+0xd2>
 8005246:	232d      	movs	r3, #45	; 0x2d
 8005248:	4276      	negs	r6, r6
 800524a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524e:	485a      	ldr	r0, [pc, #360]	; (80053b8 <_printf_i+0x23c>)
 8005250:	230a      	movs	r3, #10
 8005252:	e012      	b.n	800527a <_printf_i+0xfe>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	1d19      	adds	r1, r3, #4
 800525a:	6029      	str	r1, [r5, #0]
 800525c:	0605      	lsls	r5, r0, #24
 800525e:	d501      	bpl.n	8005264 <_printf_i+0xe8>
 8005260:	681e      	ldr	r6, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0xee>
 8005264:	0641      	lsls	r1, r0, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0xe4>
 8005268:	881e      	ldrh	r6, [r3, #0]
 800526a:	4853      	ldr	r0, [pc, #332]	; (80053b8 <_printf_i+0x23c>)
 800526c:	2f6f      	cmp	r7, #111	; 0x6f
 800526e:	bf0c      	ite	eq
 8005270:	2308      	moveq	r3, #8
 8005272:	230a      	movne	r3, #10
 8005274:	2100      	movs	r1, #0
 8005276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800527a:	6865      	ldr	r5, [r4, #4]
 800527c:	60a5      	str	r5, [r4, #8]
 800527e:	2d00      	cmp	r5, #0
 8005280:	bfa2      	ittt	ge
 8005282:	6821      	ldrge	r1, [r4, #0]
 8005284:	f021 0104 	bicge.w	r1, r1, #4
 8005288:	6021      	strge	r1, [r4, #0]
 800528a:	b90e      	cbnz	r6, 8005290 <_printf_i+0x114>
 800528c:	2d00      	cmp	r5, #0
 800528e:	d04b      	beq.n	8005328 <_printf_i+0x1ac>
 8005290:	4615      	mov	r5, r2
 8005292:	fbb6 f1f3 	udiv	r1, r6, r3
 8005296:	fb03 6711 	mls	r7, r3, r1, r6
 800529a:	5dc7      	ldrb	r7, [r0, r7]
 800529c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052a0:	4637      	mov	r7, r6
 80052a2:	42bb      	cmp	r3, r7
 80052a4:	460e      	mov	r6, r1
 80052a6:	d9f4      	bls.n	8005292 <_printf_i+0x116>
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d10b      	bne.n	80052c4 <_printf_i+0x148>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	07de      	lsls	r6, r3, #31
 80052b0:	d508      	bpl.n	80052c4 <_printf_i+0x148>
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	6861      	ldr	r1, [r4, #4]
 80052b6:	4299      	cmp	r1, r3
 80052b8:	bfde      	ittt	le
 80052ba:	2330      	movle	r3, #48	; 0x30
 80052bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052c4:	1b52      	subs	r2, r2, r5
 80052c6:	6122      	str	r2, [r4, #16]
 80052c8:	f8cd a000 	str.w	sl, [sp]
 80052cc:	464b      	mov	r3, r9
 80052ce:	aa03      	add	r2, sp, #12
 80052d0:	4621      	mov	r1, r4
 80052d2:	4640      	mov	r0, r8
 80052d4:	f7ff fee4 	bl	80050a0 <_printf_common>
 80052d8:	3001      	adds	r0, #1
 80052da:	d14a      	bne.n	8005372 <_printf_i+0x1f6>
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	b004      	add	sp, #16
 80052e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	f043 0320 	orr.w	r3, r3, #32
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	4833      	ldr	r0, [pc, #204]	; (80053bc <_printf_i+0x240>)
 80052f0:	2778      	movs	r7, #120	; 0x78
 80052f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	6829      	ldr	r1, [r5, #0]
 80052fa:	061f      	lsls	r7, r3, #24
 80052fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005300:	d402      	bmi.n	8005308 <_printf_i+0x18c>
 8005302:	065f      	lsls	r7, r3, #25
 8005304:	bf48      	it	mi
 8005306:	b2b6      	uxthmi	r6, r6
 8005308:	07df      	lsls	r7, r3, #31
 800530a:	bf48      	it	mi
 800530c:	f043 0320 	orrmi.w	r3, r3, #32
 8005310:	6029      	str	r1, [r5, #0]
 8005312:	bf48      	it	mi
 8005314:	6023      	strmi	r3, [r4, #0]
 8005316:	b91e      	cbnz	r6, 8005320 <_printf_i+0x1a4>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	2310      	movs	r3, #16
 8005322:	e7a7      	b.n	8005274 <_printf_i+0xf8>
 8005324:	4824      	ldr	r0, [pc, #144]	; (80053b8 <_printf_i+0x23c>)
 8005326:	e7e4      	b.n	80052f2 <_printf_i+0x176>
 8005328:	4615      	mov	r5, r2
 800532a:	e7bd      	b.n	80052a8 <_printf_i+0x12c>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	6826      	ldr	r6, [r4, #0]
 8005330:	6961      	ldr	r1, [r4, #20]
 8005332:	1d18      	adds	r0, r3, #4
 8005334:	6028      	str	r0, [r5, #0]
 8005336:	0635      	lsls	r5, r6, #24
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	d501      	bpl.n	8005340 <_printf_i+0x1c4>
 800533c:	6019      	str	r1, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0x1ca>
 8005340:	0670      	lsls	r0, r6, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0x1c0>
 8005344:	8019      	strh	r1, [r3, #0]
 8005346:	2300      	movs	r3, #0
 8005348:	6123      	str	r3, [r4, #16]
 800534a:	4615      	mov	r5, r2
 800534c:	e7bc      	b.n	80052c8 <_printf_i+0x14c>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	1d1a      	adds	r2, r3, #4
 8005352:	602a      	str	r2, [r5, #0]
 8005354:	681d      	ldr	r5, [r3, #0]
 8005356:	6862      	ldr	r2, [r4, #4]
 8005358:	2100      	movs	r1, #0
 800535a:	4628      	mov	r0, r5
 800535c:	f7fa ff38 	bl	80001d0 <memchr>
 8005360:	b108      	cbz	r0, 8005366 <_printf_i+0x1ea>
 8005362:	1b40      	subs	r0, r0, r5
 8005364:	6060      	str	r0, [r4, #4]
 8005366:	6863      	ldr	r3, [r4, #4]
 8005368:	6123      	str	r3, [r4, #16]
 800536a:	2300      	movs	r3, #0
 800536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005370:	e7aa      	b.n	80052c8 <_printf_i+0x14c>
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	462a      	mov	r2, r5
 8005376:	4649      	mov	r1, r9
 8005378:	4640      	mov	r0, r8
 800537a:	47d0      	blx	sl
 800537c:	3001      	adds	r0, #1
 800537e:	d0ad      	beq.n	80052dc <_printf_i+0x160>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	079b      	lsls	r3, r3, #30
 8005384:	d413      	bmi.n	80053ae <_printf_i+0x232>
 8005386:	68e0      	ldr	r0, [r4, #12]
 8005388:	9b03      	ldr	r3, [sp, #12]
 800538a:	4298      	cmp	r0, r3
 800538c:	bfb8      	it	lt
 800538e:	4618      	movlt	r0, r3
 8005390:	e7a6      	b.n	80052e0 <_printf_i+0x164>
 8005392:	2301      	movs	r3, #1
 8005394:	4632      	mov	r2, r6
 8005396:	4649      	mov	r1, r9
 8005398:	4640      	mov	r0, r8
 800539a:	47d0      	blx	sl
 800539c:	3001      	adds	r0, #1
 800539e:	d09d      	beq.n	80052dc <_printf_i+0x160>
 80053a0:	3501      	adds	r5, #1
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	9903      	ldr	r1, [sp, #12]
 80053a6:	1a5b      	subs	r3, r3, r1
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dcf2      	bgt.n	8005392 <_printf_i+0x216>
 80053ac:	e7eb      	b.n	8005386 <_printf_i+0x20a>
 80053ae:	2500      	movs	r5, #0
 80053b0:	f104 0619 	add.w	r6, r4, #25
 80053b4:	e7f5      	b.n	80053a2 <_printf_i+0x226>
 80053b6:	bf00      	nop
 80053b8:	08005aa1 	.word	0x08005aa1
 80053bc:	08005ab2 	.word	0x08005ab2

080053c0 <__sflush_r>:
 80053c0:	898a      	ldrh	r2, [r1, #12]
 80053c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c6:	4605      	mov	r5, r0
 80053c8:	0710      	lsls	r0, r2, #28
 80053ca:	460c      	mov	r4, r1
 80053cc:	d458      	bmi.n	8005480 <__sflush_r+0xc0>
 80053ce:	684b      	ldr	r3, [r1, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dc05      	bgt.n	80053e0 <__sflush_r+0x20>
 80053d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dc02      	bgt.n	80053e0 <__sflush_r+0x20>
 80053da:	2000      	movs	r0, #0
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053e2:	2e00      	cmp	r6, #0
 80053e4:	d0f9      	beq.n	80053da <__sflush_r+0x1a>
 80053e6:	2300      	movs	r3, #0
 80053e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053ec:	682f      	ldr	r7, [r5, #0]
 80053ee:	6a21      	ldr	r1, [r4, #32]
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	d032      	beq.n	800545a <__sflush_r+0x9a>
 80053f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	075a      	lsls	r2, r3, #29
 80053fa:	d505      	bpl.n	8005408 <__sflush_r+0x48>
 80053fc:	6863      	ldr	r3, [r4, #4]
 80053fe:	1ac0      	subs	r0, r0, r3
 8005400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005402:	b10b      	cbz	r3, 8005408 <__sflush_r+0x48>
 8005404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005406:	1ac0      	subs	r0, r0, r3
 8005408:	2300      	movs	r3, #0
 800540a:	4602      	mov	r2, r0
 800540c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800540e:	6a21      	ldr	r1, [r4, #32]
 8005410:	4628      	mov	r0, r5
 8005412:	47b0      	blx	r6
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	d106      	bne.n	8005428 <__sflush_r+0x68>
 800541a:	6829      	ldr	r1, [r5, #0]
 800541c:	291d      	cmp	r1, #29
 800541e:	d82b      	bhi.n	8005478 <__sflush_r+0xb8>
 8005420:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <__sflush_r+0x108>)
 8005422:	410a      	asrs	r2, r1
 8005424:	07d6      	lsls	r6, r2, #31
 8005426:	d427      	bmi.n	8005478 <__sflush_r+0xb8>
 8005428:	2200      	movs	r2, #0
 800542a:	6062      	str	r2, [r4, #4]
 800542c:	04d9      	lsls	r1, r3, #19
 800542e:	6922      	ldr	r2, [r4, #16]
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	d504      	bpl.n	800543e <__sflush_r+0x7e>
 8005434:	1c42      	adds	r2, r0, #1
 8005436:	d101      	bne.n	800543c <__sflush_r+0x7c>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b903      	cbnz	r3, 800543e <__sflush_r+0x7e>
 800543c:	6560      	str	r0, [r4, #84]	; 0x54
 800543e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005440:	602f      	str	r7, [r5, #0]
 8005442:	2900      	cmp	r1, #0
 8005444:	d0c9      	beq.n	80053da <__sflush_r+0x1a>
 8005446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800544a:	4299      	cmp	r1, r3
 800544c:	d002      	beq.n	8005454 <__sflush_r+0x94>
 800544e:	4628      	mov	r0, r5
 8005450:	f7ff fbea 	bl	8004c28 <_free_r>
 8005454:	2000      	movs	r0, #0
 8005456:	6360      	str	r0, [r4, #52]	; 0x34
 8005458:	e7c0      	b.n	80053dc <__sflush_r+0x1c>
 800545a:	2301      	movs	r3, #1
 800545c:	4628      	mov	r0, r5
 800545e:	47b0      	blx	r6
 8005460:	1c41      	adds	r1, r0, #1
 8005462:	d1c8      	bne.n	80053f6 <__sflush_r+0x36>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0c5      	beq.n	80053f6 <__sflush_r+0x36>
 800546a:	2b1d      	cmp	r3, #29
 800546c:	d001      	beq.n	8005472 <__sflush_r+0xb2>
 800546e:	2b16      	cmp	r3, #22
 8005470:	d101      	bne.n	8005476 <__sflush_r+0xb6>
 8005472:	602f      	str	r7, [r5, #0]
 8005474:	e7b1      	b.n	80053da <__sflush_r+0x1a>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	e7ad      	b.n	80053dc <__sflush_r+0x1c>
 8005480:	690f      	ldr	r7, [r1, #16]
 8005482:	2f00      	cmp	r7, #0
 8005484:	d0a9      	beq.n	80053da <__sflush_r+0x1a>
 8005486:	0793      	lsls	r3, r2, #30
 8005488:	680e      	ldr	r6, [r1, #0]
 800548a:	bf08      	it	eq
 800548c:	694b      	ldreq	r3, [r1, #20]
 800548e:	600f      	str	r7, [r1, #0]
 8005490:	bf18      	it	ne
 8005492:	2300      	movne	r3, #0
 8005494:	eba6 0807 	sub.w	r8, r6, r7
 8005498:	608b      	str	r3, [r1, #8]
 800549a:	f1b8 0f00 	cmp.w	r8, #0
 800549e:	dd9c      	ble.n	80053da <__sflush_r+0x1a>
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054a4:	4643      	mov	r3, r8
 80054a6:	463a      	mov	r2, r7
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b0      	blx	r6
 80054ac:	2800      	cmp	r0, #0
 80054ae:	dc06      	bgt.n	80054be <__sflush_r+0xfe>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e78e      	b.n	80053dc <__sflush_r+0x1c>
 80054be:	4407      	add	r7, r0
 80054c0:	eba8 0800 	sub.w	r8, r8, r0
 80054c4:	e7e9      	b.n	800549a <__sflush_r+0xda>
 80054c6:	bf00      	nop
 80054c8:	dfbffffe 	.word	0xdfbffffe

080054cc <_fflush_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	690b      	ldr	r3, [r1, #16]
 80054d0:	4605      	mov	r5, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	b913      	cbnz	r3, 80054dc <_fflush_r+0x10>
 80054d6:	2500      	movs	r5, #0
 80054d8:	4628      	mov	r0, r5
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	b118      	cbz	r0, 80054e6 <_fflush_r+0x1a>
 80054de:	6a03      	ldr	r3, [r0, #32]
 80054e0:	b90b      	cbnz	r3, 80054e6 <_fflush_r+0x1a>
 80054e2:	f7ff f9a1 	bl	8004828 <__sinit>
 80054e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f3      	beq.n	80054d6 <_fflush_r+0xa>
 80054ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054f0:	07d0      	lsls	r0, r2, #31
 80054f2:	d404      	bmi.n	80054fe <_fflush_r+0x32>
 80054f4:	0599      	lsls	r1, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_fflush_r+0x32>
 80054f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fa:	f7ff fb84 	bl	8004c06 <__retarget_lock_acquire_recursive>
 80054fe:	4628      	mov	r0, r5
 8005500:	4621      	mov	r1, r4
 8005502:	f7ff ff5d 	bl	80053c0 <__sflush_r>
 8005506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005508:	07da      	lsls	r2, r3, #31
 800550a:	4605      	mov	r5, r0
 800550c:	d4e4      	bmi.n	80054d8 <_fflush_r+0xc>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	059b      	lsls	r3, r3, #22
 8005512:	d4e1      	bmi.n	80054d8 <_fflush_r+0xc>
 8005514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005516:	f7ff fb77 	bl	8004c08 <__retarget_lock_release_recursive>
 800551a:	e7dd      	b.n	80054d8 <_fflush_r+0xc>

0800551c <__swhatbuf_r>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	460c      	mov	r4, r1
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	2900      	cmp	r1, #0
 8005526:	b096      	sub	sp, #88	; 0x58
 8005528:	4615      	mov	r5, r2
 800552a:	461e      	mov	r6, r3
 800552c:	da0d      	bge.n	800554a <__swhatbuf_r+0x2e>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	bf0c      	ite	eq
 800553a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800553e:	2340      	movne	r3, #64	; 0x40
 8005540:	2000      	movs	r0, #0
 8005542:	6031      	str	r1, [r6, #0]
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	b016      	add	sp, #88	; 0x58
 8005548:	bd70      	pop	{r4, r5, r6, pc}
 800554a:	466a      	mov	r2, sp
 800554c:	f000 f848 	bl	80055e0 <_fstat_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	dbec      	blt.n	800552e <__swhatbuf_r+0x12>
 8005554:	9901      	ldr	r1, [sp, #4]
 8005556:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800555a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800555e:	4259      	negs	r1, r3
 8005560:	4159      	adcs	r1, r3
 8005562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005566:	e7eb      	b.n	8005540 <__swhatbuf_r+0x24>

08005568 <__smakebuf_r>:
 8005568:	898b      	ldrh	r3, [r1, #12]
 800556a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800556c:	079d      	lsls	r5, r3, #30
 800556e:	4606      	mov	r6, r0
 8005570:	460c      	mov	r4, r1
 8005572:	d507      	bpl.n	8005584 <__smakebuf_r+0x1c>
 8005574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	6123      	str	r3, [r4, #16]
 800557c:	2301      	movs	r3, #1
 800557e:	6163      	str	r3, [r4, #20]
 8005580:	b002      	add	sp, #8
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	ab01      	add	r3, sp, #4
 8005586:	466a      	mov	r2, sp
 8005588:	f7ff ffc8 	bl	800551c <__swhatbuf_r>
 800558c:	9900      	ldr	r1, [sp, #0]
 800558e:	4605      	mov	r5, r0
 8005590:	4630      	mov	r0, r6
 8005592:	f7ff fbb5 	bl	8004d00 <_malloc_r>
 8005596:	b948      	cbnz	r0, 80055ac <__smakebuf_r+0x44>
 8005598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559c:	059a      	lsls	r2, r3, #22
 800559e:	d4ef      	bmi.n	8005580 <__smakebuf_r+0x18>
 80055a0:	f023 0303 	bic.w	r3, r3, #3
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	81a3      	strh	r3, [r4, #12]
 80055aa:	e7e3      	b.n	8005574 <__smakebuf_r+0xc>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	9b00      	ldr	r3, [sp, #0]
 80055b8:	6163      	str	r3, [r4, #20]
 80055ba:	9b01      	ldr	r3, [sp, #4]
 80055bc:	6120      	str	r0, [r4, #16]
 80055be:	b15b      	cbz	r3, 80055d8 <__smakebuf_r+0x70>
 80055c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f81d 	bl	8005604 <_isatty_r>
 80055ca:	b128      	cbz	r0, 80055d8 <__smakebuf_r+0x70>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	431d      	orrs	r5, r3
 80055dc:	81a5      	strh	r5, [r4, #12]
 80055de:	e7cf      	b.n	8005580 <__smakebuf_r+0x18>

080055e0 <_fstat_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d07      	ldr	r5, [pc, #28]	; (8005600 <_fstat_r+0x20>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	f000 f96c 	bl	80058ca <_fstat>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	d102      	bne.n	80055fc <_fstat_r+0x1c>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	b103      	cbz	r3, 80055fc <_fstat_r+0x1c>
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	200002cc 	.word	0x200002cc

08005604 <_isatty_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d06      	ldr	r5, [pc, #24]	; (8005620 <_isatty_r+0x1c>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	f000 f969 	bl	80058e6 <_isatty>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_isatty_r+0x1a>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_isatty_r+0x1a>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	200002cc 	.word	0x200002cc

08005624 <_sbrk_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d06      	ldr	r5, [pc, #24]	; (8005640 <_sbrk_r+0x1c>)
 8005628:	2300      	movs	r3, #0
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	f000 f906 	bl	8005840 <_sbrk>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_sbrk_r+0x1a>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_sbrk_r+0x1a>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	200002cc 	.word	0x200002cc

08005644 <findslot>:
 8005644:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <findslot+0x2c>)
 8005646:	b510      	push	{r4, lr}
 8005648:	4604      	mov	r4, r0
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	b118      	cbz	r0, 8005656 <findslot+0x12>
 800564e:	6a03      	ldr	r3, [r0, #32]
 8005650:	b90b      	cbnz	r3, 8005656 <findslot+0x12>
 8005652:	f7ff f8e9 	bl	8004828 <__sinit>
 8005656:	2c13      	cmp	r4, #19
 8005658:	d807      	bhi.n	800566a <findslot+0x26>
 800565a:	4806      	ldr	r0, [pc, #24]	; (8005674 <findslot+0x30>)
 800565c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005660:	3201      	adds	r2, #1
 8005662:	d002      	beq.n	800566a <findslot+0x26>
 8005664:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005668:	bd10      	pop	{r4, pc}
 800566a:	2000      	movs	r0, #0
 800566c:	e7fc      	b.n	8005668 <findslot+0x24>
 800566e:	bf00      	nop
 8005670:	20000064 	.word	0x20000064
 8005674:	200002e0 	.word	0x200002e0

08005678 <error>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	f000 f950 	bl	8005920 <__errno>
 8005680:	2613      	movs	r6, #19
 8005682:	4605      	mov	r5, r0
 8005684:	2700      	movs	r7, #0
 8005686:	4630      	mov	r0, r6
 8005688:	4639      	mov	r1, r7
 800568a:	beab      	bkpt	0x00ab
 800568c:	4606      	mov	r6, r0
 800568e:	602e      	str	r6, [r5, #0]
 8005690:	4620      	mov	r0, r4
 8005692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005694 <checkerror>:
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d101      	bne.n	800569c <checkerror+0x8>
 8005698:	f7ff bfee 	b.w	8005678 <error>
 800569c:	4770      	bx	lr

0800569e <_swiread>:
 800569e:	b530      	push	{r4, r5, lr}
 80056a0:	b085      	sub	sp, #20
 80056a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80056a6:	9203      	str	r2, [sp, #12]
 80056a8:	2406      	movs	r4, #6
 80056aa:	ad01      	add	r5, sp, #4
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	beab      	bkpt	0x00ab
 80056b2:	4604      	mov	r4, r0
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff ffed 	bl	8005694 <checkerror>
 80056ba:	b005      	add	sp, #20
 80056bc:	bd30      	pop	{r4, r5, pc}

080056be <_read>:
 80056be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c0:	4615      	mov	r5, r2
 80056c2:	9101      	str	r1, [sp, #4]
 80056c4:	f7ff ffbe 	bl	8005644 <findslot>
 80056c8:	9901      	ldr	r1, [sp, #4]
 80056ca:	4604      	mov	r4, r0
 80056cc:	b938      	cbnz	r0, 80056de <_read+0x20>
 80056ce:	f000 f927 	bl	8005920 <__errno>
 80056d2:	2309      	movs	r3, #9
 80056d4:	6003      	str	r3, [r0, #0]
 80056d6:	f04f 30ff 	mov.w	r0, #4294967295
 80056da:	b003      	add	sp, #12
 80056dc:	bd30      	pop	{r4, r5, pc}
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	462a      	mov	r2, r5
 80056e2:	f7ff ffdc 	bl	800569e <_swiread>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	d0f7      	beq.n	80056da <_read+0x1c>
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	1a2a      	subs	r2, r5, r0
 80056ee:	4413      	add	r3, r2
 80056f0:	6063      	str	r3, [r4, #4]
 80056f2:	4610      	mov	r0, r2
 80056f4:	e7f1      	b.n	80056da <_read+0x1c>

080056f6 <_swilseek>:
 80056f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f8:	460c      	mov	r4, r1
 80056fa:	4616      	mov	r6, r2
 80056fc:	f7ff ffa2 	bl	8005644 <findslot>
 8005700:	4605      	mov	r5, r0
 8005702:	b940      	cbnz	r0, 8005716 <_swilseek+0x20>
 8005704:	f000 f90c 	bl	8005920 <__errno>
 8005708:	2309      	movs	r3, #9
 800570a:	6003      	str	r3, [r0, #0]
 800570c:	f04f 34ff 	mov.w	r4, #4294967295
 8005710:	4620      	mov	r0, r4
 8005712:	b003      	add	sp, #12
 8005714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005716:	2e02      	cmp	r6, #2
 8005718:	d903      	bls.n	8005722 <_swilseek+0x2c>
 800571a:	f000 f901 	bl	8005920 <__errno>
 800571e:	2316      	movs	r3, #22
 8005720:	e7f3      	b.n	800570a <_swilseek+0x14>
 8005722:	2e01      	cmp	r6, #1
 8005724:	d112      	bne.n	800574c <_swilseek+0x56>
 8005726:	6843      	ldr	r3, [r0, #4]
 8005728:	18e4      	adds	r4, r4, r3
 800572a:	d4f6      	bmi.n	800571a <_swilseek+0x24>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	260a      	movs	r6, #10
 8005730:	e9cd 3400 	strd	r3, r4, [sp]
 8005734:	466f      	mov	r7, sp
 8005736:	4630      	mov	r0, r6
 8005738:	4639      	mov	r1, r7
 800573a:	beab      	bkpt	0x00ab
 800573c:	4606      	mov	r6, r0
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ffa8 	bl	8005694 <checkerror>
 8005744:	2800      	cmp	r0, #0
 8005746:	dbe1      	blt.n	800570c <_swilseek+0x16>
 8005748:	606c      	str	r4, [r5, #4]
 800574a:	e7e1      	b.n	8005710 <_swilseek+0x1a>
 800574c:	2e02      	cmp	r6, #2
 800574e:	6803      	ldr	r3, [r0, #0]
 8005750:	d1ec      	bne.n	800572c <_swilseek+0x36>
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	260c      	movs	r6, #12
 8005756:	466f      	mov	r7, sp
 8005758:	4630      	mov	r0, r6
 800575a:	4639      	mov	r1, r7
 800575c:	beab      	bkpt	0x00ab
 800575e:	4606      	mov	r6, r0
 8005760:	4630      	mov	r0, r6
 8005762:	f7ff ff97 	bl	8005694 <checkerror>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d0d0      	beq.n	800570c <_swilseek+0x16>
 800576a:	4404      	add	r4, r0
 800576c:	e7de      	b.n	800572c <_swilseek+0x36>

0800576e <_lseek>:
 800576e:	f7ff bfc2 	b.w	80056f6 <_swilseek>

08005772 <_swiwrite>:
 8005772:	b530      	push	{r4, r5, lr}
 8005774:	b085      	sub	sp, #20
 8005776:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800577a:	9203      	str	r2, [sp, #12]
 800577c:	2405      	movs	r4, #5
 800577e:	ad01      	add	r5, sp, #4
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	beab      	bkpt	0x00ab
 8005786:	4604      	mov	r4, r0
 8005788:	4620      	mov	r0, r4
 800578a:	f7ff ff83 	bl	8005694 <checkerror>
 800578e:	b005      	add	sp, #20
 8005790:	bd30      	pop	{r4, r5, pc}

08005792 <_write>:
 8005792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005794:	4615      	mov	r5, r2
 8005796:	9101      	str	r1, [sp, #4]
 8005798:	f7ff ff54 	bl	8005644 <findslot>
 800579c:	9901      	ldr	r1, [sp, #4]
 800579e:	4604      	mov	r4, r0
 80057a0:	b930      	cbnz	r0, 80057b0 <_write+0x1e>
 80057a2:	f000 f8bd 	bl	8005920 <__errno>
 80057a6:	2309      	movs	r3, #9
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	e012      	b.n	80057d6 <_write+0x44>
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	462a      	mov	r2, r5
 80057b4:	f7ff ffdd 	bl	8005772 <_swiwrite>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	dbf6      	blt.n	80057aa <_write+0x18>
 80057bc:	6862      	ldr	r2, [r4, #4]
 80057be:	1a2b      	subs	r3, r5, r0
 80057c0:	441a      	add	r2, r3
 80057c2:	42a8      	cmp	r0, r5
 80057c4:	6062      	str	r2, [r4, #4]
 80057c6:	d105      	bne.n	80057d4 <_write+0x42>
 80057c8:	2000      	movs	r0, #0
 80057ca:	b003      	add	sp, #12
 80057cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d0:	f7ff bf52 	b.w	8005678 <error>
 80057d4:	4618      	mov	r0, r3
 80057d6:	b003      	add	sp, #12
 80057d8:	bd30      	pop	{r4, r5, pc}

080057da <_swiclose>:
 80057da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057dc:	2402      	movs	r4, #2
 80057de:	9001      	str	r0, [sp, #4]
 80057e0:	ad01      	add	r5, sp, #4
 80057e2:	4620      	mov	r0, r4
 80057e4:	4629      	mov	r1, r5
 80057e6:	beab      	bkpt	0x00ab
 80057e8:	4604      	mov	r4, r0
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ff52 	bl	8005694 <checkerror>
 80057f0:	b003      	add	sp, #12
 80057f2:	bd30      	pop	{r4, r5, pc}

080057f4 <_close>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	f7ff ff24 	bl	8005644 <findslot>
 80057fc:	4604      	mov	r4, r0
 80057fe:	b930      	cbnz	r0, 800580e <_close+0x1a>
 8005800:	f000 f88e 	bl	8005920 <__errno>
 8005804:	2309      	movs	r3, #9
 8005806:	6003      	str	r3, [r0, #0]
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	3d01      	subs	r5, #1
 8005810:	2d01      	cmp	r5, #1
 8005812:	d809      	bhi.n	8005828 <_close+0x34>
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <_close+0x48>)
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d104      	bne.n	8005828 <_close+0x34>
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	6003      	str	r3, [r0, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e7f1      	b.n	800580c <_close+0x18>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	f7ff ffd6 	bl	80057da <_swiclose>
 800582e:	2800      	cmp	r0, #0
 8005830:	d1ec      	bne.n	800580c <_close+0x18>
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	e7e8      	b.n	800580c <_close+0x18>
 800583a:	bf00      	nop
 800583c:	200002e0 	.word	0x200002e0

08005840 <_sbrk>:
 8005840:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <_sbrk+0x38>)
 8005842:	6811      	ldr	r1, [r2, #0]
 8005844:	b510      	push	{r4, lr}
 8005846:	4603      	mov	r3, r0
 8005848:	b909      	cbnz	r1, 800584e <_sbrk+0xe>
 800584a:	490c      	ldr	r1, [pc, #48]	; (800587c <_sbrk+0x3c>)
 800584c:	6011      	str	r1, [r2, #0]
 800584e:	6810      	ldr	r0, [r2, #0]
 8005850:	4669      	mov	r1, sp
 8005852:	4403      	add	r3, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	d806      	bhi.n	8005866 <_sbrk+0x26>
 8005858:	4909      	ldr	r1, [pc, #36]	; (8005880 <_sbrk+0x40>)
 800585a:	4c0a      	ldr	r4, [pc, #40]	; (8005884 <_sbrk+0x44>)
 800585c:	6809      	ldr	r1, [r1, #0]
 800585e:	42a1      	cmp	r1, r4
 8005860:	d008      	beq.n	8005874 <_sbrk+0x34>
 8005862:	428b      	cmp	r3, r1
 8005864:	d906      	bls.n	8005874 <_sbrk+0x34>
 8005866:	f000 f85b 	bl	8005920 <__errno>
 800586a:	230c      	movs	r3, #12
 800586c:	6003      	str	r3, [r0, #0]
 800586e:	f04f 30ff 	mov.w	r0, #4294967295
 8005872:	bd10      	pop	{r4, pc}
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e7fc      	b.n	8005872 <_sbrk+0x32>
 8005878:	200002dc 	.word	0x200002dc
 800587c:	20000380 	.word	0x20000380
 8005880:	20000068 	.word	0x20000068
 8005884:	cafedead 	.word	0xcafedead

08005888 <_swistat>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	460c      	mov	r4, r1
 800588c:	f7ff feda 	bl	8005644 <findslot>
 8005890:	4605      	mov	r5, r0
 8005892:	b930      	cbnz	r0, 80058a2 <_swistat+0x1a>
 8005894:	f000 f844 	bl	8005920 <__errno>
 8005898:	2309      	movs	r3, #9
 800589a:	6003      	str	r3, [r0, #0]
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	6863      	ldr	r3, [r4, #4]
 80058a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80058b0:	260c      	movs	r6, #12
 80058b2:	4630      	mov	r0, r6
 80058b4:	4629      	mov	r1, r5
 80058b6:	beab      	bkpt	0x00ab
 80058b8:	4605      	mov	r5, r0
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff feea 	bl	8005694 <checkerror>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	bf1c      	itt	ne
 80058c4:	6120      	strne	r0, [r4, #16]
 80058c6:	2000      	movne	r0, #0
 80058c8:	e7ea      	b.n	80058a0 <_swistat+0x18>

080058ca <_fstat>:
 80058ca:	460b      	mov	r3, r1
 80058cc:	b510      	push	{r4, lr}
 80058ce:	2100      	movs	r1, #0
 80058d0:	4604      	mov	r4, r0
 80058d2:	2258      	movs	r2, #88	; 0x58
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff f923 	bl	8004b20 <memset>
 80058da:	4601      	mov	r1, r0
 80058dc:	4620      	mov	r0, r4
 80058de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e2:	f7ff bfd1 	b.w	8005888 <_swistat>

080058e6 <_isatty>:
 80058e6:	b570      	push	{r4, r5, r6, lr}
 80058e8:	f7ff feac 	bl	8005644 <findslot>
 80058ec:	2509      	movs	r5, #9
 80058ee:	4604      	mov	r4, r0
 80058f0:	b920      	cbnz	r0, 80058fc <_isatty+0x16>
 80058f2:	f000 f815 	bl	8005920 <__errno>
 80058f6:	6005      	str	r5, [r0, #0]
 80058f8:	4620      	mov	r0, r4
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	4628      	mov	r0, r5
 80058fe:	4621      	mov	r1, r4
 8005900:	beab      	bkpt	0x00ab
 8005902:	4604      	mov	r4, r0
 8005904:	2c01      	cmp	r4, #1
 8005906:	d0f7      	beq.n	80058f8 <_isatty+0x12>
 8005908:	f000 f80a 	bl	8005920 <__errno>
 800590c:	2400      	movs	r4, #0
 800590e:	4605      	mov	r5, r0
 8005910:	2613      	movs	r6, #19
 8005912:	4630      	mov	r0, r6
 8005914:	4621      	mov	r1, r4
 8005916:	beab      	bkpt	0x00ab
 8005918:	4606      	mov	r6, r0
 800591a:	602e      	str	r6, [r5, #0]
 800591c:	e7ec      	b.n	80058f8 <_isatty+0x12>
	...

08005920 <__errno>:
 8005920:	4b01      	ldr	r3, [pc, #4]	; (8005928 <__errno+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000064 	.word	0x20000064

0800592c <_init>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr

08005938 <_fini>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr
