
BNO055_attempt_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08006c00  08006c00  00016c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007210  08007210  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000274  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000763a  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000171a  00000000  00000000  00027899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000800  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000061a  00000000  00000000  000297b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020978  00000000  00000000  00029dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a67e  00000000  00000000  0004a74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3e1a  00000000  00000000  00054dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000034c4  00000000  00000000  00118be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0011c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006be4 	.word	0x08006be4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08006be4 	.word	0x08006be4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2007      	movs	r0, #7
 8000eb4:	f000 fbc4 	bl	8001640 <bno055_writeData>
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	203d      	movs	r0, #61	; 0x3d
 8000ed0:	f000 fbb6 	bl	8001640 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000eda:	2013      	movs	r0, #19
 8000edc:	f000 fba4 	bl	8001628 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ee0:	e002      	b.n	8000ee8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ee2:	2007      	movs	r0, #7
 8000ee4:	f000 fba0 	bl	8001628 <bno055_delay>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ffe3 	bl	8000ec0 <bno055_setOperationMode>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f02:	200c      	movs	r0, #12
 8000f04:	f7ff ffdc 	bl	8000ec0 <bno055_setOperationMode>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f10:	2120      	movs	r1, #32
 8000f12:	203f      	movs	r0, #63	; 0x3f
 8000f14:	f000 fb94 	bl	8001640 <bno055_writeData>
  bno055_delay(700);
 8000f18:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f1c:	f000 fb84 	bl	8001628 <bno055_delay>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f2a:	f7ff ffef 	bl	8000f0c <bno055_reset>

  uint8_t id = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 fc6d 	bl	8001818 <bno055_readData>
  if (id != BNO055_ID) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2ba0      	cmp	r3, #160	; 0xa0
 8000f42:	d004      	beq.n	8000f4e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <bno055_setup+0x4c>)
 8000f4a:	f003 fb4b 	bl	80045e4 <iprintf>
  }
  bno055_setPage(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffa8 	bl	8000ea4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	203f      	movs	r0, #63	; 0x3f
 8000f58:	f000 fb72 	bl	8001640 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f5c:	f7ff ffc8 	bl	8000ef0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f000 fb61 	bl	8001628 <bno055_delay>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08006c00 	.word	0x08006c00

08000f74 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f78:	b09e      	sub	sp, #120	; 0x78
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff8e 	bl	8000ea4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d108      	bne.n	8000fa2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000f90:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fc3c 	bl	8001818 <bno055_readData>
 8000fa0:	e007      	b.n	8000fb2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000fa2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000faa:	2206      	movs	r2, #6
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc33 	bl	8001818 <bno055_readData>

  double scale = 1;
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <bno055_getVector+0x270>)
 8000fb8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc0:	2b0e      	cmp	r3, #14
 8000fc2:	d109      	bne.n	8000fd8 <bno055_getVector+0x64>
    scale = magScale;
 8000fc4:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <bno055_getVector+0x274>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa9b 	bl	8000504 <__aeabi_ui2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000fd6:	e03e      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d007      	beq.n	8000ff0 <bno055_getVector+0x7c>
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe4:	2b28      	cmp	r3, #40	; 0x28
 8000fe6:	d003      	beq.n	8000ff0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fec:	2b2e      	cmp	r3, #46	; 0x2e
 8000fee:	d109      	bne.n	8001004 <bno055_getVector+0x90>
    scale = accelScale;
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <bno055_getVector+0x278>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa85 	bl	8000504 <__aeabi_ui2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001002:	e028      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001008:	2b14      	cmp	r3, #20
 800100a:	d109      	bne.n	8001020 <bno055_getVector+0xac>
    scale = angularRateScale;
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <bno055_getVector+0x27c>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa77 	bl	8000504 <__aeabi_ui2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800101e:	e01a      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001024:	2b1a      	cmp	r3, #26
 8001026:	d109      	bne.n	800103c <bno055_getVector+0xc8>
    scale = eulerScale;
 8001028:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <bno055_getVector+0x280>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa69 	bl	8000504 <__aeabi_ui2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800103a:	e00c      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001040:	2b20      	cmp	r3, #32
 8001042:	d108      	bne.n	8001056 <bno055_getVector+0xe2>
    scale = quaScale;
 8001044:	4b6c      	ldr	r3, [pc, #432]	; (80011f8 <bno055_getVector+0x284>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa5b 	bl	8000504 <__aeabi_ui2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105a:	2220      	movs	r2, #32
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fc06 	bl	8004870 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001068:	2b20      	cmp	r3, #32
 800106a:	d150      	bne.n	800110e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800106c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa50 	bl	8000524 <__aeabi_i2d>
 8001084:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001088:	f7ff fbe0 	bl	800084c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001094:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa3c 	bl	8000524 <__aeabi_i2d>
 80010ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010b0:	f7ff fbcc 	bl	800084c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa28 	bl	8000524 <__aeabi_i2d>
 80010d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010d8:	f7ff fbb8 	bl	800084c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80010e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa14 	bl	8000524 <__aeabi_i2d>
 80010fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001100:	f7ff fba4 	bl	800084c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800110c:	e03b      	b.n	8001186 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800110e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ff 	bl	8000524 <__aeabi_i2d>
 8001126:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800112a:	f7ff fb8f 	bl	800084c <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001136:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800115e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9d7 	bl	8000524 <__aeabi_i2d>
 8001176:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800117a:	f7ff fb67 	bl	800084c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001186:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800118a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001192:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800119a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800119e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80011a2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011aa:	ec49 8b14 	vmov	d4, r8, r9
 80011ae:	ec45 4b15 	vmov	d5, r4, r5
 80011b2:	ec41 0b16 	vmov	d6, r0, r1
 80011b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ba:	eeb0 0a44 	vmov.f32	s0, s8
 80011be:	eef0 0a64 	vmov.f32	s1, s9
 80011c2:	eeb0 1a45 	vmov.f32	s2, s10
 80011c6:	eef0 1a65 	vmov.f32	s3, s11
 80011ca:	eeb0 2a46 	vmov.f32	s4, s12
 80011ce:	eef0 2a66 	vmov.f32	s5, s13
 80011d2:	eeb0 3a47 	vmov.f32	s6, s14
 80011d6:	eef0 3a67 	vmov.f32	s7, s15
 80011da:	3778      	adds	r7, #120	; 0x78
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011e2:	bf00      	nop
 80011e4:	3ff00000 	.word	0x3ff00000
 80011e8:	20000006 	.word	0x20000006
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000002 	.word	0x20000002
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000008 	.word	0x20000008

080011fc <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80011fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001200:	b090      	sub	sp, #64	; 0x40
 8001202:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001204:	201a      	movs	r0, #26
 8001206:	f7ff feb5 	bl	8000f74 <bno055_getVector>
 800120a:	eeb0 4a40 	vmov.f32	s8, s0
 800120e:	eef0 4a60 	vmov.f32	s9, s1
 8001212:	eeb0 5a41 	vmov.f32	s10, s2
 8001216:	eef0 5a61 	vmov.f32	s11, s3
 800121a:	eeb0 6a42 	vmov.f32	s12, s4
 800121e:	eef0 6a62 	vmov.f32	s13, s5
 8001222:	eeb0 7a43 	vmov.f32	s14, s6
 8001226:	eef0 7a63 	vmov.f32	s15, s7
 800122a:	ed87 4b08 	vstr	d4, [r7, #32]
 800122e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001232:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001236:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800123a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800123e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001242:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001246:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800124a:	ec49 8b14 	vmov	d4, r8, r9
 800124e:	ec45 4b15 	vmov	d5, r4, r5
 8001252:	ec41 0b16 	vmov	d6, r0, r1
 8001256:	ec43 2b17 	vmov	d7, r2, r3
}
 800125a:	eeb0 0a44 	vmov.f32	s0, s8
 800125e:	eef0 0a64 	vmov.f32	s1, s9
 8001262:	eeb0 1a45 	vmov.f32	s2, s10
 8001266:	eef0 1a65 	vmov.f32	s3, s11
 800126a:	eeb0 2a46 	vmov.f32	s4, s12
 800126e:	eef0 2a66 	vmov.f32	s5, s13
 8001272:	eeb0 3a47 	vmov.f32	s6, s14
 8001276:	eef0 3a67 	vmov.f32	s7, s15
 800127a:	3740      	adds	r7, #64	; 0x40
 800127c:	46bd      	mov	sp, r7
 800127e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001284 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	4b99      	ldr	r3, [pc, #612]	; (8001504 <MX_GPIO_Init+0x280>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a98      	ldr	r2, [pc, #608]	; (8001504 <MX_GPIO_Init+0x280>)
 80012a4:	f043 0310 	orr.w	r3, r3, #16
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b96      	ldr	r3, [pc, #600]	; (8001504 <MX_GPIO_Init+0x280>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	4b92      	ldr	r3, [pc, #584]	; (8001504 <MX_GPIO_Init+0x280>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a91      	ldr	r2, [pc, #580]	; (8001504 <MX_GPIO_Init+0x280>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <MX_GPIO_Init+0x280>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <MX_GPIO_Init+0x280>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a8a      	ldr	r2, [pc, #552]	; (8001504 <MX_GPIO_Init+0x280>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <MX_GPIO_Init+0x280>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b84      	ldr	r3, [pc, #528]	; (8001504 <MX_GPIO_Init+0x280>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a83      	ldr	r2, [pc, #524]	; (8001504 <MX_GPIO_Init+0x280>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b81      	ldr	r3, [pc, #516]	; (8001504 <MX_GPIO_Init+0x280>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b7d      	ldr	r3, [pc, #500]	; (8001504 <MX_GPIO_Init+0x280>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a7c      	ldr	r2, [pc, #496]	; (8001504 <MX_GPIO_Init+0x280>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <MX_GPIO_Init+0x280>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <MX_GPIO_Init+0x280>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a75      	ldr	r2, [pc, #468]	; (8001504 <MX_GPIO_Init+0x280>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b73      	ldr	r3, [pc, #460]	; (8001504 <MX_GPIO_Init+0x280>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2108      	movs	r1, #8
 8001346:	4870      	ldr	r0, [pc, #448]	; (8001508 <MX_GPIO_Init+0x284>)
 8001348:	f000 ff58 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2101      	movs	r1, #1
 8001350:	486e      	ldr	r0, [pc, #440]	; (800150c <MX_GPIO_Init+0x288>)
 8001352:	f000 ff53 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001356:	2200      	movs	r2, #0
 8001358:	f24f 0110 	movw	r1, #61456	; 0xf010
 800135c:	486c      	ldr	r0, [pc, #432]	; (8001510 <MX_GPIO_Init+0x28c>)
 800135e:	f000 ff4d 	bl	80021fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001362:	2308      	movs	r3, #8
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4863      	ldr	r0, [pc, #396]	; (8001508 <MX_GPIO_Init+0x284>)
 800137a:	f000 fda3 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	485d      	ldr	r0, [pc, #372]	; (800150c <MX_GPIO_Init+0x288>)
 8001396:	f000 fd95 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800139a:	2308      	movs	r3, #8
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013aa:	2305      	movs	r3, #5
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4855      	ldr	r0, [pc, #340]	; (800150c <MX_GPIO_Init+0x288>)
 80013b6:	f000 fd85 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4851      	ldr	r0, [pc, #324]	; (8001514 <MX_GPIO_Init+0x290>)
 80013d0:	f000 fd78 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013d4:	2310      	movs	r3, #16
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e4:	2306      	movs	r3, #6
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4849      	ldr	r0, [pc, #292]	; (8001514 <MX_GPIO_Init+0x290>)
 80013f0:	f000 fd68 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013f4:	23e0      	movs	r3, #224	; 0xe0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001404:	2305      	movs	r3, #5
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4841      	ldr	r0, [pc, #260]	; (8001514 <MX_GPIO_Init+0x290>)
 8001410:	f000 fd58 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001414:	2304      	movs	r3, #4
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	483c      	ldr	r0, [pc, #240]	; (8001518 <MX_GPIO_Init+0x294>)
 8001428:	f000 fd4c 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800142c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143e:	2305      	movs	r3, #5
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4833      	ldr	r0, [pc, #204]	; (8001518 <MX_GPIO_Init+0x294>)
 800144a:	f000 fd3b 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800144e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001452:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	482a      	ldr	r0, [pc, #168]	; (8001510 <MX_GPIO_Init+0x28c>)
 8001468:	f000 fd2c 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800146c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147e:	2306      	movs	r3, #6
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4820      	ldr	r0, [pc, #128]	; (800150c <MX_GPIO_Init+0x288>)
 800148a:	f000 fd1b 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800148e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <MX_GPIO_Init+0x290>)
 80014a4:	f000 fd0e 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80014a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014ba:	230a      	movs	r3, #10
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <MX_GPIO_Init+0x290>)
 80014c6:	f000 fcfd 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014ca:	2320      	movs	r3, #32
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_GPIO_Init+0x28c>)
 80014de:	f000 fcf1 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_GPIO_Init+0x284>)
 80014f8:	f000 fce4 	bl	8001ec4 <HAL_GPIO_Init>

}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40021000 	.word	0x40021000
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400

0800151c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_I2C1_Init+0x50>)
 800155a:	f000 fe83 	bl	8002264 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 fa9e 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000208 	.word	0x20000208
 8001570:	40005400 	.word	0x40005400
 8001574:	00061a80 	.word	0x00061a80

08001578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12c      	bne.n	80015f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015bc:	2312      	movs	r3, #18
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c8:	2304      	movs	r3, #4
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_I2C_MspInit+0x8c>)
 80015d4:	f000 fc76 	bl	8001ec4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40005400 	.word	0x40005400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <bno055_assignI2C>:
#include "bno055.h"

  I2C_HandleTypeDef *_bno055_i2c_port;

  void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device)
  {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    _bno055_i2c_port = hi2c_device;
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <bno055_assignI2C+0x1c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  }
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000025c 	.word	0x2000025c

08001628 <bno055_delay>:

  void bno055_delay(int time)
  {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
    osDelay(time);
#else
  HAL_Delay(time);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fb3c 	bl	8001cb0 <HAL_Delay>
#endif
  }
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <bno055_writeData>:

  void bno055_writeData(uint8_t reg, uint8_t data)
  {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
    uint8_t txdata[2] = {reg, data};
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	733b      	strb	r3, [r7, #12]
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	737b      	strb	r3, [r7, #13]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <bno055_writeData+0x184>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	f107 020c 	add.w	r2, r7, #12
 8001660:	230a      	movs	r3, #10
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	2150      	movs	r1, #80	; 0x50
 8001668:	f000 ff40 	bl	80024ec <HAL_I2C_Master_Transmit>
 800166c:	4603      	mov	r3, r0
 800166e:	75fb      	strb	r3, [r7, #23]
                                     txdata, sizeof(txdata), 10);
    if (status == HAL_OK)
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80a0 	beq.w	80017b8 <bno055_writeData+0x178>
    {
      return;
    }

    if (status == HAL_ERROR)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d103      	bne.n	8001686 <bno055_writeData+0x46>
    {
      printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800167e:	4852      	ldr	r0, [pc, #328]	; (80017c8 <bno055_writeData+0x188>)
 8001680:	f003 f816 	bl	80046b0 <puts>
 8001684:	e012      	b.n	80016ac <bno055_writeData+0x6c>
    }
    else if (status == HAL_TIMEOUT)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d103      	bne.n	8001694 <bno055_writeData+0x54>
    {
      printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800168c:	484f      	ldr	r0, [pc, #316]	; (80017cc <bno055_writeData+0x18c>)
 800168e:	f003 f80f 	bl	80046b0 <puts>
 8001692:	e00b      	b.n	80016ac <bno055_writeData+0x6c>
    }
    else if (status == HAL_BUSY)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d103      	bne.n	80016a2 <bno055_writeData+0x62>
    {
      printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800169a:	484d      	ldr	r0, [pc, #308]	; (80017d0 <bno055_writeData+0x190>)
 800169c:	f003 f808 	bl	80046b0 <puts>
 80016a0:	e004      	b.n	80016ac <bno055_writeData+0x6c>
    }
    else
    {
      printf("Unknown status data %d", status);
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	4619      	mov	r1, r3
 80016a6:	484b      	ldr	r0, [pc, #300]	; (80017d4 <bno055_writeData+0x194>)
 80016a8:	f002 ff9c 	bl	80045e4 <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80016ac:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <bno055_writeData+0x184>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fa59 	bl	8002b68 <HAL_I2C_GetError>
 80016b6:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d07e      	beq.n	80017bc <bno055_writeData+0x17c>
    {
      return;
    }
    else if (error == HAL_I2C_ERROR_BERR)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d103      	bne.n	80016cc <bno055_writeData+0x8c>
    {
      printf("HAL_I2C_ERROR_BERR\r\n");
 80016c4:	4844      	ldr	r0, [pc, #272]	; (80017d8 <bno055_writeData+0x198>)
 80016c6:	f002 fff3 	bl	80046b0 <puts>
 80016ca:	e021      	b.n	8001710 <bno055_writeData+0xd0>
    }
    else if (error == HAL_I2C_ERROR_ARLO)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d103      	bne.n	80016da <bno055_writeData+0x9a>
    {
      printf("HAL_I2C_ERROR_ARLO\r\n");
 80016d2:	4842      	ldr	r0, [pc, #264]	; (80017dc <bno055_writeData+0x19c>)
 80016d4:	f002 ffec 	bl	80046b0 <puts>
 80016d8:	e01a      	b.n	8001710 <bno055_writeData+0xd0>
    }
    else if (error == HAL_I2C_ERROR_AF)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d103      	bne.n	80016e8 <bno055_writeData+0xa8>
    {
      printf("HAL_I2C_ERROR_AF\r\n");
 80016e0:	483f      	ldr	r0, [pc, #252]	; (80017e0 <bno055_writeData+0x1a0>)
 80016e2:	f002 ffe5 	bl	80046b0 <puts>
 80016e6:	e013      	b.n	8001710 <bno055_writeData+0xd0>
    }
    else if (error == HAL_I2C_ERROR_OVR)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d103      	bne.n	80016f6 <bno055_writeData+0xb6>
    {
      printf("HAL_I2C_ERROR_OVR\r\n");
 80016ee:	483d      	ldr	r0, [pc, #244]	; (80017e4 <bno055_writeData+0x1a4>)
 80016f0:	f002 ffde 	bl	80046b0 <puts>
 80016f4:	e00c      	b.n	8001710 <bno055_writeData+0xd0>
    }
    else if (error == HAL_I2C_ERROR_DMA)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d103      	bne.n	8001704 <bno055_writeData+0xc4>
    {
      printf("HAL_I2C_ERROR_DMA\r\n");
 80016fc:	483a      	ldr	r0, [pc, #232]	; (80017e8 <bno055_writeData+0x1a8>)
 80016fe:	f002 ffd7 	bl	80046b0 <puts>
 8001702:	e005      	b.n	8001710 <bno055_writeData+0xd0>
    }
    else if (error == HAL_I2C_ERROR_TIMEOUT)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b20      	cmp	r3, #32
 8001708:	d102      	bne.n	8001710 <bno055_writeData+0xd0>
    {
      printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800170a:	4838      	ldr	r0, [pc, #224]	; (80017ec <bno055_writeData+0x1ac>)
 800170c:	f002 ffd0 	bl	80046b0 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <bno055_writeData+0x184>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fa19 	bl	8002b4c <HAL_I2C_GetState>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <bno055_writeData+0xec>
    {
      printf("HAL_I2C_STATE_RESET\r\n");
 8001724:	4832      	ldr	r0, [pc, #200]	; (80017f0 <bno055_writeData+0x1b0>)
 8001726:	f002 ffc3 	bl	80046b0 <puts>
 800172a:	e048      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_READY)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d103      	bne.n	800173a <bno055_writeData+0xfa>
    {
      printf("HAL_I2C_STATE_RESET\r\n");
 8001732:	482f      	ldr	r0, [pc, #188]	; (80017f0 <bno055_writeData+0x1b0>)
 8001734:	f002 ffbc 	bl	80046b0 <puts>
 8001738:	e041      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_BUSY)
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b24      	cmp	r3, #36	; 0x24
 800173e:	d103      	bne.n	8001748 <bno055_writeData+0x108>
    {
      printf("HAL_I2C_STATE_BUSY\r\n");
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <bno055_writeData+0x1b4>)
 8001742:	f002 ffb5 	bl	80046b0 <puts>
 8001746:	e03a      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_BUSY_TX)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b21      	cmp	r3, #33	; 0x21
 800174c:	d103      	bne.n	8001756 <bno055_writeData+0x116>
    {
      printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800174e:	482a      	ldr	r0, [pc, #168]	; (80017f8 <bno055_writeData+0x1b8>)
 8001750:	f002 ffae 	bl	80046b0 <puts>
 8001754:	e033      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_BUSY_RX)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b22      	cmp	r3, #34	; 0x22
 800175a:	d103      	bne.n	8001764 <bno055_writeData+0x124>
    {
      printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800175c:	4827      	ldr	r0, [pc, #156]	; (80017fc <bno055_writeData+0x1bc>)
 800175e:	f002 ffa7 	bl	80046b0 <puts>
 8001762:	e02c      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_LISTEN)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b28      	cmp	r3, #40	; 0x28
 8001768:	d103      	bne.n	8001772 <bno055_writeData+0x132>
    {
      printf("HAL_I2C_STATE_LISTEN\r\n");
 800176a:	4825      	ldr	r0, [pc, #148]	; (8001800 <bno055_writeData+0x1c0>)
 800176c:	f002 ffa0 	bl	80046b0 <puts>
 8001770:	e025      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b29      	cmp	r3, #41	; 0x29
 8001776:	d103      	bne.n	8001780 <bno055_writeData+0x140>
    {
      printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001778:	4822      	ldr	r0, [pc, #136]	; (8001804 <bno055_writeData+0x1c4>)
 800177a:	f002 ff99 	bl	80046b0 <puts>
 800177e:	e01e      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b2a      	cmp	r3, #42	; 0x2a
 8001784:	d103      	bne.n	800178e <bno055_writeData+0x14e>
    {
      printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001786:	4820      	ldr	r0, [pc, #128]	; (8001808 <bno055_writeData+0x1c8>)
 8001788:	f002 ff92 	bl	80046b0 <puts>
 800178c:	e017      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_ABORT)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b60      	cmp	r3, #96	; 0x60
 8001792:	d103      	bne.n	800179c <bno055_writeData+0x15c>
    {
      printf("HAL_I2C_STATE_ABORT\r\n");
 8001794:	481d      	ldr	r0, [pc, #116]	; (800180c <bno055_writeData+0x1cc>)
 8001796:	f002 ff8b 	bl	80046b0 <puts>
 800179a:	e010      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_TIMEOUT)
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2ba0      	cmp	r3, #160	; 0xa0
 80017a0:	d103      	bne.n	80017aa <bno055_writeData+0x16a>
    {
      printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80017a2:	481b      	ldr	r0, [pc, #108]	; (8001810 <bno055_writeData+0x1d0>)
 80017a4:	f002 ff84 	bl	80046b0 <puts>
 80017a8:	e009      	b.n	80017be <bno055_writeData+0x17e>
    }
    else if (state == HAL_I2C_STATE_ERROR)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2be0      	cmp	r3, #224	; 0xe0
 80017ae:	d106      	bne.n	80017be <bno055_writeData+0x17e>
    {
      printf("HAL_I2C_STATE_ERROR\r\n");
 80017b0:	4818      	ldr	r0, [pc, #96]	; (8001814 <bno055_writeData+0x1d4>)
 80017b2:	f002 ff7d 	bl	80046b0 <puts>
 80017b6:	e002      	b.n	80017be <bno055_writeData+0x17e>
      return;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <bno055_writeData+0x17e>
      return;
 80017bc:	bf00      	nop
    }
    // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
    // return;
  }
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000025c 	.word	0x2000025c
 80017c8:	08006c3c 	.word	0x08006c3c
 80017cc:	08006c60 	.word	0x08006c60
 80017d0:	08006c88 	.word	0x08006c88
 80017d4:	08006cac 	.word	0x08006cac
 80017d8:	08006cc4 	.word	0x08006cc4
 80017dc:	08006cd8 	.word	0x08006cd8
 80017e0:	08006cec 	.word	0x08006cec
 80017e4:	08006d00 	.word	0x08006d00
 80017e8:	08006d14 	.word	0x08006d14
 80017ec:	08006d28 	.word	0x08006d28
 80017f0:	08006d40 	.word	0x08006d40
 80017f4:	08006d58 	.word	0x08006d58
 80017f8:	08006d6c 	.word	0x08006d6c
 80017fc:	08006d84 	.word	0x08006d84
 8001800:	08006d9c 	.word	0x08006d9c
 8001804:	08006db4 	.word	0x08006db4
 8001808:	08006dd4 	.word	0x08006dd4
 800180c:	08006df4 	.word	0x08006df4
 8001810:	08006e0c 	.word	0x08006e0c
 8001814:	08006e24 	.word	0x08006e24

08001818 <bno055_readData>:

  void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len)
  {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <bno055_readData+0x40>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	1dfa      	adds	r2, r7, #7
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	2150      	movs	r1, #80	; 0x50
 8001836:	f000 fe59 	bl	80024ec <HAL_I2C_Master_Transmit>
                            100);
    HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <bno055_readData+0x40>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	b29b      	uxth	r3, r3
 8001842:	2264      	movs	r2, #100	; 0x64
 8001844:	9200      	str	r2, [sp, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	2150      	movs	r1, #80	; 0x50
 800184a:	f000 ff4d 	bl	80026e8 <HAL_I2C_Master_Receive>
                           100);
    // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
    // I2C_MEMADD_SIZE_8BIT, data, len, 100);
  }
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000025c 	.word	0x2000025c
 800185c:	00000000 	.word	0x00000000

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8001866:	f005 f911 	bl	8006a8c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f000 f9af 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f8af 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f7ff fd07 	bl	8001284 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001876:	f7ff fe51 	bl	800151c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 800187a:	484f      	ldr	r0, [pc, #316]	; (80019b8 <main+0x158>)
 800187c:	f7ff fec4 	bl	8001608 <bno055_assignI2C>
  bno055_setup();
 8001880:	f7ff fb50 	bl	8000f24 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001884:	f7ff fb3b 	bl	8000efe <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_vector_t v = bno055_getVectorEuler();
 8001888:	f7ff fcb8 	bl	80011fc <bno055_getVectorEuler>
 800188c:	eeb0 4a40 	vmov.f32	s8, s0
 8001890:	eef0 4a60 	vmov.f32	s9, s1
 8001894:	eeb0 5a41 	vmov.f32	s10, s2
 8001898:	eef0 5a61 	vmov.f32	s11, s3
 800189c:	eeb0 6a42 	vmov.f32	s12, s4
 80018a0:	eef0 6a62 	vmov.f32	s13, s5
 80018a4:	eeb0 7a43 	vmov.f32	s14, s6
 80018a8:	eef0 7a63 	vmov.f32	s15, s7
 80018ac:	ed87 4b00 	vstr	d4, [r7]
 80018b0:	ed87 5b02 	vstr	d5, [r7, #8]
 80018b4:	ed87 6b04 	vstr	d6, [r7, #16]
 80018b8:	ed87 7b06 	vstr	d7, [r7, #24]
	     printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
 80018bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018cc:	e9cd 2300 	strd	r2, r3, [sp]
 80018d0:	4622      	mov	r2, r4
 80018d2:	462b      	mov	r3, r5
 80018d4:	4839      	ldr	r0, [pc, #228]	; (80019bc <main+0x15c>)
 80018d6:	f002 fe85 	bl	80045e4 <iprintf>

	     if (v.x>0 && v.x<90)
 80018da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	f7ff f917 	bl	8000b18 <__aeabi_dcmpgt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00e      	beq.n	800190e <main+0xae>
 80018f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <main+0x160>)
 80018fa:	f7ff f8ef 	bl	8000adc <__aeabi_dcmplt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <main+0xae>
	    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	482e      	ldr	r0, [pc, #184]	; (80019c4 <main+0x164>)
 800190a:	f000 fc90 	bl	800222e <HAL_GPIO_TogglePin>

	     if (v.x>90 && v.x<180)
 800190e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <main+0x160>)
 8001918:	f7ff f8fe 	bl	8000b18 <__aeabi_dcmpgt>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00e      	beq.n	8001940 <main+0xe0>
 8001922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <main+0x168>)
 800192c:	f7ff f8d6 	bl	8000adc <__aeabi_dcmplt>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <main+0xe0>
	    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193a:	4822      	ldr	r0, [pc, #136]	; (80019c4 <main+0x164>)
 800193c:	f000 fc77 	bl	800222e <HAL_GPIO_TogglePin>

	     if (v.x>180 && v.x<270)
 8001940:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <main+0x168>)
 800194a:	f7ff f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00e      	beq.n	8001972 <main+0x112>
 8001954:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001958:	a315      	add	r3, pc, #84	; (adr r3, 80019b0 <main+0x150>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7ff f8bd 	bl	8000adc <__aeabi_dcmplt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <main+0x112>
	    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800196c:	4815      	ldr	r0, [pc, #84]	; (80019c4 <main+0x164>)
 800196e:	f000 fc5e 	bl	800222e <HAL_GPIO_TogglePin>

	     if (v.x>270 && v.x<360)
 8001972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001976:	a30e      	add	r3, pc, #56	; (adr r3, 80019b0 <main+0x150>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7ff f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <main+0x144>
 8001986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <main+0x16c>)
 8001990:	f7ff f8a4 	bl	8000adc <__aeabi_dcmplt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <main+0x144>
	    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800199a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <main+0x164>)
 80019a0:	f000 fc45 	bl	800222e <HAL_GPIO_TogglePin>

//	     v = bno055_getVectorQuaternion();
//	     printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
	     HAL_Delay(1000);
 80019a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a8:	f000 f982 	bl	8001cb0 <HAL_Delay>
  {
 80019ac:	e76c      	b.n	8001888 <main+0x28>
 80019ae:	bf00      	nop
 80019b0:	00000000 	.word	0x00000000
 80019b4:	4070e000 	.word	0x4070e000
 80019b8:	20000208 	.word	0x20000208
 80019bc:	08006e3c 	.word	0x08006e3c
 80019c0:	40568000 	.word	0x40568000
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40668000 	.word	0x40668000
 80019cc:	40768000 	.word	0x40768000

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 ff46 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a34:	2310      	movs	r3, #16
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a40:	2308      	movs	r3, #8
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001a44:	2332      	movs	r3, #50	; 0x32
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fc19 	bl	800328c <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a60:	f000 f820 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fe7a 	bl	800377c <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a8e:	f000 f809 	bl	8001aa4 <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3750      	adds	r7, #80	; 0x50
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	e7fe      	b.n	8001aac <Error_Handler+0x8>
	...

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aee:	2007      	movs	r0, #7
 8001af0:	f000 f9b4 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 f890 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b7c:	f7ff ffea 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b82:	490d      	ldr	r1, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b98:	4c0a      	ldr	r4, [pc, #40]	; (8001bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f002 feb5 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff fe59 	bl	8001860 <main>
  bx  lr    
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001bbc:	08007218 	.word	0x08007218
  ldr r2, =_sbss
 8001bc0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001bc4:	20000460 	.word	0x20000460

08001bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_Init+0x40>)
 8001bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_Init+0x40>)
 8001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x40>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f931 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff ff56 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f93b 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f911 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	20000010 	.word	0x20000010

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000014 	.word	0x20000014
 8001c94:	20000260 	.word	0x20000260

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000260 	.word	0x20000260

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000014 	.word	0x20000014

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff47 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff5c 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb0 	bl	8001e18 <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e16b      	b.n	80021b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 815a 	bne.w	80021b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d005      	beq.n	8001f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d130      	bne.n	8001f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 0201 	and.w	r2, r3, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d017      	beq.n	8001fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d123      	bne.n	8002008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	69b9      	ldr	r1, [r7, #24]
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80b4 	beq.w	80021b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <HAL_GPIO_Init+0x30c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a5f      	ldr	r2, [pc, #380]	; (80021d0 <HAL_GPIO_Init+0x30c>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_GPIO_Init+0x30c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002066:	4a5b      	ldr	r2, [pc, #364]	; (80021d4 <HAL_GPIO_Init+0x310>)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_GPIO_Init+0x314>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02b      	beq.n	80020ea <HAL_GPIO_Init+0x226>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_GPIO_Init+0x318>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x222>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_GPIO_Init+0x31c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x21e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4f      	ldr	r2, [pc, #316]	; (80021e4 <HAL_GPIO_Init+0x320>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x21a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_GPIO_Init+0x324>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x216>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_GPIO_Init+0x328>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x212>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_GPIO_Init+0x32c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x20e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_GPIO_Init+0x330>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x20a>
 80020ca:	2307      	movs	r3, #7
 80020cc:	e00e      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020ce:	2308      	movs	r3, #8
 80020d0:	e00c      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e00a      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e008      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020da:	2304      	movs	r3, #4
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020de:	2303      	movs	r3, #3
 80020e0:	e004      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x228>
 80020ea:	2300      	movs	r3, #0
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f002 0203 	and.w	r2, r2, #3
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	4093      	lsls	r3, r2
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020fc:	4935      	ldr	r1, [pc, #212]	; (80021d4 <HAL_GPIO_Init+0x310>)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_GPIO_Init+0x334>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212e:	4a32      	ldr	r2, [pc, #200]	; (80021f8 <HAL_GPIO_Init+0x334>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <HAL_GPIO_Init+0x334>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_GPIO_Init+0x334>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_GPIO_Init+0x334>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_GPIO_Init+0x334>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_GPIO_Init+0x334>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_GPIO_Init+0x334>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b0f      	cmp	r3, #15
 80021bc:	f67f ae90 	bls.w	8001ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40021800 	.word	0x40021800
 80021f4:	40021c00 	.word	0x40021c00
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	041a      	lsls	r2, r3, #16
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43d9      	mvns	r1, r3
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	400b      	ands	r3, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e12b      	b.n	80024ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff f974 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c8:	f001 fc50 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a81      	ldr	r2, [pc, #516]	; (80024d8 <HAL_I2C_Init+0x274>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d807      	bhi.n	80022e8 <HAL_I2C_Init+0x84>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a80      	ldr	r2, [pc, #512]	; (80024dc <HAL_I2C_Init+0x278>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	bf94      	ite	ls
 80022e0:	2301      	movls	r3, #1
 80022e2:	2300      	movhi	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e006      	b.n	80022f6 <HAL_I2C_Init+0x92>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a7d      	ldr	r2, [pc, #500]	; (80024e0 <HAL_I2C_Init+0x27c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0e7      	b.n	80024ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a78      	ldr	r2, [pc, #480]	; (80024e4 <HAL_I2C_Init+0x280>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9b      	lsrs	r3, r3, #18
 8002308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_I2C_Init+0x274>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d802      	bhi.n	8002338 <HAL_I2C_Init+0xd4>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3301      	adds	r3, #1
 8002336:	e009      	b.n	800234c <HAL_I2C_Init+0xe8>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	4a69      	ldr	r2, [pc, #420]	; (80024e8 <HAL_I2C_Init+0x284>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	3301      	adds	r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800235e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	495c      	ldr	r1, [pc, #368]	; (80024d8 <HAL_I2C_Init+0x274>)
 8002368:	428b      	cmp	r3, r1
 800236a:	d819      	bhi.n	80023a0 <HAL_I2C_Init+0x13c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e59      	subs	r1, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fbb1 f3f3 	udiv	r3, r1, r3
 800237a:	1c59      	adds	r1, r3, #1
 800237c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002380:	400b      	ands	r3, r1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_I2C_Init+0x138>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e59      	subs	r1, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fbb1 f3f3 	udiv	r3, r1, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	e051      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 800239c:	2304      	movs	r3, #4
 800239e:	e04f      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d111      	bne.n	80023cc <HAL_I2C_Init+0x168>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	440b      	add	r3, r1
 80023b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e012      	b.n	80023f2 <HAL_I2C_Init+0x18e>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	0099      	lsls	r1, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Init+0x196>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e022      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10e      	bne.n	8002420 <HAL_I2C_Init+0x1bc>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e58      	subs	r0, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	440b      	add	r3, r1
 8002410:	fbb0 f3f3 	udiv	r3, r0, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241e:	e00f      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	0099      	lsls	r1, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	fbb0 f3f3 	udiv	r3, r0, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	6809      	ldr	r1, [r1, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69da      	ldr	r2, [r3, #28]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800246e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6911      	ldr	r1, [r2, #16]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	000186a0 	.word	0x000186a0
 80024dc:	001e847f 	.word	0x001e847f
 80024e0:	003d08ff 	.word	0x003d08ff
 80024e4:	431bde83 	.word	0x431bde83
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fbca 	bl	8001c98 <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	f040 80e0 	bne.w	80026d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2319      	movs	r3, #25
 800251a:	2201      	movs	r2, #1
 800251c:	4970      	ldr	r1, [pc, #448]	; (80026e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fc7e 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	e0d3      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_I2C_Master_Transmit+0x50>
 8002538:	2302      	movs	r3, #2
 800253a:	e0cc      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d007      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2221      	movs	r2, #33	; 0x21
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2210      	movs	r2, #16
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	893a      	ldrh	r2, [r7, #8]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fae8 	bl	8002b80 <I2C_MasterRequestWrite>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e08d      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d0:	e066      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fd3c 	bl	8003054 <I2C_WaitOnTXEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06b      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d11b      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x188>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fd33 	bl	80030e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b04      	cmp	r3, #4
 800268a:	d107      	bne.n	800269c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01a      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d194      	bne.n	80025d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
 80026f8:	4613      	mov	r3, r2
 80026fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff facc 	bl	8001c98 <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 8217 	bne.w	8002b3e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2319      	movs	r3, #25
 8002716:	2201      	movs	r2, #1
 8002718:	497c      	ldr	r1, [pc, #496]	; (800290c <HAL_I2C_Master_Receive+0x224>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fb80 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	e20a      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2C_Master_Receive+0x50>
 8002734:	2302      	movs	r3, #2
 8002736:	e203      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d007      	beq.n	800275e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2222      	movs	r2, #34	; 0x22
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2210      	movs	r2, #16
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	893a      	ldrh	r2, [r7, #8]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a5c      	ldr	r2, [pc, #368]	; (8002910 <HAL_I2C_Master_Receive+0x228>)
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a0:	8979      	ldrh	r1, [r7, #10]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fa6c 	bl	8002c84 <I2C_MasterRequestRead>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1c4      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d113      	bne.n	80027e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e198      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d11b      	bne.n	8002826 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e178      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	2b02      	cmp	r3, #2
 800282c:	d11b      	bne.n	8002866 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	e158      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800288c:	e144      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	2b03      	cmp	r3, #3
 8002894:	f200 80f1 	bhi.w	8002a7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	2b01      	cmp	r3, #1
 800289e:	d123      	bne.n	80028e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fc65 	bl	8003174 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e145      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028e6:	e117      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d14e      	bne.n	800298e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	2200      	movs	r2, #0
 80028f8:	4906      	ldr	r1, [pc, #24]	; (8002914 <HAL_I2C_Master_Receive+0x22c>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa90 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e11a      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
 800290a:	bf00      	nop
 800290c:	00100002 	.word	0x00100002
 8002910:	ffff0000 	.word	0xffff0000
 8002914:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298c:	e0c4      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	496c      	ldr	r1, [pc, #432]	; (8002b48 <HAL_I2C_Master_Receive+0x460>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fa41 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cb      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	2200      	movs	r2, #0
 80029f2:	4955      	ldr	r1, [pc, #340]	; (8002b48 <HAL_I2C_Master_Receive+0x460>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa13 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e09d      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a78:	e04e      	b.n	8002b18 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fb78 	bl	8003174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e058      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d124      	bne.n	8002b18 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f aeb6 	bne.w	800288e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00010004 	.word	0x00010004

08002b4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d006      	beq.n	8002baa <I2C_MasterRequestWrite+0x2a>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d003      	beq.n	8002baa <I2C_MasterRequestWrite+0x2a>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba8:	d108      	bne.n	8002bbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e00b      	b.n	8002bd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2b12      	cmp	r3, #18
 8002bc2:	d107      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f91d 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d103      	bne.n	8002c04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e035      	b.n	8002c74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c10:	d108      	bne.n	8002c24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	e01b      	b.n	8002c5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c24:	897b      	ldrh	r3, [r7, #10]
 8002c26:	11db      	asrs	r3, r3, #7
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 0306 	and.w	r3, r3, #6
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f063 030f 	orn	r3, r3, #15
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	490e      	ldr	r1, [pc, #56]	; (8002c7c <I2C_MasterRequestWrite+0xfc>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f966 	bl	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e010      	b.n	8002c74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <I2C_MasterRequestWrite+0x100>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f956 	bl	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	00010008 	.word	0x00010008
 8002c80:	00010002 	.word	0x00010002

08002c84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	460b      	mov	r3, r1
 8002c92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d006      	beq.n	8002cbe <I2C_MasterRequestRead+0x3a>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d003      	beq.n	8002cbe <I2C_MasterRequestRead+0x3a>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cbc:	d108      	bne.n	8002cd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e00b      	b.n	8002ce8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	2b11      	cmp	r3, #17
 8002cd6:	d107      	bne.n	8002ce8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f893 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0e:	d103      	bne.n	8002d18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e079      	b.n	8002e10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d24:	d108      	bne.n	8002d38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	e05f      	b.n	8002df8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	11db      	asrs	r3, r3, #7
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0306 	and.w	r3, r3, #6
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f063 030f 	orn	r3, r3, #15
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4930      	ldr	r1, [pc, #192]	; (8002e18 <I2C_MasterRequestRead+0x194>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f8dc 	bl	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e054      	b.n	8002e10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4929      	ldr	r1, [pc, #164]	; (8002e1c <I2C_MasterRequestRead+0x198>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8cc 	bl	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e044      	b.n	8002e10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002daa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f831 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00d      	beq.n	8002de0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd2:	d103      	bne.n	8002ddc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e017      	b.n	8002e10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	11db      	asrs	r3, r3, #7
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 0306 	and.w	r3, r3, #6
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f063 030e 	orn	r3, r3, #14
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4907      	ldr	r1, [pc, #28]	; (8002e1c <I2C_MasterRequestRead+0x198>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f888 	bl	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00010008 	.word	0x00010008
 8002e1c:	00010002 	.word	0x00010002

08002e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e30:	e048      	b.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d044      	beq.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fe ff2d 	bl	8001c98 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d139      	bne.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	e00c      	b.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d116      	bne.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e023      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d10d      	bne.n	8002eea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	e00c      	b.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d093      	beq.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f22:	e071      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d123      	bne.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e067      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d041      	beq.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f84:	f7fe fe88 	bl	8001c98 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d302      	bcc.n	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d136      	bne.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e00b      	b.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e021      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10c      	bne.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	43da      	mvns	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e00b      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4013      	ands	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f af6d 	bne.w	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003060:	e034      	b.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8e3 	bl	800322e <I2C_IsAcknowledgeFailed>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e034      	b.n	80030dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d028      	beq.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fe0d 	bl	8001c98 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11d      	bne.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d016      	beq.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d1c3      	bne.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f0:	e034      	b.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f89b 	bl	800322e <I2C_IsAcknowledgeFailed>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e034      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d028      	beq.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fe fdc5 	bl	8001c98 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d016      	beq.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d1c3      	bne.n	80030f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003180:	e049      	b.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b10      	cmp	r3, #16
 800318e:	d119      	bne.n	80031c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0210 	mvn.w	r2, #16
 8003198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e030      	b.n	8003226 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fe fd68 	bl	8001c98 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11d      	bne.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d016      	beq.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d1ae      	bne.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d11b      	bne.n	800327e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0204 	orr.w	r2, r3, #4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e267      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d075      	beq.n	8003396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032aa:	4b88      	ldr	r3, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d00c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b85      	ldr	r3, [pc, #532]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d112      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c2:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	4b7e      	ldr	r3, [pc, #504]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05b      	beq.n	8003394 <HAL_RCC_OscConfig+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d157      	bne.n	8003394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e242      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x74>
 80032f2:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b70      	ldr	r3, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6f      	ldr	r2, [pc, #444]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6c      	ldr	r2, [pc, #432]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003324:	4b69      	ldr	r3, [pc, #420]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a68      	ldr	r2, [pc, #416]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a65      	ldr	r2, [pc, #404]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fca8 	bl	8001c98 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fca4 	bl	8001c98 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e207      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xc0>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fc94 	bl	8001c98 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fc90 	bl	8001c98 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1f3      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	4b51      	ldr	r3, [pc, #324]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0xe8>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d063      	beq.n	800346a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1c7      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4937      	ldr	r1, [pc, #220]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCC_OscConfig+0x244>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fc49 	bl	8001c98 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fc45 	bl	8001c98 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1a8      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4925      	ldr	r1, [pc, #148]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCC_OscConfig+0x244>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe fc28 	bl	8001c98 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe fc24 	bl	8001c98 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e187      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d036      	beq.n	80034e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_RCC_OscConfig+0x248>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fc08 	bl	8001c98 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fc04 	bl	8001c98 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e167      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x200>
 80034aa:	e01b      	b.n	80034e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_OscConfig+0x248>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fbf1 	bl	8001c98 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	e00e      	b.n	80034d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ba:	f7fe fbed 	bl	8001c98 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d907      	bls.n	80034d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e150      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470000 	.word	0x42470000
 80034d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b88      	ldr	r3, [pc, #544]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ea      	bne.n	80034ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8097 	beq.w	8003620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b81      	ldr	r3, [pc, #516]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b7d      	ldr	r3, [pc, #500]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a7c      	ldr	r2, [pc, #496]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b77      	ldr	r3, [pc, #476]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b74      	ldr	r3, [pc, #464]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a73      	ldr	r2, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe fbad 	bl	8001c98 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe fba9 	bl	8001c98 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e10c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x2ea>
 8003568:	4b64      	ldr	r3, [pc, #400]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a63      	ldr	r2, [pc, #396]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e01c      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x30c>
 800357e:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a57      	ldr	r2, [pc, #348]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	4b55      	ldr	r3, [pc, #340]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe fb6e 	bl	8001c98 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe fb6a 	bl	8001c98 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0cb      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e4:	f7fe fb58 	bl	8001c98 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fb54 	bl	8001c98 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0b5      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b39      	ldr	r3, [pc, #228]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4a38      	ldr	r2, [pc, #224]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a1 	beq.w	800376c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d05c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d141      	bne.n	80036c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe fb28 	bl	8001c98 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fb24 	bl	8001c98 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e087      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	491b      	ldr	r1, [pc, #108]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCC_OscConfig+0x478>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe fafd 	bl	8001c98 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe faf9 	bl	8001c98 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e05c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x416>
 80036c0:	e054      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCC_OscConfig+0x478>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe fae6 	bl	8001c98 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe fae2 	bl	8001c98 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e045      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
 80036ee:	e03d      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e038      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80036fc:	40023800 	.word	0x40023800
 8003700:	40007000 	.word	0x40007000
 8003704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x4ec>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d028      	beq.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d121      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11a      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800373e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	3b01      	subs	r3, #1
 8003752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe fa14 	bl	8001c98 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fa10 	bl	8001c98 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe f974 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	08006e64 	.word	0x08006e64
 8003940:	2000000c 	.word	0x2000000c
 8003944:	20000010 	.word	0x20000010

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b094      	sub	sp, #80	; 0x50
 800394e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	647b      	str	r3, [r7, #68]	; 0x44
 8003954:	2300      	movs	r3, #0
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003958:	2300      	movs	r3, #0
 800395a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003960:	4b79      	ldr	r3, [pc, #484]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d00d      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x40>
 800396c:	2b08      	cmp	r3, #8
 800396e:	f200 80e1 	bhi.w	8003b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003976:	2b04      	cmp	r3, #4
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3a>
 800397a:	e0db      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003980:	e0db      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003982:	4b73      	ldr	r3, [pc, #460]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003986:	e0d8      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003988:	4b6f      	ldr	r3, [pc, #444]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d063      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
 80039b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	f04f 0000 	mov.w	r0, #0
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	0159      	lsls	r1, r3, #5
 80039c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039cc:	0150      	lsls	r0, r2, #5
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4621      	mov	r1, r4
 80039d4:	1a51      	subs	r1, r2, r1
 80039d6:	6139      	str	r1, [r7, #16]
 80039d8:	4629      	mov	r1, r5
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ec:	4659      	mov	r1, fp
 80039ee:	018b      	lsls	r3, r1, #6
 80039f0:	4651      	mov	r1, sl
 80039f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039f6:	4651      	mov	r1, sl
 80039f8:	018a      	lsls	r2, r1, #6
 80039fa:	4651      	mov	r1, sl
 80039fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003a00:	4659      	mov	r1, fp
 8003a02:	eb63 0901 	sbc.w	r9, r3, r1
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1a:	4690      	mov	r8, r2
 8003a1c:	4699      	mov	r9, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	eb18 0303 	adds.w	r3, r8, r3
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	462b      	mov	r3, r5
 8003a28:	eb49 0303 	adc.w	r3, r9, r3
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	024b      	lsls	r3, r1, #9
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a44:	4621      	mov	r1, r4
 8003a46:	024a      	lsls	r2, r1, #9
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4e:	2200      	movs	r2, #0
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a58:	f7fd f8a6 	bl	8000ba8 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a64:	e058      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	4611      	mov	r1, r2
 8003a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a76:	623b      	str	r3, [r7, #32]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	0159      	lsls	r1, r3, #5
 8003a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a92:	0150      	lsls	r0, r2, #5
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4641      	mov	r1, r8
 8003a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8003abc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	00eb      	lsls	r3, r5, #3
 8003aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ace:	00e2      	lsls	r2, r4, #3
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	18e3      	adds	r3, r4, r3
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	464b      	mov	r3, r9
 8003adc:	eb45 0303 	adc.w	r3, r5, r3
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b02:	2200      	movs	r2, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	61fa      	str	r2, [r7, #28]
 8003b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0c:	f7fd f84c 	bl	8000ba8 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3750      	adds	r7, #80	; 0x50
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	007a1200 	.word	0x007a1200

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b70:	f7ff fff0 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	0a9b      	lsrs	r3, r3, #10
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4903      	ldr	r1, [pc, #12]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	08006e74 	.word	0x08006e74

08003b94 <__cvt>:
 8003b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	ec55 4b10 	vmov	r4, r5, d0
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	460e      	mov	r6, r1
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	462b      	mov	r3, r5
 8003ba4:	bfbb      	ittet	lt
 8003ba6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003baa:	461d      	movlt	r5, r3
 8003bac:	2300      	movge	r3, #0
 8003bae:	232d      	movlt	r3, #45	; 0x2d
 8003bb0:	700b      	strb	r3, [r1, #0]
 8003bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003bb8:	4691      	mov	r9, r2
 8003bba:	f023 0820 	bic.w	r8, r3, #32
 8003bbe:	bfbc      	itt	lt
 8003bc0:	4622      	movlt	r2, r4
 8003bc2:	4614      	movlt	r4, r2
 8003bc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bc8:	d005      	beq.n	8003bd6 <__cvt+0x42>
 8003bca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003bce:	d100      	bne.n	8003bd2 <__cvt+0x3e>
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	e000      	b.n	8003bd8 <__cvt+0x44>
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	ab03      	add	r3, sp, #12
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	ab02      	add	r3, sp, #8
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	ec45 4b10 	vmov	d0, r4, r5
 8003be4:	4653      	mov	r3, sl
 8003be6:	4632      	mov	r2, r6
 8003be8:	f000 ff52 	bl	8004a90 <_dtoa_r>
 8003bec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	d102      	bne.n	8003bfa <__cvt+0x66>
 8003bf4:	f019 0f01 	tst.w	r9, #1
 8003bf8:	d022      	beq.n	8003c40 <__cvt+0xac>
 8003bfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bfe:	eb07 0906 	add.w	r9, r7, r6
 8003c02:	d110      	bne.n	8003c26 <__cvt+0x92>
 8003c04:	783b      	ldrb	r3, [r7, #0]
 8003c06:	2b30      	cmp	r3, #48	; 0x30
 8003c08:	d10a      	bne.n	8003c20 <__cvt+0x8c>
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	f7fc ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c16:	b918      	cbnz	r0, 8003c20 <__cvt+0x8c>
 8003c18:	f1c6 0601 	rsb	r6, r6, #1
 8003c1c:	f8ca 6000 	str.w	r6, [sl]
 8003c20:	f8da 3000 	ldr.w	r3, [sl]
 8003c24:	4499      	add	r9, r3
 8003c26:	2200      	movs	r2, #0
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	f7fc ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c32:	b108      	cbz	r0, 8003c38 <__cvt+0xa4>
 8003c34:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c38:	2230      	movs	r2, #48	; 0x30
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	454b      	cmp	r3, r9
 8003c3e:	d307      	bcc.n	8003c50 <__cvt+0xbc>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c44:	1bdb      	subs	r3, r3, r7
 8003c46:	4638      	mov	r0, r7
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	b004      	add	sp, #16
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	1c59      	adds	r1, r3, #1
 8003c52:	9103      	str	r1, [sp, #12]
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e7f0      	b.n	8003c3a <__cvt+0xa6>

08003c58 <__exponent>:
 8003c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	bfb8      	it	lt
 8003c60:	4249      	neglt	r1, r1
 8003c62:	f803 2b02 	strb.w	r2, [r3], #2
 8003c66:	bfb4      	ite	lt
 8003c68:	222d      	movlt	r2, #45	; 0x2d
 8003c6a:	222b      	movge	r2, #43	; 0x2b
 8003c6c:	2909      	cmp	r1, #9
 8003c6e:	7042      	strb	r2, [r0, #1]
 8003c70:	dd2a      	ble.n	8003cc8 <__exponent+0x70>
 8003c72:	f10d 0207 	add.w	r2, sp, #7
 8003c76:	4617      	mov	r7, r2
 8003c78:	260a      	movs	r6, #10
 8003c7a:	4694      	mov	ip, r2
 8003c7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c80:	fb06 1415 	mls	r4, r6, r5, r1
 8003c84:	3430      	adds	r4, #48	; 0x30
 8003c86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	2c63      	cmp	r4, #99	; 0x63
 8003c8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003c92:	4629      	mov	r1, r5
 8003c94:	dcf1      	bgt.n	8003c7a <__exponent+0x22>
 8003c96:	3130      	adds	r1, #48	; 0x30
 8003c98:	f1ac 0402 	sub.w	r4, ip, #2
 8003c9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003ca0:	1c41      	adds	r1, r0, #1
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	42ba      	cmp	r2, r7
 8003ca6:	d30a      	bcc.n	8003cbe <__exponent+0x66>
 8003ca8:	f10d 0209 	add.w	r2, sp, #9
 8003cac:	eba2 020c 	sub.w	r2, r2, ip
 8003cb0:	42bc      	cmp	r4, r7
 8003cb2:	bf88      	it	hi
 8003cb4:	2200      	movhi	r2, #0
 8003cb6:	4413      	add	r3, r2
 8003cb8:	1a18      	subs	r0, r3, r0
 8003cba:	b003      	add	sp, #12
 8003cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003cc2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003cc6:	e7ed      	b.n	8003ca4 <__exponent+0x4c>
 8003cc8:	2330      	movs	r3, #48	; 0x30
 8003cca:	3130      	adds	r1, #48	; 0x30
 8003ccc:	7083      	strb	r3, [r0, #2]
 8003cce:	70c1      	strb	r1, [r0, #3]
 8003cd0:	1d03      	adds	r3, r0, #4
 8003cd2:	e7f1      	b.n	8003cb8 <__exponent+0x60>

08003cd4 <_printf_float>:
 8003cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd8:	ed2d 8b02 	vpush	{d8}
 8003cdc:	b08d      	sub	sp, #52	; 0x34
 8003cde:	460c      	mov	r4, r1
 8003ce0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	461f      	mov	r7, r3
 8003ce8:	4605      	mov	r5, r0
 8003cea:	f000 fdc9 	bl	8004880 <_localeconv_r>
 8003cee:	f8d0 a000 	ldr.w	sl, [r0]
 8003cf2:	4650      	mov	r0, sl
 8003cf4:	f7fc fabc 	bl	8000270 <strlen>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	9305      	str	r3, [sp, #20]
 8003d00:	f8d8 3000 	ldr.w	r3, [r8]
 8003d04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003d08:	3307      	adds	r3, #7
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	f103 0208 	add.w	r2, r3, #8
 8003d12:	f8c8 2000 	str.w	r2, [r8]
 8003d16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d1e:	9307      	str	r3, [sp, #28]
 8003d20:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d24:	ee08 0a10 	vmov	s16, r0
 8003d28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d30:	4b9e      	ldr	r3, [pc, #632]	; (8003fac <_printf_float+0x2d8>)
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	f7fc fef9 	bl	8000b2c <__aeabi_dcmpun>
 8003d3a:	bb88      	cbnz	r0, 8003da0 <_printf_float+0xcc>
 8003d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d40:	4b9a      	ldr	r3, [pc, #616]	; (8003fac <_printf_float+0x2d8>)
 8003d42:	f04f 32ff 	mov.w	r2, #4294967295
 8003d46:	f7fc fed3 	bl	8000af0 <__aeabi_dcmple>
 8003d4a:	bb48      	cbnz	r0, 8003da0 <_printf_float+0xcc>
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2300      	movs	r3, #0
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc fec2 	bl	8000adc <__aeabi_dcmplt>
 8003d58:	b110      	cbz	r0, 8003d60 <_printf_float+0x8c>
 8003d5a:	232d      	movs	r3, #45	; 0x2d
 8003d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d60:	4a93      	ldr	r2, [pc, #588]	; (8003fb0 <_printf_float+0x2dc>)
 8003d62:	4b94      	ldr	r3, [pc, #592]	; (8003fb4 <_printf_float+0x2e0>)
 8003d64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d68:	bf94      	ite	ls
 8003d6a:	4690      	movls	r8, r2
 8003d6c:	4698      	movhi	r8, r3
 8003d6e:	2303      	movs	r3, #3
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	9b05      	ldr	r3, [sp, #20]
 8003d74:	f023 0304 	bic.w	r3, r3, #4
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	f04f 0900 	mov.w	r9, #0
 8003d7e:	9700      	str	r7, [sp, #0]
 8003d80:	4633      	mov	r3, r6
 8003d82:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d84:	4621      	mov	r1, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f9da 	bl	8004140 <_printf_common>
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f040 8090 	bne.w	8003eb2 <_printf_float+0x1de>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295
 8003d96:	b00d      	add	sp, #52	; 0x34
 8003d98:	ecbd 8b02 	vpop	{d8}
 8003d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	4640      	mov	r0, r8
 8003da6:	4649      	mov	r1, r9
 8003da8:	f7fc fec0 	bl	8000b2c <__aeabi_dcmpun>
 8003dac:	b140      	cbz	r0, 8003dc0 <_printf_float+0xec>
 8003dae:	464b      	mov	r3, r9
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfbc      	itt	lt
 8003db4:	232d      	movlt	r3, #45	; 0x2d
 8003db6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003dba:	4a7f      	ldr	r2, [pc, #508]	; (8003fb8 <_printf_float+0x2e4>)
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <_printf_float+0x2e8>)
 8003dbe:	e7d1      	b.n	8003d64 <_printf_float+0x90>
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003dc6:	9206      	str	r2, [sp, #24]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	d13f      	bne.n	8003e4c <_printf_float+0x178>
 8003dcc:	2306      	movs	r3, #6
 8003dce:	6063      	str	r3, [r4, #4]
 8003dd0:	9b05      	ldr	r3, [sp, #20]
 8003dd2:	6861      	ldr	r1, [r4, #4]
 8003dd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9303      	str	r3, [sp, #12]
 8003ddc:	ab0a      	add	r3, sp, #40	; 0x28
 8003dde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003de2:	ab09      	add	r3, sp, #36	; 0x24
 8003de4:	ec49 8b10 	vmov	d0, r8, r9
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6022      	str	r2, [r4, #0]
 8003dec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003df0:	4628      	mov	r0, r5
 8003df2:	f7ff fecf 	bl	8003b94 <__cvt>
 8003df6:	9b06      	ldr	r3, [sp, #24]
 8003df8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dfa:	2b47      	cmp	r3, #71	; 0x47
 8003dfc:	4680      	mov	r8, r0
 8003dfe:	d108      	bne.n	8003e12 <_printf_float+0x13e>
 8003e00:	1cc8      	adds	r0, r1, #3
 8003e02:	db02      	blt.n	8003e0a <_printf_float+0x136>
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	4299      	cmp	r1, r3
 8003e08:	dd41      	ble.n	8003e8e <_printf_float+0x1ba>
 8003e0a:	f1ab 0302 	sub.w	r3, fp, #2
 8003e0e:	fa5f fb83 	uxtb.w	fp, r3
 8003e12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e16:	d820      	bhi.n	8003e5a <_printf_float+0x186>
 8003e18:	3901      	subs	r1, #1
 8003e1a:	465a      	mov	r2, fp
 8003e1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e20:	9109      	str	r1, [sp, #36]	; 0x24
 8003e22:	f7ff ff19 	bl	8003c58 <__exponent>
 8003e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e28:	1813      	adds	r3, r2, r0
 8003e2a:	2a01      	cmp	r2, #1
 8003e2c:	4681      	mov	r9, r0
 8003e2e:	6123      	str	r3, [r4, #16]
 8003e30:	dc02      	bgt.n	8003e38 <_printf_float+0x164>
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	07d2      	lsls	r2, r2, #31
 8003e36:	d501      	bpl.n	8003e3c <_printf_float+0x168>
 8003e38:	3301      	adds	r3, #1
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d09c      	beq.n	8003d7e <_printf_float+0xaa>
 8003e44:	232d      	movs	r3, #45	; 0x2d
 8003e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e4a:	e798      	b.n	8003d7e <_printf_float+0xaa>
 8003e4c:	9a06      	ldr	r2, [sp, #24]
 8003e4e:	2a47      	cmp	r2, #71	; 0x47
 8003e50:	d1be      	bne.n	8003dd0 <_printf_float+0xfc>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1bc      	bne.n	8003dd0 <_printf_float+0xfc>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e7b9      	b.n	8003dce <_printf_float+0xfa>
 8003e5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e5e:	d118      	bne.n	8003e92 <_printf_float+0x1be>
 8003e60:	2900      	cmp	r1, #0
 8003e62:	6863      	ldr	r3, [r4, #4]
 8003e64:	dd0b      	ble.n	8003e7e <_printf_float+0x1aa>
 8003e66:	6121      	str	r1, [r4, #16]
 8003e68:	b913      	cbnz	r3, 8003e70 <_printf_float+0x19c>
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	07d0      	lsls	r0, r2, #31
 8003e6e:	d502      	bpl.n	8003e76 <_printf_float+0x1a2>
 8003e70:	3301      	adds	r3, #1
 8003e72:	440b      	add	r3, r1
 8003e74:	6123      	str	r3, [r4, #16]
 8003e76:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e78:	f04f 0900 	mov.w	r9, #0
 8003e7c:	e7de      	b.n	8003e3c <_printf_float+0x168>
 8003e7e:	b913      	cbnz	r3, 8003e86 <_printf_float+0x1b2>
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	07d2      	lsls	r2, r2, #31
 8003e84:	d501      	bpl.n	8003e8a <_printf_float+0x1b6>
 8003e86:	3302      	adds	r3, #2
 8003e88:	e7f4      	b.n	8003e74 <_printf_float+0x1a0>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e7f2      	b.n	8003e74 <_printf_float+0x1a0>
 8003e8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e94:	4299      	cmp	r1, r3
 8003e96:	db05      	blt.n	8003ea4 <_printf_float+0x1d0>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	6121      	str	r1, [r4, #16]
 8003e9c:	07d8      	lsls	r0, r3, #31
 8003e9e:	d5ea      	bpl.n	8003e76 <_printf_float+0x1a2>
 8003ea0:	1c4b      	adds	r3, r1, #1
 8003ea2:	e7e7      	b.n	8003e74 <_printf_float+0x1a0>
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	bfd4      	ite	le
 8003ea8:	f1c1 0202 	rsble	r2, r1, #2
 8003eac:	2201      	movgt	r2, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	e7e0      	b.n	8003e74 <_printf_float+0x1a0>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	055a      	lsls	r2, r3, #21
 8003eb6:	d407      	bmi.n	8003ec8 <_printf_float+0x1f4>
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	4642      	mov	r2, r8
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	47b8      	blx	r7
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d12c      	bne.n	8003f20 <_printf_float+0x24c>
 8003ec6:	e764      	b.n	8003d92 <_printf_float+0xbe>
 8003ec8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ecc:	f240 80e0 	bls.w	8004090 <_printf_float+0x3bc>
 8003ed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f7fc fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d034      	beq.n	8003f4a <_printf_float+0x276>
 8003ee0:	4a37      	ldr	r2, [pc, #220]	; (8003fc0 <_printf_float+0x2ec>)
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f af51 	beq.w	8003d92 <_printf_float+0xbe>
 8003ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	db02      	blt.n	8003efe <_printf_float+0x22a>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07d8      	lsls	r0, r3, #31
 8003efc:	d510      	bpl.n	8003f20 <_printf_float+0x24c>
 8003efe:	ee18 3a10 	vmov	r3, s16
 8003f02:	4652      	mov	r2, sl
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f43f af41 	beq.w	8003d92 <_printf_float+0xbe>
 8003f10:	f04f 0800 	mov.w	r8, #0
 8003f14:	f104 091a 	add.w	r9, r4, #26
 8003f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	4543      	cmp	r3, r8
 8003f1e:	dc09      	bgt.n	8003f34 <_printf_float+0x260>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	079b      	lsls	r3, r3, #30
 8003f24:	f100 8107 	bmi.w	8004136 <_printf_float+0x462>
 8003f28:	68e0      	ldr	r0, [r4, #12]
 8003f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f2c:	4298      	cmp	r0, r3
 8003f2e:	bfb8      	it	lt
 8003f30:	4618      	movlt	r0, r3
 8003f32:	e730      	b.n	8003d96 <_printf_float+0xc2>
 8003f34:	2301      	movs	r3, #1
 8003f36:	464a      	mov	r2, r9
 8003f38:	4631      	mov	r1, r6
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b8      	blx	r7
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f43f af27 	beq.w	8003d92 <_printf_float+0xbe>
 8003f44:	f108 0801 	add.w	r8, r8, #1
 8003f48:	e7e6      	b.n	8003f18 <_printf_float+0x244>
 8003f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	dc39      	bgt.n	8003fc4 <_printf_float+0x2f0>
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <_printf_float+0x2ec>)
 8003f52:	2301      	movs	r3, #1
 8003f54:	4631      	mov	r1, r6
 8003f56:	4628      	mov	r0, r5
 8003f58:	47b8      	blx	r7
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f43f af19 	beq.w	8003d92 <_printf_float+0xbe>
 8003f60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f64:	4313      	orrs	r3, r2
 8003f66:	d102      	bne.n	8003f6e <_printf_float+0x29a>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	07d9      	lsls	r1, r3, #31
 8003f6c:	d5d8      	bpl.n	8003f20 <_printf_float+0x24c>
 8003f6e:	ee18 3a10 	vmov	r3, s16
 8003f72:	4652      	mov	r2, sl
 8003f74:	4631      	mov	r1, r6
 8003f76:	4628      	mov	r0, r5
 8003f78:	47b8      	blx	r7
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	f43f af09 	beq.w	8003d92 <_printf_float+0xbe>
 8003f80:	f04f 0900 	mov.w	r9, #0
 8003f84:	f104 0a1a 	add.w	sl, r4, #26
 8003f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8a:	425b      	negs	r3, r3
 8003f8c:	454b      	cmp	r3, r9
 8003f8e:	dc01      	bgt.n	8003f94 <_printf_float+0x2c0>
 8003f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f92:	e792      	b.n	8003eba <_printf_float+0x1e6>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4652      	mov	r2, sl
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	47b8      	blx	r7
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	f43f aef7 	beq.w	8003d92 <_printf_float+0xbe>
 8003fa4:	f109 0901 	add.w	r9, r9, #1
 8003fa8:	e7ee      	b.n	8003f88 <_printf_float+0x2b4>
 8003faa:	bf00      	nop
 8003fac:	7fefffff 	.word	0x7fefffff
 8003fb0:	08006e7c 	.word	0x08006e7c
 8003fb4:	08006e80 	.word	0x08006e80
 8003fb8:	08006e84 	.word	0x08006e84
 8003fbc:	08006e88 	.word	0x08006e88
 8003fc0:	08006e8c 	.word	0x08006e8c
 8003fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	bfa8      	it	ge
 8003fcc:	461a      	movge	r2, r3
 8003fce:	2a00      	cmp	r2, #0
 8003fd0:	4691      	mov	r9, r2
 8003fd2:	dc37      	bgt.n	8004044 <_printf_float+0x370>
 8003fd4:	f04f 0b00 	mov.w	fp, #0
 8003fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fdc:	f104 021a 	add.w	r2, r4, #26
 8003fe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	eba3 0309 	sub.w	r3, r3, r9
 8003fe8:	455b      	cmp	r3, fp
 8003fea:	dc33      	bgt.n	8004054 <_printf_float+0x380>
 8003fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	db3b      	blt.n	800406c <_printf_float+0x398>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	07da      	lsls	r2, r3, #31
 8003ff8:	d438      	bmi.n	800406c <_printf_float+0x398>
 8003ffa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003ffe:	eba2 0903 	sub.w	r9, r2, r3
 8004002:	9b05      	ldr	r3, [sp, #20]
 8004004:	1ad2      	subs	r2, r2, r3
 8004006:	4591      	cmp	r9, r2
 8004008:	bfa8      	it	ge
 800400a:	4691      	movge	r9, r2
 800400c:	f1b9 0f00 	cmp.w	r9, #0
 8004010:	dc35      	bgt.n	800407e <_printf_float+0x3aa>
 8004012:	f04f 0800 	mov.w	r8, #0
 8004016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800401a:	f104 0a1a 	add.w	sl, r4, #26
 800401e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	eba3 0309 	sub.w	r3, r3, r9
 8004028:	4543      	cmp	r3, r8
 800402a:	f77f af79 	ble.w	8003f20 <_printf_float+0x24c>
 800402e:	2301      	movs	r3, #1
 8004030:	4652      	mov	r2, sl
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	47b8      	blx	r7
 8004038:	3001      	adds	r0, #1
 800403a:	f43f aeaa 	beq.w	8003d92 <_printf_float+0xbe>
 800403e:	f108 0801 	add.w	r8, r8, #1
 8004042:	e7ec      	b.n	800401e <_printf_float+0x34a>
 8004044:	4613      	mov	r3, r2
 8004046:	4631      	mov	r1, r6
 8004048:	4642      	mov	r2, r8
 800404a:	4628      	mov	r0, r5
 800404c:	47b8      	blx	r7
 800404e:	3001      	adds	r0, #1
 8004050:	d1c0      	bne.n	8003fd4 <_printf_float+0x300>
 8004052:	e69e      	b.n	8003d92 <_printf_float+0xbe>
 8004054:	2301      	movs	r3, #1
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	9205      	str	r2, [sp, #20]
 800405c:	47b8      	blx	r7
 800405e:	3001      	adds	r0, #1
 8004060:	f43f ae97 	beq.w	8003d92 <_printf_float+0xbe>
 8004064:	9a05      	ldr	r2, [sp, #20]
 8004066:	f10b 0b01 	add.w	fp, fp, #1
 800406a:	e7b9      	b.n	8003fe0 <_printf_float+0x30c>
 800406c:	ee18 3a10 	vmov	r3, s16
 8004070:	4652      	mov	r2, sl
 8004072:	4631      	mov	r1, r6
 8004074:	4628      	mov	r0, r5
 8004076:	47b8      	blx	r7
 8004078:	3001      	adds	r0, #1
 800407a:	d1be      	bne.n	8003ffa <_printf_float+0x326>
 800407c:	e689      	b.n	8003d92 <_printf_float+0xbe>
 800407e:	9a05      	ldr	r2, [sp, #20]
 8004080:	464b      	mov	r3, r9
 8004082:	4442      	add	r2, r8
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	d1c1      	bne.n	8004012 <_printf_float+0x33e>
 800408e:	e680      	b.n	8003d92 <_printf_float+0xbe>
 8004090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004092:	2a01      	cmp	r2, #1
 8004094:	dc01      	bgt.n	800409a <_printf_float+0x3c6>
 8004096:	07db      	lsls	r3, r3, #31
 8004098:	d53a      	bpl.n	8004110 <_printf_float+0x43c>
 800409a:	2301      	movs	r3, #1
 800409c:	4642      	mov	r2, r8
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f ae74 	beq.w	8003d92 <_printf_float+0xbe>
 80040aa:	ee18 3a10 	vmov	r3, s16
 80040ae:	4652      	mov	r2, sl
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	f43f ae6b 	beq.w	8003d92 <_printf_float+0xbe>
 80040bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80040c8:	f7fc fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80040cc:	b9d8      	cbnz	r0, 8004106 <_printf_float+0x432>
 80040ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80040d2:	f108 0201 	add.w	r2, r8, #1
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	d10e      	bne.n	80040fe <_printf_float+0x42a>
 80040e0:	e657      	b.n	8003d92 <_printf_float+0xbe>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4652      	mov	r2, sl
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f ae50 	beq.w	8003d92 <_printf_float+0xbe>
 80040f2:	f108 0801 	add.w	r8, r8, #1
 80040f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	4543      	cmp	r3, r8
 80040fc:	dcf1      	bgt.n	80040e2 <_printf_float+0x40e>
 80040fe:	464b      	mov	r3, r9
 8004100:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004104:	e6da      	b.n	8003ebc <_printf_float+0x1e8>
 8004106:	f04f 0800 	mov.w	r8, #0
 800410a:	f104 0a1a 	add.w	sl, r4, #26
 800410e:	e7f2      	b.n	80040f6 <_printf_float+0x422>
 8004110:	2301      	movs	r3, #1
 8004112:	4642      	mov	r2, r8
 8004114:	e7df      	b.n	80040d6 <_printf_float+0x402>
 8004116:	2301      	movs	r3, #1
 8004118:	464a      	mov	r2, r9
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f ae36 	beq.w	8003d92 <_printf_float+0xbe>
 8004126:	f108 0801 	add.w	r8, r8, #1
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800412e:	1a5b      	subs	r3, r3, r1
 8004130:	4543      	cmp	r3, r8
 8004132:	dcf0      	bgt.n	8004116 <_printf_float+0x442>
 8004134:	e6f8      	b.n	8003f28 <_printf_float+0x254>
 8004136:	f04f 0800 	mov.w	r8, #0
 800413a:	f104 0919 	add.w	r9, r4, #25
 800413e:	e7f4      	b.n	800412a <_printf_float+0x456>

08004140 <_printf_common>:
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	4616      	mov	r6, r2
 8004146:	4699      	mov	r9, r3
 8004148:	688a      	ldr	r2, [r1, #8]
 800414a:	690b      	ldr	r3, [r1, #16]
 800414c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004150:	4293      	cmp	r3, r2
 8004152:	bfb8      	it	lt
 8004154:	4613      	movlt	r3, r2
 8004156:	6033      	str	r3, [r6, #0]
 8004158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800415c:	4607      	mov	r7, r0
 800415e:	460c      	mov	r4, r1
 8004160:	b10a      	cbz	r2, 8004166 <_printf_common+0x26>
 8004162:	3301      	adds	r3, #1
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	0699      	lsls	r1, r3, #26
 800416a:	bf42      	ittt	mi
 800416c:	6833      	ldrmi	r3, [r6, #0]
 800416e:	3302      	addmi	r3, #2
 8004170:	6033      	strmi	r3, [r6, #0]
 8004172:	6825      	ldr	r5, [r4, #0]
 8004174:	f015 0506 	ands.w	r5, r5, #6
 8004178:	d106      	bne.n	8004188 <_printf_common+0x48>
 800417a:	f104 0a19 	add.w	sl, r4, #25
 800417e:	68e3      	ldr	r3, [r4, #12]
 8004180:	6832      	ldr	r2, [r6, #0]
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	42ab      	cmp	r3, r5
 8004186:	dc26      	bgt.n	80041d6 <_printf_common+0x96>
 8004188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800418c:	1e13      	subs	r3, r2, #0
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	bf18      	it	ne
 8004192:	2301      	movne	r3, #1
 8004194:	0692      	lsls	r2, r2, #26
 8004196:	d42b      	bmi.n	80041f0 <_printf_common+0xb0>
 8004198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800419c:	4649      	mov	r1, r9
 800419e:	4638      	mov	r0, r7
 80041a0:	47c0      	blx	r8
 80041a2:	3001      	adds	r0, #1
 80041a4:	d01e      	beq.n	80041e4 <_printf_common+0xa4>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	6922      	ldr	r2, [r4, #16]
 80041aa:	f003 0306 	and.w	r3, r3, #6
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	bf02      	ittt	eq
 80041b2:	68e5      	ldreq	r5, [r4, #12]
 80041b4:	6833      	ldreq	r3, [r6, #0]
 80041b6:	1aed      	subeq	r5, r5, r3
 80041b8:	68a3      	ldr	r3, [r4, #8]
 80041ba:	bf0c      	ite	eq
 80041bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041c0:	2500      	movne	r5, #0
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bfc4      	itt	gt
 80041c6:	1a9b      	subgt	r3, r3, r2
 80041c8:	18ed      	addgt	r5, r5, r3
 80041ca:	2600      	movs	r6, #0
 80041cc:	341a      	adds	r4, #26
 80041ce:	42b5      	cmp	r5, r6
 80041d0:	d11a      	bne.n	8004208 <_printf_common+0xc8>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e008      	b.n	80041e8 <_printf_common+0xa8>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4652      	mov	r2, sl
 80041da:	4649      	mov	r1, r9
 80041dc:	4638      	mov	r0, r7
 80041de:	47c0      	blx	r8
 80041e0:	3001      	adds	r0, #1
 80041e2:	d103      	bne.n	80041ec <_printf_common+0xac>
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	3501      	adds	r5, #1
 80041ee:	e7c6      	b.n	800417e <_printf_common+0x3e>
 80041f0:	18e1      	adds	r1, r4, r3
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	2030      	movs	r0, #48	; 0x30
 80041f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041fa:	4422      	add	r2, r4
 80041fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004204:	3302      	adds	r3, #2
 8004206:	e7c7      	b.n	8004198 <_printf_common+0x58>
 8004208:	2301      	movs	r3, #1
 800420a:	4622      	mov	r2, r4
 800420c:	4649      	mov	r1, r9
 800420e:	4638      	mov	r0, r7
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d0e6      	beq.n	80041e4 <_printf_common+0xa4>
 8004216:	3601      	adds	r6, #1
 8004218:	e7d9      	b.n	80041ce <_printf_common+0x8e>
	...

0800421c <_printf_i>:
 800421c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	7e0f      	ldrb	r7, [r1, #24]
 8004222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004224:	2f78      	cmp	r7, #120	; 0x78
 8004226:	4691      	mov	r9, r2
 8004228:	4680      	mov	r8, r0
 800422a:	460c      	mov	r4, r1
 800422c:	469a      	mov	sl, r3
 800422e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004232:	d807      	bhi.n	8004244 <_printf_i+0x28>
 8004234:	2f62      	cmp	r7, #98	; 0x62
 8004236:	d80a      	bhi.n	800424e <_printf_i+0x32>
 8004238:	2f00      	cmp	r7, #0
 800423a:	f000 80d4 	beq.w	80043e6 <_printf_i+0x1ca>
 800423e:	2f58      	cmp	r7, #88	; 0x58
 8004240:	f000 80c0 	beq.w	80043c4 <_printf_i+0x1a8>
 8004244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800424c:	e03a      	b.n	80042c4 <_printf_i+0xa8>
 800424e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004252:	2b15      	cmp	r3, #21
 8004254:	d8f6      	bhi.n	8004244 <_printf_i+0x28>
 8004256:	a101      	add	r1, pc, #4	; (adr r1, 800425c <_printf_i+0x40>)
 8004258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800425c:	080042b5 	.word	0x080042b5
 8004260:	080042c9 	.word	0x080042c9
 8004264:	08004245 	.word	0x08004245
 8004268:	08004245 	.word	0x08004245
 800426c:	08004245 	.word	0x08004245
 8004270:	08004245 	.word	0x08004245
 8004274:	080042c9 	.word	0x080042c9
 8004278:	08004245 	.word	0x08004245
 800427c:	08004245 	.word	0x08004245
 8004280:	08004245 	.word	0x08004245
 8004284:	08004245 	.word	0x08004245
 8004288:	080043cd 	.word	0x080043cd
 800428c:	080042f5 	.word	0x080042f5
 8004290:	08004387 	.word	0x08004387
 8004294:	08004245 	.word	0x08004245
 8004298:	08004245 	.word	0x08004245
 800429c:	080043ef 	.word	0x080043ef
 80042a0:	08004245 	.word	0x08004245
 80042a4:	080042f5 	.word	0x080042f5
 80042a8:	08004245 	.word	0x08004245
 80042ac:	08004245 	.word	0x08004245
 80042b0:	0800438f 	.word	0x0800438f
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	602a      	str	r2, [r5, #0]
 80042bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042c4:	2301      	movs	r3, #1
 80042c6:	e09f      	b.n	8004408 <_printf_i+0x1ec>
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	0607      	lsls	r7, r0, #24
 80042ce:	f103 0104 	add.w	r1, r3, #4
 80042d2:	6029      	str	r1, [r5, #0]
 80042d4:	d501      	bpl.n	80042da <_printf_i+0xbe>
 80042d6:	681e      	ldr	r6, [r3, #0]
 80042d8:	e003      	b.n	80042e2 <_printf_i+0xc6>
 80042da:	0646      	lsls	r6, r0, #25
 80042dc:	d5fb      	bpl.n	80042d6 <_printf_i+0xba>
 80042de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042e2:	2e00      	cmp	r6, #0
 80042e4:	da03      	bge.n	80042ee <_printf_i+0xd2>
 80042e6:	232d      	movs	r3, #45	; 0x2d
 80042e8:	4276      	negs	r6, r6
 80042ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ee:	485a      	ldr	r0, [pc, #360]	; (8004458 <_printf_i+0x23c>)
 80042f0:	230a      	movs	r3, #10
 80042f2:	e012      	b.n	800431a <_printf_i+0xfe>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	1d19      	adds	r1, r3, #4
 80042fa:	6029      	str	r1, [r5, #0]
 80042fc:	0605      	lsls	r5, r0, #24
 80042fe:	d501      	bpl.n	8004304 <_printf_i+0xe8>
 8004300:	681e      	ldr	r6, [r3, #0]
 8004302:	e002      	b.n	800430a <_printf_i+0xee>
 8004304:	0641      	lsls	r1, r0, #25
 8004306:	d5fb      	bpl.n	8004300 <_printf_i+0xe4>
 8004308:	881e      	ldrh	r6, [r3, #0]
 800430a:	4853      	ldr	r0, [pc, #332]	; (8004458 <_printf_i+0x23c>)
 800430c:	2f6f      	cmp	r7, #111	; 0x6f
 800430e:	bf0c      	ite	eq
 8004310:	2308      	moveq	r3, #8
 8004312:	230a      	movne	r3, #10
 8004314:	2100      	movs	r1, #0
 8004316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800431a:	6865      	ldr	r5, [r4, #4]
 800431c:	60a5      	str	r5, [r4, #8]
 800431e:	2d00      	cmp	r5, #0
 8004320:	bfa2      	ittt	ge
 8004322:	6821      	ldrge	r1, [r4, #0]
 8004324:	f021 0104 	bicge.w	r1, r1, #4
 8004328:	6021      	strge	r1, [r4, #0]
 800432a:	b90e      	cbnz	r6, 8004330 <_printf_i+0x114>
 800432c:	2d00      	cmp	r5, #0
 800432e:	d04b      	beq.n	80043c8 <_printf_i+0x1ac>
 8004330:	4615      	mov	r5, r2
 8004332:	fbb6 f1f3 	udiv	r1, r6, r3
 8004336:	fb03 6711 	mls	r7, r3, r1, r6
 800433a:	5dc7      	ldrb	r7, [r0, r7]
 800433c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004340:	4637      	mov	r7, r6
 8004342:	42bb      	cmp	r3, r7
 8004344:	460e      	mov	r6, r1
 8004346:	d9f4      	bls.n	8004332 <_printf_i+0x116>
 8004348:	2b08      	cmp	r3, #8
 800434a:	d10b      	bne.n	8004364 <_printf_i+0x148>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	07de      	lsls	r6, r3, #31
 8004350:	d508      	bpl.n	8004364 <_printf_i+0x148>
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	6861      	ldr	r1, [r4, #4]
 8004356:	4299      	cmp	r1, r3
 8004358:	bfde      	ittt	le
 800435a:	2330      	movle	r3, #48	; 0x30
 800435c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004364:	1b52      	subs	r2, r2, r5
 8004366:	6122      	str	r2, [r4, #16]
 8004368:	f8cd a000 	str.w	sl, [sp]
 800436c:	464b      	mov	r3, r9
 800436e:	aa03      	add	r2, sp, #12
 8004370:	4621      	mov	r1, r4
 8004372:	4640      	mov	r0, r8
 8004374:	f7ff fee4 	bl	8004140 <_printf_common>
 8004378:	3001      	adds	r0, #1
 800437a:	d14a      	bne.n	8004412 <_printf_i+0x1f6>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	b004      	add	sp, #16
 8004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	4833      	ldr	r0, [pc, #204]	; (800445c <_printf_i+0x240>)
 8004390:	2778      	movs	r7, #120	; 0x78
 8004392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	6829      	ldr	r1, [r5, #0]
 800439a:	061f      	lsls	r7, r3, #24
 800439c:	f851 6b04 	ldr.w	r6, [r1], #4
 80043a0:	d402      	bmi.n	80043a8 <_printf_i+0x18c>
 80043a2:	065f      	lsls	r7, r3, #25
 80043a4:	bf48      	it	mi
 80043a6:	b2b6      	uxthmi	r6, r6
 80043a8:	07df      	lsls	r7, r3, #31
 80043aa:	bf48      	it	mi
 80043ac:	f043 0320 	orrmi.w	r3, r3, #32
 80043b0:	6029      	str	r1, [r5, #0]
 80043b2:	bf48      	it	mi
 80043b4:	6023      	strmi	r3, [r4, #0]
 80043b6:	b91e      	cbnz	r6, 80043c0 <_printf_i+0x1a4>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	f023 0320 	bic.w	r3, r3, #32
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	2310      	movs	r3, #16
 80043c2:	e7a7      	b.n	8004314 <_printf_i+0xf8>
 80043c4:	4824      	ldr	r0, [pc, #144]	; (8004458 <_printf_i+0x23c>)
 80043c6:	e7e4      	b.n	8004392 <_printf_i+0x176>
 80043c8:	4615      	mov	r5, r2
 80043ca:	e7bd      	b.n	8004348 <_printf_i+0x12c>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	6826      	ldr	r6, [r4, #0]
 80043d0:	6961      	ldr	r1, [r4, #20]
 80043d2:	1d18      	adds	r0, r3, #4
 80043d4:	6028      	str	r0, [r5, #0]
 80043d6:	0635      	lsls	r5, r6, #24
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	d501      	bpl.n	80043e0 <_printf_i+0x1c4>
 80043dc:	6019      	str	r1, [r3, #0]
 80043de:	e002      	b.n	80043e6 <_printf_i+0x1ca>
 80043e0:	0670      	lsls	r0, r6, #25
 80043e2:	d5fb      	bpl.n	80043dc <_printf_i+0x1c0>
 80043e4:	8019      	strh	r1, [r3, #0]
 80043e6:	2300      	movs	r3, #0
 80043e8:	6123      	str	r3, [r4, #16]
 80043ea:	4615      	mov	r5, r2
 80043ec:	e7bc      	b.n	8004368 <_printf_i+0x14c>
 80043ee:	682b      	ldr	r3, [r5, #0]
 80043f0:	1d1a      	adds	r2, r3, #4
 80043f2:	602a      	str	r2, [r5, #0]
 80043f4:	681d      	ldr	r5, [r3, #0]
 80043f6:	6862      	ldr	r2, [r4, #4]
 80043f8:	2100      	movs	r1, #0
 80043fa:	4628      	mov	r0, r5
 80043fc:	f7fb fee8 	bl	80001d0 <memchr>
 8004400:	b108      	cbz	r0, 8004406 <_printf_i+0x1ea>
 8004402:	1b40      	subs	r0, r0, r5
 8004404:	6060      	str	r0, [r4, #4]
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	2300      	movs	r3, #0
 800440c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004410:	e7aa      	b.n	8004368 <_printf_i+0x14c>
 8004412:	6923      	ldr	r3, [r4, #16]
 8004414:	462a      	mov	r2, r5
 8004416:	4649      	mov	r1, r9
 8004418:	4640      	mov	r0, r8
 800441a:	47d0      	blx	sl
 800441c:	3001      	adds	r0, #1
 800441e:	d0ad      	beq.n	800437c <_printf_i+0x160>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	079b      	lsls	r3, r3, #30
 8004424:	d413      	bmi.n	800444e <_printf_i+0x232>
 8004426:	68e0      	ldr	r0, [r4, #12]
 8004428:	9b03      	ldr	r3, [sp, #12]
 800442a:	4298      	cmp	r0, r3
 800442c:	bfb8      	it	lt
 800442e:	4618      	movlt	r0, r3
 8004430:	e7a6      	b.n	8004380 <_printf_i+0x164>
 8004432:	2301      	movs	r3, #1
 8004434:	4632      	mov	r2, r6
 8004436:	4649      	mov	r1, r9
 8004438:	4640      	mov	r0, r8
 800443a:	47d0      	blx	sl
 800443c:	3001      	adds	r0, #1
 800443e:	d09d      	beq.n	800437c <_printf_i+0x160>
 8004440:	3501      	adds	r5, #1
 8004442:	68e3      	ldr	r3, [r4, #12]
 8004444:	9903      	ldr	r1, [sp, #12]
 8004446:	1a5b      	subs	r3, r3, r1
 8004448:	42ab      	cmp	r3, r5
 800444a:	dcf2      	bgt.n	8004432 <_printf_i+0x216>
 800444c:	e7eb      	b.n	8004426 <_printf_i+0x20a>
 800444e:	2500      	movs	r5, #0
 8004450:	f104 0619 	add.w	r6, r4, #25
 8004454:	e7f5      	b.n	8004442 <_printf_i+0x226>
 8004456:	bf00      	nop
 8004458:	08006e8e 	.word	0x08006e8e
 800445c:	08006e9f 	.word	0x08006e9f

08004460 <std>:
 8004460:	2300      	movs	r3, #0
 8004462:	b510      	push	{r4, lr}
 8004464:	4604      	mov	r4, r0
 8004466:	e9c0 3300 	strd	r3, r3, [r0]
 800446a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800446e:	6083      	str	r3, [r0, #8]
 8004470:	8181      	strh	r1, [r0, #12]
 8004472:	6643      	str	r3, [r0, #100]	; 0x64
 8004474:	81c2      	strh	r2, [r0, #14]
 8004476:	6183      	str	r3, [r0, #24]
 8004478:	4619      	mov	r1, r3
 800447a:	2208      	movs	r2, #8
 800447c:	305c      	adds	r0, #92	; 0x5c
 800447e:	f000 f9f7 	bl	8004870 <memset>
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <std+0x58>)
 8004484:	6263      	str	r3, [r4, #36]	; 0x24
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <std+0x5c>)
 8004488:	62a3      	str	r3, [r4, #40]	; 0x28
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <std+0x60>)
 800448c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <std+0x64>)
 8004490:	6323      	str	r3, [r4, #48]	; 0x30
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <std+0x68>)
 8004494:	6224      	str	r4, [r4, #32]
 8004496:	429c      	cmp	r4, r3
 8004498:	d006      	beq.n	80044a8 <std+0x48>
 800449a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800449e:	4294      	cmp	r4, r2
 80044a0:	d002      	beq.n	80044a8 <std+0x48>
 80044a2:	33d0      	adds	r3, #208	; 0xd0
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d105      	bne.n	80044b4 <std+0x54>
 80044a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f000 ba54 	b.w	800495c <__retarget_lock_init_recursive>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	080046c1 	.word	0x080046c1
 80044bc:	080046e3 	.word	0x080046e3
 80044c0:	0800471b 	.word	0x0800471b
 80044c4:	0800473f 	.word	0x0800473f
 80044c8:	20000264 	.word	0x20000264

080044cc <stdio_exit_handler>:
 80044cc:	4a02      	ldr	r2, [pc, #8]	; (80044d8 <stdio_exit_handler+0xc>)
 80044ce:	4903      	ldr	r1, [pc, #12]	; (80044dc <stdio_exit_handler+0x10>)
 80044d0:	4803      	ldr	r0, [pc, #12]	; (80044e0 <stdio_exit_handler+0x14>)
 80044d2:	f000 b869 	b.w	80045a8 <_fwalk_sglue>
 80044d6:	bf00      	nop
 80044d8:	20000018 	.word	0x20000018
 80044dc:	08006301 	.word	0x08006301
 80044e0:	20000024 	.word	0x20000024

080044e4 <cleanup_stdio>:
 80044e4:	6841      	ldr	r1, [r0, #4]
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <cleanup_stdio+0x34>)
 80044e8:	4299      	cmp	r1, r3
 80044ea:	b510      	push	{r4, lr}
 80044ec:	4604      	mov	r4, r0
 80044ee:	d001      	beq.n	80044f4 <cleanup_stdio+0x10>
 80044f0:	f001 ff06 	bl	8006300 <_fflush_r>
 80044f4:	68a1      	ldr	r1, [r4, #8]
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <cleanup_stdio+0x38>)
 80044f8:	4299      	cmp	r1, r3
 80044fa:	d002      	beq.n	8004502 <cleanup_stdio+0x1e>
 80044fc:	4620      	mov	r0, r4
 80044fe:	f001 feff 	bl	8006300 <_fflush_r>
 8004502:	68e1      	ldr	r1, [r4, #12]
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <cleanup_stdio+0x3c>)
 8004506:	4299      	cmp	r1, r3
 8004508:	d004      	beq.n	8004514 <cleanup_stdio+0x30>
 800450a:	4620      	mov	r0, r4
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004510:	f001 bef6 	b.w	8006300 <_fflush_r>
 8004514:	bd10      	pop	{r4, pc}
 8004516:	bf00      	nop
 8004518:	20000264 	.word	0x20000264
 800451c:	200002cc 	.word	0x200002cc
 8004520:	20000334 	.word	0x20000334

08004524 <global_stdio_init.part.0>:
 8004524:	b510      	push	{r4, lr}
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <global_stdio_init.part.0+0x30>)
 8004528:	4c0b      	ldr	r4, [pc, #44]	; (8004558 <global_stdio_init.part.0+0x34>)
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <global_stdio_init.part.0+0x38>)
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	4620      	mov	r0, r4
 8004530:	2200      	movs	r2, #0
 8004532:	2104      	movs	r1, #4
 8004534:	f7ff ff94 	bl	8004460 <std>
 8004538:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800453c:	2201      	movs	r2, #1
 800453e:	2109      	movs	r1, #9
 8004540:	f7ff ff8e 	bl	8004460 <std>
 8004544:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004548:	2202      	movs	r2, #2
 800454a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454e:	2112      	movs	r1, #18
 8004550:	f7ff bf86 	b.w	8004460 <std>
 8004554:	2000039c 	.word	0x2000039c
 8004558:	20000264 	.word	0x20000264
 800455c:	080044cd 	.word	0x080044cd

08004560 <__sfp_lock_acquire>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__sfp_lock_acquire+0x8>)
 8004562:	f000 b9fc 	b.w	800495e <__retarget_lock_acquire_recursive>
 8004566:	bf00      	nop
 8004568:	200003a5 	.word	0x200003a5

0800456c <__sfp_lock_release>:
 800456c:	4801      	ldr	r0, [pc, #4]	; (8004574 <__sfp_lock_release+0x8>)
 800456e:	f000 b9f7 	b.w	8004960 <__retarget_lock_release_recursive>
 8004572:	bf00      	nop
 8004574:	200003a5 	.word	0x200003a5

08004578 <__sinit>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	f7ff fff0 	bl	8004560 <__sfp_lock_acquire>
 8004580:	6a23      	ldr	r3, [r4, #32]
 8004582:	b11b      	cbz	r3, 800458c <__sinit+0x14>
 8004584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004588:	f7ff bff0 	b.w	800456c <__sfp_lock_release>
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <__sinit+0x28>)
 800458e:	6223      	str	r3, [r4, #32]
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__sinit+0x2c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f5      	bne.n	8004584 <__sinit+0xc>
 8004598:	f7ff ffc4 	bl	8004524 <global_stdio_init.part.0>
 800459c:	e7f2      	b.n	8004584 <__sinit+0xc>
 800459e:	bf00      	nop
 80045a0:	080044e5 	.word	0x080044e5
 80045a4:	2000039c 	.word	0x2000039c

080045a8 <_fwalk_sglue>:
 80045a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ac:	4607      	mov	r7, r0
 80045ae:	4688      	mov	r8, r1
 80045b0:	4614      	mov	r4, r2
 80045b2:	2600      	movs	r6, #0
 80045b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045b8:	f1b9 0901 	subs.w	r9, r9, #1
 80045bc:	d505      	bpl.n	80045ca <_fwalk_sglue+0x22>
 80045be:	6824      	ldr	r4, [r4, #0]
 80045c0:	2c00      	cmp	r4, #0
 80045c2:	d1f7      	bne.n	80045b4 <_fwalk_sglue+0xc>
 80045c4:	4630      	mov	r0, r6
 80045c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d907      	bls.n	80045e0 <_fwalk_sglue+0x38>
 80045d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045d4:	3301      	adds	r3, #1
 80045d6:	d003      	beq.n	80045e0 <_fwalk_sglue+0x38>
 80045d8:	4629      	mov	r1, r5
 80045da:	4638      	mov	r0, r7
 80045dc:	47c0      	blx	r8
 80045de:	4306      	orrs	r6, r0
 80045e0:	3568      	adds	r5, #104	; 0x68
 80045e2:	e7e9      	b.n	80045b8 <_fwalk_sglue+0x10>

080045e4 <iprintf>:
 80045e4:	b40f      	push	{r0, r1, r2, r3}
 80045e6:	b507      	push	{r0, r1, r2, lr}
 80045e8:	4906      	ldr	r1, [pc, #24]	; (8004604 <iprintf+0x20>)
 80045ea:	ab04      	add	r3, sp, #16
 80045ec:	6808      	ldr	r0, [r1, #0]
 80045ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f2:	6881      	ldr	r1, [r0, #8]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	f001 fce3 	bl	8005fc0 <_vfiprintf_r>
 80045fa:	b003      	add	sp, #12
 80045fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004600:	b004      	add	sp, #16
 8004602:	4770      	bx	lr
 8004604:	20000070 	.word	0x20000070

08004608 <_puts_r>:
 8004608:	6a03      	ldr	r3, [r0, #32]
 800460a:	b570      	push	{r4, r5, r6, lr}
 800460c:	6884      	ldr	r4, [r0, #8]
 800460e:	4605      	mov	r5, r0
 8004610:	460e      	mov	r6, r1
 8004612:	b90b      	cbnz	r3, 8004618 <_puts_r+0x10>
 8004614:	f7ff ffb0 	bl	8004578 <__sinit>
 8004618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800461a:	07db      	lsls	r3, r3, #31
 800461c:	d405      	bmi.n	800462a <_puts_r+0x22>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	0598      	lsls	r0, r3, #22
 8004622:	d402      	bmi.n	800462a <_puts_r+0x22>
 8004624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004626:	f000 f99a 	bl	800495e <__retarget_lock_acquire_recursive>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	0719      	lsls	r1, r3, #28
 800462e:	d513      	bpl.n	8004658 <_puts_r+0x50>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	b18b      	cbz	r3, 8004658 <_puts_r+0x50>
 8004634:	3e01      	subs	r6, #1
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800463c:	3b01      	subs	r3, #1
 800463e:	60a3      	str	r3, [r4, #8]
 8004640:	b9e9      	cbnz	r1, 800467e <_puts_r+0x76>
 8004642:	2b00      	cmp	r3, #0
 8004644:	da2e      	bge.n	80046a4 <_puts_r+0x9c>
 8004646:	4622      	mov	r2, r4
 8004648:	210a      	movs	r1, #10
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f87b 	bl	8004746 <__swbuf_r>
 8004650:	3001      	adds	r0, #1
 8004652:	d007      	beq.n	8004664 <_puts_r+0x5c>
 8004654:	250a      	movs	r5, #10
 8004656:	e007      	b.n	8004668 <_puts_r+0x60>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f8b0 	bl	80047c0 <__swsetup_r>
 8004660:	2800      	cmp	r0, #0
 8004662:	d0e7      	beq.n	8004634 <_puts_r+0x2c>
 8004664:	f04f 35ff 	mov.w	r5, #4294967295
 8004668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800466a:	07da      	lsls	r2, r3, #31
 800466c:	d405      	bmi.n	800467a <_puts_r+0x72>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	059b      	lsls	r3, r3, #22
 8004672:	d402      	bmi.n	800467a <_puts_r+0x72>
 8004674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004676:	f000 f973 	bl	8004960 <__retarget_lock_release_recursive>
 800467a:	4628      	mov	r0, r5
 800467c:	bd70      	pop	{r4, r5, r6, pc}
 800467e:	2b00      	cmp	r3, #0
 8004680:	da04      	bge.n	800468c <_puts_r+0x84>
 8004682:	69a2      	ldr	r2, [r4, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	dc06      	bgt.n	8004696 <_puts_r+0x8e>
 8004688:	290a      	cmp	r1, #10
 800468a:	d004      	beq.n	8004696 <_puts_r+0x8e>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	7019      	strb	r1, [r3, #0]
 8004694:	e7cf      	b.n	8004636 <_puts_r+0x2e>
 8004696:	4622      	mov	r2, r4
 8004698:	4628      	mov	r0, r5
 800469a:	f000 f854 	bl	8004746 <__swbuf_r>
 800469e:	3001      	adds	r0, #1
 80046a0:	d1c9      	bne.n	8004636 <_puts_r+0x2e>
 80046a2:	e7df      	b.n	8004664 <_puts_r+0x5c>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	250a      	movs	r5, #10
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	6022      	str	r2, [r4, #0]
 80046ac:	701d      	strb	r5, [r3, #0]
 80046ae:	e7db      	b.n	8004668 <_puts_r+0x60>

080046b0 <puts>:
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <puts+0xc>)
 80046b2:	4601      	mov	r1, r0
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f7ff bfa7 	b.w	8004608 <_puts_r>
 80046ba:	bf00      	nop
 80046bc:	20000070 	.word	0x20000070

080046c0 <__sread>:
 80046c0:	b510      	push	{r4, lr}
 80046c2:	460c      	mov	r4, r1
 80046c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c8:	f000 f900 	bl	80048cc <_read_r>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	bfab      	itete	ge
 80046d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046d2:	89a3      	ldrhlt	r3, [r4, #12]
 80046d4:	181b      	addge	r3, r3, r0
 80046d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046da:	bfac      	ite	ge
 80046dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80046de:	81a3      	strhlt	r3, [r4, #12]
 80046e0:	bd10      	pop	{r4, pc}

080046e2 <__swrite>:
 80046e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e6:	461f      	mov	r7, r3
 80046e8:	898b      	ldrh	r3, [r1, #12]
 80046ea:	05db      	lsls	r3, r3, #23
 80046ec:	4605      	mov	r5, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	4616      	mov	r6, r2
 80046f2:	d505      	bpl.n	8004700 <__swrite+0x1e>
 80046f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f8:	2302      	movs	r3, #2
 80046fa:	2200      	movs	r2, #0
 80046fc:	f000 f8d4 	bl	80048a8 <_lseek_r>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800470a:	81a3      	strh	r3, [r4, #12]
 800470c:	4632      	mov	r2, r6
 800470e:	463b      	mov	r3, r7
 8004710:	4628      	mov	r0, r5
 8004712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004716:	f000 b8eb 	b.w	80048f0 <_write_r>

0800471a <__sseek>:
 800471a:	b510      	push	{r4, lr}
 800471c:	460c      	mov	r4, r1
 800471e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004722:	f000 f8c1 	bl	80048a8 <_lseek_r>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	bf15      	itete	ne
 800472c:	6560      	strne	r0, [r4, #84]	; 0x54
 800472e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004736:	81a3      	strheq	r3, [r4, #12]
 8004738:	bf18      	it	ne
 800473a:	81a3      	strhne	r3, [r4, #12]
 800473c:	bd10      	pop	{r4, pc}

0800473e <__sclose>:
 800473e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004742:	f000 b8a1 	b.w	8004888 <_close_r>

08004746 <__swbuf_r>:
 8004746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004748:	460e      	mov	r6, r1
 800474a:	4614      	mov	r4, r2
 800474c:	4605      	mov	r5, r0
 800474e:	b118      	cbz	r0, 8004758 <__swbuf_r+0x12>
 8004750:	6a03      	ldr	r3, [r0, #32]
 8004752:	b90b      	cbnz	r3, 8004758 <__swbuf_r+0x12>
 8004754:	f7ff ff10 	bl	8004578 <__sinit>
 8004758:	69a3      	ldr	r3, [r4, #24]
 800475a:	60a3      	str	r3, [r4, #8]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	071a      	lsls	r2, r3, #28
 8004760:	d525      	bpl.n	80047ae <__swbuf_r+0x68>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	b31b      	cbz	r3, 80047ae <__swbuf_r+0x68>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	6922      	ldr	r2, [r4, #16]
 800476a:	1a98      	subs	r0, r3, r2
 800476c:	6963      	ldr	r3, [r4, #20]
 800476e:	b2f6      	uxtb	r6, r6
 8004770:	4283      	cmp	r3, r0
 8004772:	4637      	mov	r7, r6
 8004774:	dc04      	bgt.n	8004780 <__swbuf_r+0x3a>
 8004776:	4621      	mov	r1, r4
 8004778:	4628      	mov	r0, r5
 800477a:	f001 fdc1 	bl	8006300 <_fflush_r>
 800477e:	b9e0      	cbnz	r0, 80047ba <__swbuf_r+0x74>
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	3b01      	subs	r3, #1
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	6022      	str	r2, [r4, #0]
 800478c:	701e      	strb	r6, [r3, #0]
 800478e:	6962      	ldr	r2, [r4, #20]
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	429a      	cmp	r2, r3
 8004794:	d004      	beq.n	80047a0 <__swbuf_r+0x5a>
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	07db      	lsls	r3, r3, #31
 800479a:	d506      	bpl.n	80047aa <__swbuf_r+0x64>
 800479c:	2e0a      	cmp	r6, #10
 800479e:	d104      	bne.n	80047aa <__swbuf_r+0x64>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f001 fdac 	bl	8006300 <_fflush_r>
 80047a8:	b938      	cbnz	r0, 80047ba <__swbuf_r+0x74>
 80047aa:	4638      	mov	r0, r7
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 f805 	bl	80047c0 <__swsetup_r>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d0d5      	beq.n	8004766 <__swbuf_r+0x20>
 80047ba:	f04f 37ff 	mov.w	r7, #4294967295
 80047be:	e7f4      	b.n	80047aa <__swbuf_r+0x64>

080047c0 <__swsetup_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4b2a      	ldr	r3, [pc, #168]	; (800486c <__swsetup_r+0xac>)
 80047c4:	4605      	mov	r5, r0
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	460c      	mov	r4, r1
 80047ca:	b118      	cbz	r0, 80047d4 <__swsetup_r+0x14>
 80047cc:	6a03      	ldr	r3, [r0, #32]
 80047ce:	b90b      	cbnz	r3, 80047d4 <__swsetup_r+0x14>
 80047d0:	f7ff fed2 	bl	8004578 <__sinit>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047da:	0718      	lsls	r0, r3, #28
 80047dc:	d422      	bmi.n	8004824 <__swsetup_r+0x64>
 80047de:	06d9      	lsls	r1, r3, #27
 80047e0:	d407      	bmi.n	80047f2 <__swsetup_r+0x32>
 80047e2:	2309      	movs	r3, #9
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	e034      	b.n	800485c <__swsetup_r+0x9c>
 80047f2:	0758      	lsls	r0, r3, #29
 80047f4:	d512      	bpl.n	800481c <__swsetup_r+0x5c>
 80047f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f8:	b141      	cbz	r1, 800480c <__swsetup_r+0x4c>
 80047fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047fe:	4299      	cmp	r1, r3
 8004800:	d002      	beq.n	8004808 <__swsetup_r+0x48>
 8004802:	4628      	mov	r0, r5
 8004804:	f000 ff36 	bl	8005674 <_free_r>
 8004808:	2300      	movs	r3, #0
 800480a:	6363      	str	r3, [r4, #52]	; 0x34
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	2300      	movs	r3, #0
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	81a3      	strh	r3, [r4, #12]
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	b94b      	cbnz	r3, 800483c <__swsetup_r+0x7c>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004832:	d003      	beq.n	800483c <__swsetup_r+0x7c>
 8004834:	4621      	mov	r1, r4
 8004836:	4628      	mov	r0, r5
 8004838:	f001 fdb0 	bl	800639c <__smakebuf_r>
 800483c:	89a0      	ldrh	r0, [r4, #12]
 800483e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004842:	f010 0301 	ands.w	r3, r0, #1
 8004846:	d00a      	beq.n	800485e <__swsetup_r+0x9e>
 8004848:	2300      	movs	r3, #0
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	6963      	ldr	r3, [r4, #20]
 800484e:	425b      	negs	r3, r3
 8004850:	61a3      	str	r3, [r4, #24]
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	b943      	cbnz	r3, 8004868 <__swsetup_r+0xa8>
 8004856:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800485a:	d1c4      	bne.n	80047e6 <__swsetup_r+0x26>
 800485c:	bd38      	pop	{r3, r4, r5, pc}
 800485e:	0781      	lsls	r1, r0, #30
 8004860:	bf58      	it	pl
 8004862:	6963      	ldrpl	r3, [r4, #20]
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	e7f4      	b.n	8004852 <__swsetup_r+0x92>
 8004868:	2000      	movs	r0, #0
 800486a:	e7f7      	b.n	800485c <__swsetup_r+0x9c>
 800486c:	20000070 	.word	0x20000070

08004870 <memset>:
 8004870:	4402      	add	r2, r0
 8004872:	4603      	mov	r3, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <_localeconv_r>:
 8004880:	4800      	ldr	r0, [pc, #0]	; (8004884 <_localeconv_r+0x4>)
 8004882:	4770      	bx	lr
 8004884:	20000164 	.word	0x20000164

08004888 <_close_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4d06      	ldr	r5, [pc, #24]	; (80048a4 <_close_r+0x1c>)
 800488c:	2300      	movs	r3, #0
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f001 ff7a 	bl	800678c <_close>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_close_r+0x1a>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_close_r+0x1a>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	200003a0 	.word	0x200003a0

080048a8 <_lseek_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	4d07      	ldr	r5, [pc, #28]	; (80048c8 <_lseek_r+0x20>)
 80048ac:	4604      	mov	r4, r0
 80048ae:	4608      	mov	r0, r1
 80048b0:	4611      	mov	r1, r2
 80048b2:	2200      	movs	r2, #0
 80048b4:	602a      	str	r2, [r5, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f001 ff25 	bl	8006706 <_lseek>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_lseek_r+0x1e>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_lseek_r+0x1e>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	200003a0 	.word	0x200003a0

080048cc <_read_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d07      	ldr	r5, [pc, #28]	; (80048ec <_read_r+0x20>)
 80048d0:	4604      	mov	r4, r0
 80048d2:	4608      	mov	r0, r1
 80048d4:	4611      	mov	r1, r2
 80048d6:	2200      	movs	r2, #0
 80048d8:	602a      	str	r2, [r5, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	f001 febb 	bl	8006656 <_read>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_read_r+0x1e>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_read_r+0x1e>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	200003a0 	.word	0x200003a0

080048f0 <_write_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d07      	ldr	r5, [pc, #28]	; (8004910 <_write_r+0x20>)
 80048f4:	4604      	mov	r4, r0
 80048f6:	4608      	mov	r0, r1
 80048f8:	4611      	mov	r1, r2
 80048fa:	2200      	movs	r2, #0
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f001 ff13 	bl	800672a <_write>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_write_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_write_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200003a0 	.word	0x200003a0

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4d0d      	ldr	r5, [pc, #52]	; (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2600      	movs	r6, #0
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4d0b      	ldr	r5, [pc, #44]	; (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	; (8004958 <__libc_init_array+0x44>)
 8004928:	f002 f95c 	bl	8006be4 <_init>
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2600      	movs	r6, #0
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f855 3b04 	ldr.w	r3, [r5], #4
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f855 3b04 	ldr.w	r3, [r5], #4
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	08007210 	.word	0x08007210
 8004950:	08007210 	.word	0x08007210
 8004954:	08007210 	.word	0x08007210
 8004958:	08007214 	.word	0x08007214

0800495c <__retarget_lock_init_recursive>:
 800495c:	4770      	bx	lr

0800495e <__retarget_lock_acquire_recursive>:
 800495e:	4770      	bx	lr

08004960 <__retarget_lock_release_recursive>:
 8004960:	4770      	bx	lr

08004962 <memcpy>:
 8004962:	440a      	add	r2, r1
 8004964:	4291      	cmp	r1, r2
 8004966:	f100 33ff 	add.w	r3, r0, #4294967295
 800496a:	d100      	bne.n	800496e <memcpy+0xc>
 800496c:	4770      	bx	lr
 800496e:	b510      	push	{r4, lr}
 8004970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004978:	4291      	cmp	r1, r2
 800497a:	d1f9      	bne.n	8004970 <memcpy+0xe>
 800497c:	bd10      	pop	{r4, pc}

0800497e <quorem>:
 800497e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004982:	6903      	ldr	r3, [r0, #16]
 8004984:	690c      	ldr	r4, [r1, #16]
 8004986:	42a3      	cmp	r3, r4
 8004988:	4607      	mov	r7, r0
 800498a:	db7e      	blt.n	8004a8a <quorem+0x10c>
 800498c:	3c01      	subs	r4, #1
 800498e:	f101 0814 	add.w	r8, r1, #20
 8004992:	f100 0514 	add.w	r5, r0, #20
 8004996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049a4:	3301      	adds	r3, #1
 80049a6:	429a      	cmp	r2, r3
 80049a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80049b4:	d331      	bcc.n	8004a1a <quorem+0x9c>
 80049b6:	f04f 0e00 	mov.w	lr, #0
 80049ba:	4640      	mov	r0, r8
 80049bc:	46ac      	mov	ip, r5
 80049be:	46f2      	mov	sl, lr
 80049c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049c4:	b293      	uxth	r3, r2
 80049c6:	fb06 e303 	mla	r3, r6, r3, lr
 80049ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049ce:	0c1a      	lsrs	r2, r3, #16
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ebaa 0303 	sub.w	r3, sl, r3
 80049d6:	f8dc a000 	ldr.w	sl, [ip]
 80049da:	fa13 f38a 	uxtah	r3, r3, sl
 80049de:	fb06 220e 	mla	r2, r6, lr, r2
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	9b00      	ldr	r3, [sp, #0]
 80049e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049ea:	b292      	uxth	r2, r2
 80049ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80049f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80049f8:	4581      	cmp	r9, r0
 80049fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049fe:	f84c 3b04 	str.w	r3, [ip], #4
 8004a02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a06:	d2db      	bcs.n	80049c0 <quorem+0x42>
 8004a08:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a0c:	b92b      	cbnz	r3, 8004a1a <quorem+0x9c>
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	3b04      	subs	r3, #4
 8004a12:	429d      	cmp	r5, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	d32c      	bcc.n	8004a72 <quorem+0xf4>
 8004a18:	613c      	str	r4, [r7, #16]
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	f001 f9a6 	bl	8005d6c <__mcmp>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	db22      	blt.n	8004a6a <quorem+0xec>
 8004a24:	3601      	adds	r6, #1
 8004a26:	4629      	mov	r1, r5
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a2e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a32:	b293      	uxth	r3, r2
 8004a34:	1ac3      	subs	r3, r0, r3
 8004a36:	0c12      	lsrs	r2, r2, #16
 8004a38:	fa13 f38c 	uxtah	r3, r3, ip
 8004a3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a4a:	45c1      	cmp	r9, r8
 8004a4c:	f841 3b04 	str.w	r3, [r1], #4
 8004a50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a54:	d2e9      	bcs.n	8004a2a <quorem+0xac>
 8004a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a5e:	b922      	cbnz	r2, 8004a6a <quorem+0xec>
 8004a60:	3b04      	subs	r3, #4
 8004a62:	429d      	cmp	r5, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	d30a      	bcc.n	8004a7e <quorem+0x100>
 8004a68:	613c      	str	r4, [r7, #16]
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	b003      	add	sp, #12
 8004a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	3b04      	subs	r3, #4
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	d1ce      	bne.n	8004a18 <quorem+0x9a>
 8004a7a:	3c01      	subs	r4, #1
 8004a7c:	e7c9      	b.n	8004a12 <quorem+0x94>
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	3b04      	subs	r3, #4
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d1f0      	bne.n	8004a68 <quorem+0xea>
 8004a86:	3c01      	subs	r4, #1
 8004a88:	e7eb      	b.n	8004a62 <quorem+0xe4>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7ee      	b.n	8004a6c <quorem+0xee>
	...

08004a90 <_dtoa_r>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	ed2d 8b04 	vpush	{d8-d9}
 8004a98:	69c5      	ldr	r5, [r0, #28]
 8004a9a:	b093      	sub	sp, #76	; 0x4c
 8004a9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004aa0:	ec57 6b10 	vmov	r6, r7, d0
 8004aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004aa8:	9107      	str	r1, [sp, #28]
 8004aaa:	4604      	mov	r4, r0
 8004aac:	920a      	str	r2, [sp, #40]	; 0x28
 8004aae:	930d      	str	r3, [sp, #52]	; 0x34
 8004ab0:	b975      	cbnz	r5, 8004ad0 <_dtoa_r+0x40>
 8004ab2:	2010      	movs	r0, #16
 8004ab4:	f000 fe2a 	bl	800570c <malloc>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	61e0      	str	r0, [r4, #28]
 8004abc:	b920      	cbnz	r0, 8004ac8 <_dtoa_r+0x38>
 8004abe:	4bae      	ldr	r3, [pc, #696]	; (8004d78 <_dtoa_r+0x2e8>)
 8004ac0:	21ef      	movs	r1, #239	; 0xef
 8004ac2:	48ae      	ldr	r0, [pc, #696]	; (8004d7c <_dtoa_r+0x2ec>)
 8004ac4:	f001 fcd8 	bl	8006478 <__assert_func>
 8004ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004acc:	6005      	str	r5, [r0, #0]
 8004ace:	60c5      	str	r5, [r0, #12]
 8004ad0:	69e3      	ldr	r3, [r4, #28]
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	b151      	cbz	r1, 8004aec <_dtoa_r+0x5c>
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	604a      	str	r2, [r1, #4]
 8004ada:	2301      	movs	r3, #1
 8004adc:	4093      	lsls	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 ff07 	bl	80058f4 <_Bfree>
 8004ae6:	69e3      	ldr	r3, [r4, #28]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	1e3b      	subs	r3, r7, #0
 8004aee:	bfbb      	ittet	lt
 8004af0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004af4:	9303      	strlt	r3, [sp, #12]
 8004af6:	2300      	movge	r3, #0
 8004af8:	2201      	movlt	r2, #1
 8004afa:	bfac      	ite	ge
 8004afc:	f8c8 3000 	strge.w	r3, [r8]
 8004b00:	f8c8 2000 	strlt.w	r2, [r8]
 8004b04:	4b9e      	ldr	r3, [pc, #632]	; (8004d80 <_dtoa_r+0x2f0>)
 8004b06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b0a:	ea33 0308 	bics.w	r3, r3, r8
 8004b0e:	d11b      	bne.n	8004b48 <_dtoa_r+0xb8>
 8004b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004b1c:	4333      	orrs	r3, r6
 8004b1e:	f000 8593 	beq.w	8005648 <_dtoa_r+0xbb8>
 8004b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b24:	b963      	cbnz	r3, 8004b40 <_dtoa_r+0xb0>
 8004b26:	4b97      	ldr	r3, [pc, #604]	; (8004d84 <_dtoa_r+0x2f4>)
 8004b28:	e027      	b.n	8004b7a <_dtoa_r+0xea>
 8004b2a:	4b97      	ldr	r3, [pc, #604]	; (8004d88 <_dtoa_r+0x2f8>)
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	9800      	ldr	r0, [sp, #0]
 8004b36:	b013      	add	sp, #76	; 0x4c
 8004b38:	ecbd 8b04 	vpop	{d8-d9}
 8004b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b40:	4b90      	ldr	r3, [pc, #576]	; (8004d84 <_dtoa_r+0x2f4>)
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	3303      	adds	r3, #3
 8004b46:	e7f3      	b.n	8004b30 <_dtoa_r+0xa0>
 8004b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	ec51 0b17 	vmov	r0, r1, d7
 8004b52:	eeb0 8a47 	vmov.f32	s16, s14
 8004b56:	eef0 8a67 	vmov.f32	s17, s15
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f7fb ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b60:	4681      	mov	r9, r0
 8004b62:	b160      	cbz	r0, 8004b7e <_dtoa_r+0xee>
 8004b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b66:	2301      	movs	r3, #1
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8568 	beq.w	8005642 <_dtoa_r+0xbb2>
 8004b72:	4b86      	ldr	r3, [pc, #536]	; (8004d8c <_dtoa_r+0x2fc>)
 8004b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	e7da      	b.n	8004b34 <_dtoa_r+0xa4>
 8004b7e:	aa10      	add	r2, sp, #64	; 0x40
 8004b80:	a911      	add	r1, sp, #68	; 0x44
 8004b82:	4620      	mov	r0, r4
 8004b84:	eeb0 0a48 	vmov.f32	s0, s16
 8004b88:	eef0 0a68 	vmov.f32	s1, s17
 8004b8c:	f001 f994 	bl	8005eb8 <__d2b>
 8004b90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b94:	4682      	mov	sl, r0
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	d07f      	beq.n	8004c9a <_dtoa_r+0x20a>
 8004b9a:	ee18 3a90 	vmov	r3, s17
 8004b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ba6:	ec51 0b18 	vmov	r0, r1, d8
 8004baa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b75      	ldr	r3, [pc, #468]	; (8004d90 <_dtoa_r+0x300>)
 8004bbc:	f7fb fb64 	bl	8000288 <__aeabi_dsub>
 8004bc0:	a367      	add	r3, pc, #412	; (adr r3, 8004d60 <_dtoa_r+0x2d0>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fd17 	bl	80005f8 <__aeabi_dmul>
 8004bca:	a367      	add	r3, pc, #412	; (adr r3, 8004d68 <_dtoa_r+0x2d8>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f7fb fb5c 	bl	800028c <__adddf3>
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	460f      	mov	r7, r1
 8004bda:	f7fb fca3 	bl	8000524 <__aeabi_i2d>
 8004bde:	a364      	add	r3, pc, #400	; (adr r3, 8004d70 <_dtoa_r+0x2e0>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fd08 	bl	80005f8 <__aeabi_dmul>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4630      	mov	r0, r6
 8004bee:	4639      	mov	r1, r7
 8004bf0:	f7fb fb4c 	bl	800028c <__adddf3>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	f7fb ffae 	bl	8000b58 <__aeabi_d2iz>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4683      	mov	fp, r0
 8004c00:	2300      	movs	r3, #0
 8004c02:	4630      	mov	r0, r6
 8004c04:	4639      	mov	r1, r7
 8004c06:	f7fb ff69 	bl	8000adc <__aeabi_dcmplt>
 8004c0a:	b148      	cbz	r0, 8004c20 <_dtoa_r+0x190>
 8004c0c:	4658      	mov	r0, fp
 8004c0e:	f7fb fc89 	bl	8000524 <__aeabi_i2d>
 8004c12:	4632      	mov	r2, r6
 8004c14:	463b      	mov	r3, r7
 8004c16:	f7fb ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c1a:	b908      	cbnz	r0, 8004c20 <_dtoa_r+0x190>
 8004c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c20:	f1bb 0f16 	cmp.w	fp, #22
 8004c24:	d857      	bhi.n	8004cd6 <_dtoa_r+0x246>
 8004c26:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <_dtoa_r+0x304>)
 8004c28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	ec51 0b18 	vmov	r0, r1, d8
 8004c34:	f7fb ff52 	bl	8000adc <__aeabi_dcmplt>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d04e      	beq.n	8004cda <_dtoa_r+0x24a>
 8004c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c40:	2300      	movs	r3, #0
 8004c42:	930c      	str	r3, [sp, #48]	; 0x30
 8004c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c46:	1b5b      	subs	r3, r3, r5
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	bf45      	ittet	mi
 8004c4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c50:	9305      	strmi	r3, [sp, #20]
 8004c52:	2300      	movpl	r3, #0
 8004c54:	2300      	movmi	r3, #0
 8004c56:	9206      	str	r2, [sp, #24]
 8004c58:	bf54      	ite	pl
 8004c5a:	9305      	strpl	r3, [sp, #20]
 8004c5c:	9306      	strmi	r3, [sp, #24]
 8004c5e:	f1bb 0f00 	cmp.w	fp, #0
 8004c62:	db3c      	blt.n	8004cde <_dtoa_r+0x24e>
 8004c64:	9b06      	ldr	r3, [sp, #24]
 8004c66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004c6a:	445b      	add	r3, fp
 8004c6c:	9306      	str	r3, [sp, #24]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9308      	str	r3, [sp, #32]
 8004c72:	9b07      	ldr	r3, [sp, #28]
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	d868      	bhi.n	8004d4a <_dtoa_r+0x2ba>
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	bfc4      	itt	gt
 8004c7c:	3b04      	subgt	r3, #4
 8004c7e:	9307      	strgt	r3, [sp, #28]
 8004c80:	9b07      	ldr	r3, [sp, #28]
 8004c82:	f1a3 0302 	sub.w	r3, r3, #2
 8004c86:	bfcc      	ite	gt
 8004c88:	2500      	movgt	r5, #0
 8004c8a:	2501      	movle	r5, #1
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	f200 8085 	bhi.w	8004d9c <_dtoa_r+0x30c>
 8004c92:	e8df f003 	tbb	[pc, r3]
 8004c96:	3b2e      	.short	0x3b2e
 8004c98:	5839      	.short	0x5839
 8004c9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004c9e:	441d      	add	r5, r3
 8004ca0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	bfc1      	itttt	gt
 8004ca8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cac:	fa08 f803 	lslgt.w	r8, r8, r3
 8004cb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004cb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cb8:	bfd6      	itet	le
 8004cba:	f1c3 0320 	rsble	r3, r3, #32
 8004cbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8004cc2:	fa06 f003 	lslle.w	r0, r6, r3
 8004cc6:	f7fb fc1d 	bl	8000504 <__aeabi_ui2d>
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004cd0:	3d01      	subs	r5, #1
 8004cd2:	920e      	str	r2, [sp, #56]	; 0x38
 8004cd4:	e76f      	b.n	8004bb6 <_dtoa_r+0x126>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e7b3      	b.n	8004c42 <_dtoa_r+0x1b2>
 8004cda:	900c      	str	r0, [sp, #48]	; 0x30
 8004cdc:	e7b2      	b.n	8004c44 <_dtoa_r+0x1b4>
 8004cde:	9b05      	ldr	r3, [sp, #20]
 8004ce0:	eba3 030b 	sub.w	r3, r3, fp
 8004ce4:	9305      	str	r3, [sp, #20]
 8004ce6:	f1cb 0300 	rsb	r3, fp, #0
 8004cea:	9308      	str	r3, [sp, #32]
 8004cec:	2300      	movs	r3, #0
 8004cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf0:	e7bf      	b.n	8004c72 <_dtoa_r+0x1e2>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	dc52      	bgt.n	8004da2 <_dtoa_r+0x312>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	461a      	mov	r2, r3
 8004d04:	920a      	str	r2, [sp, #40]	; 0x28
 8004d06:	e00b      	b.n	8004d20 <_dtoa_r+0x290>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e7f3      	b.n	8004cf4 <_dtoa_r+0x264>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d12:	445b      	add	r3, fp
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	3301      	adds	r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	bfb8      	it	lt
 8004d1e:	2301      	movlt	r3, #1
 8004d20:	69e0      	ldr	r0, [r4, #28]
 8004d22:	2100      	movs	r1, #0
 8004d24:	2204      	movs	r2, #4
 8004d26:	f102 0614 	add.w	r6, r2, #20
 8004d2a:	429e      	cmp	r6, r3
 8004d2c:	d93d      	bls.n	8004daa <_dtoa_r+0x31a>
 8004d2e:	6041      	str	r1, [r0, #4]
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 fd9f 	bl	8005874 <_Balloc>
 8004d36:	9000      	str	r0, [sp, #0]
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d139      	bne.n	8004db0 <_dtoa_r+0x320>
 8004d3c:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <_dtoa_r+0x308>)
 8004d3e:	4602      	mov	r2, r0
 8004d40:	f240 11af 	movw	r1, #431	; 0x1af
 8004d44:	e6bd      	b.n	8004ac2 <_dtoa_r+0x32>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e7e1      	b.n	8004d0e <_dtoa_r+0x27e>
 8004d4a:	2501      	movs	r5, #1
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	9509      	str	r5, [sp, #36]	; 0x24
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2312      	movs	r3, #18
 8004d5e:	e7d1      	b.n	8004d04 <_dtoa_r+0x274>
 8004d60:	636f4361 	.word	0x636f4361
 8004d64:	3fd287a7 	.word	0x3fd287a7
 8004d68:	8b60c8b3 	.word	0x8b60c8b3
 8004d6c:	3fc68a28 	.word	0x3fc68a28
 8004d70:	509f79fb 	.word	0x509f79fb
 8004d74:	3fd34413 	.word	0x3fd34413
 8004d78:	08006ebd 	.word	0x08006ebd
 8004d7c:	08006ed4 	.word	0x08006ed4
 8004d80:	7ff00000 	.word	0x7ff00000
 8004d84:	08006eb9 	.word	0x08006eb9
 8004d88:	08006eb0 	.word	0x08006eb0
 8004d8c:	08006e8d 	.word	0x08006e8d
 8004d90:	3ff80000 	.word	0x3ff80000
 8004d94:	08006fc0 	.word	0x08006fc0
 8004d98:	08006f2c 	.word	0x08006f2c
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004da0:	e7d7      	b.n	8004d52 <_dtoa_r+0x2c2>
 8004da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	e7ba      	b.n	8004d20 <_dtoa_r+0x290>
 8004daa:	3101      	adds	r1, #1
 8004dac:	0052      	lsls	r2, r2, #1
 8004dae:	e7ba      	b.n	8004d26 <_dtoa_r+0x296>
 8004db0:	69e3      	ldr	r3, [r4, #28]
 8004db2:	9a00      	ldr	r2, [sp, #0]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	9b04      	ldr	r3, [sp, #16]
 8004db8:	2b0e      	cmp	r3, #14
 8004dba:	f200 80a8 	bhi.w	8004f0e <_dtoa_r+0x47e>
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	f000 80a5 	beq.w	8004f0e <_dtoa_r+0x47e>
 8004dc4:	f1bb 0f00 	cmp.w	fp, #0
 8004dc8:	dd38      	ble.n	8004e3c <_dtoa_r+0x3ac>
 8004dca:	4bc0      	ldr	r3, [pc, #768]	; (80050cc <_dtoa_r+0x63c>)
 8004dcc:	f00b 020f 	and.w	r2, fp, #15
 8004dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004dd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ddc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004de0:	d019      	beq.n	8004e16 <_dtoa_r+0x386>
 8004de2:	4bbb      	ldr	r3, [pc, #748]	; (80050d0 <_dtoa_r+0x640>)
 8004de4:	ec51 0b18 	vmov	r0, r1, d8
 8004de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dec:	f7fb fd2e 	bl	800084c <__aeabi_ddiv>
 8004df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004df4:	f008 080f 	and.w	r8, r8, #15
 8004df8:	2503      	movs	r5, #3
 8004dfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80050d0 <_dtoa_r+0x640>
 8004dfe:	f1b8 0f00 	cmp.w	r8, #0
 8004e02:	d10a      	bne.n	8004e1a <_dtoa_r+0x38a>
 8004e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e08:	4632      	mov	r2, r6
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	f7fb fd1e 	bl	800084c <__aeabi_ddiv>
 8004e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e14:	e02b      	b.n	8004e6e <_dtoa_r+0x3de>
 8004e16:	2502      	movs	r5, #2
 8004e18:	e7ef      	b.n	8004dfa <_dtoa_r+0x36a>
 8004e1a:	f018 0f01 	tst.w	r8, #1
 8004e1e:	d008      	beq.n	8004e32 <_dtoa_r+0x3a2>
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004e28:	f7fb fbe6 	bl	80005f8 <__aeabi_dmul>
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	4606      	mov	r6, r0
 8004e30:	460f      	mov	r7, r1
 8004e32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e36:	f109 0908 	add.w	r9, r9, #8
 8004e3a:	e7e0      	b.n	8004dfe <_dtoa_r+0x36e>
 8004e3c:	f000 809f 	beq.w	8004f7e <_dtoa_r+0x4ee>
 8004e40:	f1cb 0600 	rsb	r6, fp, #0
 8004e44:	4ba1      	ldr	r3, [pc, #644]	; (80050cc <_dtoa_r+0x63c>)
 8004e46:	4fa2      	ldr	r7, [pc, #648]	; (80050d0 <_dtoa_r+0x640>)
 8004e48:	f006 020f 	and.w	r2, r6, #15
 8004e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	ec51 0b18 	vmov	r0, r1, d8
 8004e58:	f7fb fbce 	bl	80005f8 <__aeabi_dmul>
 8004e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e60:	1136      	asrs	r6, r6, #4
 8004e62:	2300      	movs	r3, #0
 8004e64:	2502      	movs	r5, #2
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d17e      	bne.n	8004f68 <_dtoa_r+0x4d8>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1d0      	bne.n	8004e10 <_dtoa_r+0x380>
 8004e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8084 	beq.w	8004f82 <_dtoa_r+0x4f2>
 8004e7a:	4b96      	ldr	r3, [pc, #600]	; (80050d4 <_dtoa_r+0x644>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb fe2b 	bl	8000adc <__aeabi_dcmplt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d07b      	beq.n	8004f82 <_dtoa_r+0x4f2>
 8004e8a:	9b04      	ldr	r3, [sp, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d078      	beq.n	8004f82 <_dtoa_r+0x4f2>
 8004e90:	9b01      	ldr	r3, [sp, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd39      	ble.n	8004f0a <_dtoa_r+0x47a>
 8004e96:	4b90      	ldr	r3, [pc, #576]	; (80050d8 <_dtoa_r+0x648>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	f7fb fbab 	bl	80005f8 <__aeabi_dmul>
 8004ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea6:	9e01      	ldr	r6, [sp, #4]
 8004ea8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004eac:	3501      	adds	r5, #1
 8004eae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f7fb fb36 	bl	8000524 <__aeabi_i2d>
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	f7fb fb9c 	bl	80005f8 <__aeabi_dmul>
 8004ec0:	4b86      	ldr	r3, [pc, #536]	; (80050dc <_dtoa_r+0x64c>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f7fb f9e2 	bl	800028c <__adddf3>
 8004ec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed0:	9303      	str	r3, [sp, #12]
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	d158      	bne.n	8004f88 <_dtoa_r+0x4f8>
 8004ed6:	4b82      	ldr	r3, [pc, #520]	; (80050e0 <_dtoa_r+0x650>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4640      	mov	r0, r8
 8004edc:	4649      	mov	r1, r9
 8004ede:	f7fb f9d3 	bl	8000288 <__aeabi_dsub>
 8004ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee6:	4680      	mov	r8, r0
 8004ee8:	4689      	mov	r9, r1
 8004eea:	f7fb fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f040 8296 	bne.w	8005420 <_dtoa_r+0x990>
 8004ef4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ef8:	4640      	mov	r0, r8
 8004efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004efe:	4649      	mov	r1, r9
 8004f00:	f7fb fdec 	bl	8000adc <__aeabi_dcmplt>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f040 8289 	bne.w	800541c <_dtoa_r+0x98c>
 8004f0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f2c0 814e 	blt.w	80051b2 <_dtoa_r+0x722>
 8004f16:	f1bb 0f0e 	cmp.w	fp, #14
 8004f1a:	f300 814a 	bgt.w	80051b2 <_dtoa_r+0x722>
 8004f1e:	4b6b      	ldr	r3, [pc, #428]	; (80050cc <_dtoa_r+0x63c>)
 8004f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f280 80dc 	bge.w	80050e8 <_dtoa_r+0x658>
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f300 80d8 	bgt.w	80050e8 <_dtoa_r+0x658>
 8004f38:	f040 826f 	bne.w	800541a <_dtoa_r+0x98a>
 8004f3c:	4b68      	ldr	r3, [pc, #416]	; (80050e0 <_dtoa_r+0x650>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	4640      	mov	r0, r8
 8004f42:	4649      	mov	r1, r9
 8004f44:	f7fb fb58 	bl	80005f8 <__aeabi_dmul>
 8004f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f4c:	f7fb fdda 	bl	8000b04 <__aeabi_dcmpge>
 8004f50:	9e04      	ldr	r6, [sp, #16]
 8004f52:	4637      	mov	r7, r6
 8004f54:	2800      	cmp	r0, #0
 8004f56:	f040 8245 	bne.w	80053e4 <_dtoa_r+0x954>
 8004f5a:	9d00      	ldr	r5, [sp, #0]
 8004f5c:	2331      	movs	r3, #49	; 0x31
 8004f5e:	f805 3b01 	strb.w	r3, [r5], #1
 8004f62:	f10b 0b01 	add.w	fp, fp, #1
 8004f66:	e241      	b.n	80053ec <_dtoa_r+0x95c>
 8004f68:	07f2      	lsls	r2, r6, #31
 8004f6a:	d505      	bpl.n	8004f78 <_dtoa_r+0x4e8>
 8004f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f70:	f7fb fb42 	bl	80005f8 <__aeabi_dmul>
 8004f74:	3501      	adds	r5, #1
 8004f76:	2301      	movs	r3, #1
 8004f78:	1076      	asrs	r6, r6, #1
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	e773      	b.n	8004e66 <_dtoa_r+0x3d6>
 8004f7e:	2502      	movs	r5, #2
 8004f80:	e775      	b.n	8004e6e <_dtoa_r+0x3de>
 8004f82:	9e04      	ldr	r6, [sp, #16]
 8004f84:	465f      	mov	r7, fp
 8004f86:	e792      	b.n	8004eae <_dtoa_r+0x41e>
 8004f88:	9900      	ldr	r1, [sp, #0]
 8004f8a:	4b50      	ldr	r3, [pc, #320]	; (80050cc <_dtoa_r+0x63c>)
 8004f8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f90:	4431      	add	r1, r6
 8004f92:	9102      	str	r1, [sp, #8]
 8004f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f96:	eeb0 9a47 	vmov.f32	s18, s14
 8004f9a:	eef0 9a67 	vmov.f32	s19, s15
 8004f9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d044      	beq.n	8005034 <_dtoa_r+0x5a4>
 8004faa:	494e      	ldr	r1, [pc, #312]	; (80050e4 <_dtoa_r+0x654>)
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fb fc4d 	bl	800084c <__aeabi_ddiv>
 8004fb2:	ec53 2b19 	vmov	r2, r3, d9
 8004fb6:	f7fb f967 	bl	8000288 <__aeabi_dsub>
 8004fba:	9d00      	ldr	r5, [sp, #0]
 8004fbc:	ec41 0b19 	vmov	d9, r0, r1
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	f7fb fdc8 	bl	8000b58 <__aeabi_d2iz>
 8004fc8:	4606      	mov	r6, r0
 8004fca:	f7fb faab 	bl	8000524 <__aeabi_i2d>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	f7fb f957 	bl	8000288 <__aeabi_dsub>
 8004fda:	3630      	adds	r6, #48	; 0x30
 8004fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8004fe0:	ec53 2b19 	vmov	r2, r3, d9
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	4689      	mov	r9, r1
 8004fe8:	f7fb fd78 	bl	8000adc <__aeabi_dcmplt>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d164      	bne.n	80050ba <_dtoa_r+0x62a>
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	4937      	ldr	r1, [pc, #220]	; (80050d4 <_dtoa_r+0x644>)
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f7fb f946 	bl	8000288 <__aeabi_dsub>
 8004ffc:	ec53 2b19 	vmov	r2, r3, d9
 8005000:	f7fb fd6c 	bl	8000adc <__aeabi_dcmplt>
 8005004:	2800      	cmp	r0, #0
 8005006:	f040 80b6 	bne.w	8005176 <_dtoa_r+0x6e6>
 800500a:	9b02      	ldr	r3, [sp, #8]
 800500c:	429d      	cmp	r5, r3
 800500e:	f43f af7c 	beq.w	8004f0a <_dtoa_r+0x47a>
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <_dtoa_r+0x648>)
 8005014:	ec51 0b19 	vmov	r0, r1, d9
 8005018:	2200      	movs	r2, #0
 800501a:	f7fb faed 	bl	80005f8 <__aeabi_dmul>
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <_dtoa_r+0x648>)
 8005020:	ec41 0b19 	vmov	d9, r0, r1
 8005024:	2200      	movs	r2, #0
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb fae5 	bl	80005f8 <__aeabi_dmul>
 800502e:	4680      	mov	r8, r0
 8005030:	4689      	mov	r9, r1
 8005032:	e7c5      	b.n	8004fc0 <_dtoa_r+0x530>
 8005034:	ec51 0b17 	vmov	r0, r1, d7
 8005038:	f7fb fade 	bl	80005f8 <__aeabi_dmul>
 800503c:	9b02      	ldr	r3, [sp, #8]
 800503e:	9d00      	ldr	r5, [sp, #0]
 8005040:	930f      	str	r3, [sp, #60]	; 0x3c
 8005042:	ec41 0b19 	vmov	d9, r0, r1
 8005046:	4649      	mov	r1, r9
 8005048:	4640      	mov	r0, r8
 800504a:	f7fb fd85 	bl	8000b58 <__aeabi_d2iz>
 800504e:	4606      	mov	r6, r0
 8005050:	f7fb fa68 	bl	8000524 <__aeabi_i2d>
 8005054:	3630      	adds	r6, #48	; 0x30
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4640      	mov	r0, r8
 800505c:	4649      	mov	r1, r9
 800505e:	f7fb f913 	bl	8000288 <__aeabi_dsub>
 8005062:	f805 6b01 	strb.w	r6, [r5], #1
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	429d      	cmp	r5, r3
 800506a:	4680      	mov	r8, r0
 800506c:	4689      	mov	r9, r1
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	d124      	bne.n	80050be <_dtoa_r+0x62e>
 8005074:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <_dtoa_r+0x654>)
 8005076:	ec51 0b19 	vmov	r0, r1, d9
 800507a:	f7fb f907 	bl	800028c <__adddf3>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4640      	mov	r0, r8
 8005084:	4649      	mov	r1, r9
 8005086:	f7fb fd47 	bl	8000b18 <__aeabi_dcmpgt>
 800508a:	2800      	cmp	r0, #0
 800508c:	d173      	bne.n	8005176 <_dtoa_r+0x6e6>
 800508e:	ec53 2b19 	vmov	r2, r3, d9
 8005092:	4914      	ldr	r1, [pc, #80]	; (80050e4 <_dtoa_r+0x654>)
 8005094:	2000      	movs	r0, #0
 8005096:	f7fb f8f7 	bl	8000288 <__aeabi_dsub>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb fd1b 	bl	8000adc <__aeabi_dcmplt>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f43f af2f 	beq.w	8004f0a <_dtoa_r+0x47a>
 80050ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050ae:	1e6b      	subs	r3, r5, #1
 80050b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80050b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050b6:	2b30      	cmp	r3, #48	; 0x30
 80050b8:	d0f8      	beq.n	80050ac <_dtoa_r+0x61c>
 80050ba:	46bb      	mov	fp, r7
 80050bc:	e04a      	b.n	8005154 <_dtoa_r+0x6c4>
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <_dtoa_r+0x648>)
 80050c0:	f7fb fa9a 	bl	80005f8 <__aeabi_dmul>
 80050c4:	4680      	mov	r8, r0
 80050c6:	4689      	mov	r9, r1
 80050c8:	e7bd      	b.n	8005046 <_dtoa_r+0x5b6>
 80050ca:	bf00      	nop
 80050cc:	08006fc0 	.word	0x08006fc0
 80050d0:	08006f98 	.word	0x08006f98
 80050d4:	3ff00000 	.word	0x3ff00000
 80050d8:	40240000 	.word	0x40240000
 80050dc:	401c0000 	.word	0x401c0000
 80050e0:	40140000 	.word	0x40140000
 80050e4:	3fe00000 	.word	0x3fe00000
 80050e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050ec:	9d00      	ldr	r5, [sp, #0]
 80050ee:	4642      	mov	r2, r8
 80050f0:	464b      	mov	r3, r9
 80050f2:	4630      	mov	r0, r6
 80050f4:	4639      	mov	r1, r7
 80050f6:	f7fb fba9 	bl	800084c <__aeabi_ddiv>
 80050fa:	f7fb fd2d 	bl	8000b58 <__aeabi_d2iz>
 80050fe:	9001      	str	r0, [sp, #4]
 8005100:	f7fb fa10 	bl	8000524 <__aeabi_i2d>
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	f7fb fa76 	bl	80005f8 <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb f8b8 	bl	8000288 <__aeabi_dsub>
 8005118:	9e01      	ldr	r6, [sp, #4]
 800511a:	9f04      	ldr	r7, [sp, #16]
 800511c:	3630      	adds	r6, #48	; 0x30
 800511e:	f805 6b01 	strb.w	r6, [r5], #1
 8005122:	9e00      	ldr	r6, [sp, #0]
 8005124:	1bae      	subs	r6, r5, r6
 8005126:	42b7      	cmp	r7, r6
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	d134      	bne.n	8005198 <_dtoa_r+0x708>
 800512e:	f7fb f8ad 	bl	800028c <__adddf3>
 8005132:	4642      	mov	r2, r8
 8005134:	464b      	mov	r3, r9
 8005136:	4606      	mov	r6, r0
 8005138:	460f      	mov	r7, r1
 800513a:	f7fb fced 	bl	8000b18 <__aeabi_dcmpgt>
 800513e:	b9c8      	cbnz	r0, 8005174 <_dtoa_r+0x6e4>
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	4630      	mov	r0, r6
 8005146:	4639      	mov	r1, r7
 8005148:	f7fb fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800514c:	b110      	cbz	r0, 8005154 <_dtoa_r+0x6c4>
 800514e:	9b01      	ldr	r3, [sp, #4]
 8005150:	07db      	lsls	r3, r3, #31
 8005152:	d40f      	bmi.n	8005174 <_dtoa_r+0x6e4>
 8005154:	4651      	mov	r1, sl
 8005156:	4620      	mov	r0, r4
 8005158:	f000 fbcc 	bl	80058f4 <_Bfree>
 800515c:	2300      	movs	r3, #0
 800515e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005160:	702b      	strb	r3, [r5, #0]
 8005162:	f10b 0301 	add.w	r3, fp, #1
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800516a:	2b00      	cmp	r3, #0
 800516c:	f43f ace2 	beq.w	8004b34 <_dtoa_r+0xa4>
 8005170:	601d      	str	r5, [r3, #0]
 8005172:	e4df      	b.n	8004b34 <_dtoa_r+0xa4>
 8005174:	465f      	mov	r7, fp
 8005176:	462b      	mov	r3, r5
 8005178:	461d      	mov	r5, r3
 800517a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800517e:	2a39      	cmp	r2, #57	; 0x39
 8005180:	d106      	bne.n	8005190 <_dtoa_r+0x700>
 8005182:	9a00      	ldr	r2, [sp, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d1f7      	bne.n	8005178 <_dtoa_r+0x6e8>
 8005188:	9900      	ldr	r1, [sp, #0]
 800518a:	2230      	movs	r2, #48	; 0x30
 800518c:	3701      	adds	r7, #1
 800518e:	700a      	strb	r2, [r1, #0]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	3201      	adds	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e790      	b.n	80050ba <_dtoa_r+0x62a>
 8005198:	4ba3      	ldr	r3, [pc, #652]	; (8005428 <_dtoa_r+0x998>)
 800519a:	2200      	movs	r2, #0
 800519c:	f7fb fa2c 	bl	80005f8 <__aeabi_dmul>
 80051a0:	2200      	movs	r2, #0
 80051a2:	2300      	movs	r3, #0
 80051a4:	4606      	mov	r6, r0
 80051a6:	460f      	mov	r7, r1
 80051a8:	f7fb fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d09e      	beq.n	80050ee <_dtoa_r+0x65e>
 80051b0:	e7d0      	b.n	8005154 <_dtoa_r+0x6c4>
 80051b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b4:	2a00      	cmp	r2, #0
 80051b6:	f000 80ca 	beq.w	800534e <_dtoa_r+0x8be>
 80051ba:	9a07      	ldr	r2, [sp, #28]
 80051bc:	2a01      	cmp	r2, #1
 80051be:	f300 80ad 	bgt.w	800531c <_dtoa_r+0x88c>
 80051c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	f000 80a5 	beq.w	8005314 <_dtoa_r+0x884>
 80051ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051ce:	9e08      	ldr	r6, [sp, #32]
 80051d0:	9d05      	ldr	r5, [sp, #20]
 80051d2:	9a05      	ldr	r2, [sp, #20]
 80051d4:	441a      	add	r2, r3
 80051d6:	9205      	str	r2, [sp, #20]
 80051d8:	9a06      	ldr	r2, [sp, #24]
 80051da:	2101      	movs	r1, #1
 80051dc:	441a      	add	r2, r3
 80051de:	4620      	mov	r0, r4
 80051e0:	9206      	str	r2, [sp, #24]
 80051e2:	f000 fc3d 	bl	8005a60 <__i2b>
 80051e6:	4607      	mov	r7, r0
 80051e8:	b165      	cbz	r5, 8005204 <_dtoa_r+0x774>
 80051ea:	9b06      	ldr	r3, [sp, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dd09      	ble.n	8005204 <_dtoa_r+0x774>
 80051f0:	42ab      	cmp	r3, r5
 80051f2:	9a05      	ldr	r2, [sp, #20]
 80051f4:	bfa8      	it	ge
 80051f6:	462b      	movge	r3, r5
 80051f8:	1ad2      	subs	r2, r2, r3
 80051fa:	9205      	str	r2, [sp, #20]
 80051fc:	9a06      	ldr	r2, [sp, #24]
 80051fe:	1aed      	subs	r5, r5, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	9306      	str	r3, [sp, #24]
 8005204:	9b08      	ldr	r3, [sp, #32]
 8005206:	b1f3      	cbz	r3, 8005246 <_dtoa_r+0x7b6>
 8005208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80a3 	beq.w	8005356 <_dtoa_r+0x8c6>
 8005210:	2e00      	cmp	r6, #0
 8005212:	dd10      	ble.n	8005236 <_dtoa_r+0x7a6>
 8005214:	4639      	mov	r1, r7
 8005216:	4632      	mov	r2, r6
 8005218:	4620      	mov	r0, r4
 800521a:	f000 fce1 	bl	8005be0 <__pow5mult>
 800521e:	4652      	mov	r2, sl
 8005220:	4601      	mov	r1, r0
 8005222:	4607      	mov	r7, r0
 8005224:	4620      	mov	r0, r4
 8005226:	f000 fc31 	bl	8005a8c <__multiply>
 800522a:	4651      	mov	r1, sl
 800522c:	4680      	mov	r8, r0
 800522e:	4620      	mov	r0, r4
 8005230:	f000 fb60 	bl	80058f4 <_Bfree>
 8005234:	46c2      	mov	sl, r8
 8005236:	9b08      	ldr	r3, [sp, #32]
 8005238:	1b9a      	subs	r2, r3, r6
 800523a:	d004      	beq.n	8005246 <_dtoa_r+0x7b6>
 800523c:	4651      	mov	r1, sl
 800523e:	4620      	mov	r0, r4
 8005240:	f000 fcce 	bl	8005be0 <__pow5mult>
 8005244:	4682      	mov	sl, r0
 8005246:	2101      	movs	r1, #1
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fc09 	bl	8005a60 <__i2b>
 800524e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	4606      	mov	r6, r0
 8005254:	f340 8081 	ble.w	800535a <_dtoa_r+0x8ca>
 8005258:	461a      	mov	r2, r3
 800525a:	4601      	mov	r1, r0
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fcbf 	bl	8005be0 <__pow5mult>
 8005262:	9b07      	ldr	r3, [sp, #28]
 8005264:	2b01      	cmp	r3, #1
 8005266:	4606      	mov	r6, r0
 8005268:	dd7a      	ble.n	8005360 <_dtoa_r+0x8d0>
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	6933      	ldr	r3, [r6, #16]
 8005270:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005274:	6918      	ldr	r0, [r3, #16]
 8005276:	f000 fba5 	bl	80059c4 <__hi0bits>
 800527a:	f1c0 0020 	rsb	r0, r0, #32
 800527e:	9b06      	ldr	r3, [sp, #24]
 8005280:	4418      	add	r0, r3
 8005282:	f010 001f 	ands.w	r0, r0, #31
 8005286:	f000 8094 	beq.w	80053b2 <_dtoa_r+0x922>
 800528a:	f1c0 0320 	rsb	r3, r0, #32
 800528e:	2b04      	cmp	r3, #4
 8005290:	f340 8085 	ble.w	800539e <_dtoa_r+0x90e>
 8005294:	9b05      	ldr	r3, [sp, #20]
 8005296:	f1c0 001c 	rsb	r0, r0, #28
 800529a:	4403      	add	r3, r0
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	9b06      	ldr	r3, [sp, #24]
 80052a0:	4403      	add	r3, r0
 80052a2:	4405      	add	r5, r0
 80052a4:	9306      	str	r3, [sp, #24]
 80052a6:	9b05      	ldr	r3, [sp, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd05      	ble.n	80052b8 <_dtoa_r+0x828>
 80052ac:	4651      	mov	r1, sl
 80052ae:	461a      	mov	r2, r3
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fcef 	bl	8005c94 <__lshift>
 80052b6:	4682      	mov	sl, r0
 80052b8:	9b06      	ldr	r3, [sp, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd05      	ble.n	80052ca <_dtoa_r+0x83a>
 80052be:	4631      	mov	r1, r6
 80052c0:	461a      	mov	r2, r3
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fce6 	bl	8005c94 <__lshift>
 80052c8:	4606      	mov	r6, r0
 80052ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d072      	beq.n	80053b6 <_dtoa_r+0x926>
 80052d0:	4631      	mov	r1, r6
 80052d2:	4650      	mov	r0, sl
 80052d4:	f000 fd4a 	bl	8005d6c <__mcmp>
 80052d8:	2800      	cmp	r0, #0
 80052da:	da6c      	bge.n	80053b6 <_dtoa_r+0x926>
 80052dc:	2300      	movs	r3, #0
 80052de:	4651      	mov	r1, sl
 80052e0:	220a      	movs	r2, #10
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 fb28 	bl	8005938 <__multadd>
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052ee:	4682      	mov	sl, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 81b0 	beq.w	8005656 <_dtoa_r+0xbc6>
 80052f6:	2300      	movs	r3, #0
 80052f8:	4639      	mov	r1, r7
 80052fa:	220a      	movs	r2, #10
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 fb1b 	bl	8005938 <__multadd>
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	4607      	mov	r7, r0
 8005308:	f300 8096 	bgt.w	8005438 <_dtoa_r+0x9a8>
 800530c:	9b07      	ldr	r3, [sp, #28]
 800530e:	2b02      	cmp	r3, #2
 8005310:	dc59      	bgt.n	80053c6 <_dtoa_r+0x936>
 8005312:	e091      	b.n	8005438 <_dtoa_r+0x9a8>
 8005314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800531a:	e758      	b.n	80051ce <_dtoa_r+0x73e>
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	1e5e      	subs	r6, r3, #1
 8005320:	9b08      	ldr	r3, [sp, #32]
 8005322:	42b3      	cmp	r3, r6
 8005324:	bfbf      	itttt	lt
 8005326:	9b08      	ldrlt	r3, [sp, #32]
 8005328:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800532a:	9608      	strlt	r6, [sp, #32]
 800532c:	1af3      	sublt	r3, r6, r3
 800532e:	bfb4      	ite	lt
 8005330:	18d2      	addlt	r2, r2, r3
 8005332:	1b9e      	subge	r6, r3, r6
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	bfbc      	itt	lt
 8005338:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800533a:	2600      	movlt	r6, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	bfb7      	itett	lt
 8005340:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005344:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005348:	1a9d      	sublt	r5, r3, r2
 800534a:	2300      	movlt	r3, #0
 800534c:	e741      	b.n	80051d2 <_dtoa_r+0x742>
 800534e:	9e08      	ldr	r6, [sp, #32]
 8005350:	9d05      	ldr	r5, [sp, #20]
 8005352:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005354:	e748      	b.n	80051e8 <_dtoa_r+0x758>
 8005356:	9a08      	ldr	r2, [sp, #32]
 8005358:	e770      	b.n	800523c <_dtoa_r+0x7ac>
 800535a:	9b07      	ldr	r3, [sp, #28]
 800535c:	2b01      	cmp	r3, #1
 800535e:	dc19      	bgt.n	8005394 <_dtoa_r+0x904>
 8005360:	9b02      	ldr	r3, [sp, #8]
 8005362:	b9bb      	cbnz	r3, 8005394 <_dtoa_r+0x904>
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800536a:	b99b      	cbnz	r3, 8005394 <_dtoa_r+0x904>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005372:	0d1b      	lsrs	r3, r3, #20
 8005374:	051b      	lsls	r3, r3, #20
 8005376:	b183      	cbz	r3, 800539a <_dtoa_r+0x90a>
 8005378:	9b05      	ldr	r3, [sp, #20]
 800537a:	3301      	adds	r3, #1
 800537c:	9305      	str	r3, [sp, #20]
 800537e:	9b06      	ldr	r3, [sp, #24]
 8005380:	3301      	adds	r3, #1
 8005382:	9306      	str	r3, [sp, #24]
 8005384:	f04f 0801 	mov.w	r8, #1
 8005388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	f47f af6f 	bne.w	800526e <_dtoa_r+0x7de>
 8005390:	2001      	movs	r0, #1
 8005392:	e774      	b.n	800527e <_dtoa_r+0x7ee>
 8005394:	f04f 0800 	mov.w	r8, #0
 8005398:	e7f6      	b.n	8005388 <_dtoa_r+0x8f8>
 800539a:	4698      	mov	r8, r3
 800539c:	e7f4      	b.n	8005388 <_dtoa_r+0x8f8>
 800539e:	d082      	beq.n	80052a6 <_dtoa_r+0x816>
 80053a0:	9a05      	ldr	r2, [sp, #20]
 80053a2:	331c      	adds	r3, #28
 80053a4:	441a      	add	r2, r3
 80053a6:	9205      	str	r2, [sp, #20]
 80053a8:	9a06      	ldr	r2, [sp, #24]
 80053aa:	441a      	add	r2, r3
 80053ac:	441d      	add	r5, r3
 80053ae:	9206      	str	r2, [sp, #24]
 80053b0:	e779      	b.n	80052a6 <_dtoa_r+0x816>
 80053b2:	4603      	mov	r3, r0
 80053b4:	e7f4      	b.n	80053a0 <_dtoa_r+0x910>
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dc37      	bgt.n	800542c <_dtoa_r+0x99c>
 80053bc:	9b07      	ldr	r3, [sp, #28]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	dd34      	ble.n	800542c <_dtoa_r+0x99c>
 80053c2:	9b04      	ldr	r3, [sp, #16]
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	9b01      	ldr	r3, [sp, #4]
 80053c8:	b963      	cbnz	r3, 80053e4 <_dtoa_r+0x954>
 80053ca:	4631      	mov	r1, r6
 80053cc:	2205      	movs	r2, #5
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 fab2 	bl	8005938 <__multadd>
 80053d4:	4601      	mov	r1, r0
 80053d6:	4606      	mov	r6, r0
 80053d8:	4650      	mov	r0, sl
 80053da:	f000 fcc7 	bl	8005d6c <__mcmp>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f73f adbb 	bgt.w	8004f5a <_dtoa_r+0x4ca>
 80053e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e6:	9d00      	ldr	r5, [sp, #0]
 80053e8:	ea6f 0b03 	mvn.w	fp, r3
 80053ec:	f04f 0800 	mov.w	r8, #0
 80053f0:	4631      	mov	r1, r6
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fa7e 	bl	80058f4 <_Bfree>
 80053f8:	2f00      	cmp	r7, #0
 80053fa:	f43f aeab 	beq.w	8005154 <_dtoa_r+0x6c4>
 80053fe:	f1b8 0f00 	cmp.w	r8, #0
 8005402:	d005      	beq.n	8005410 <_dtoa_r+0x980>
 8005404:	45b8      	cmp	r8, r7
 8005406:	d003      	beq.n	8005410 <_dtoa_r+0x980>
 8005408:	4641      	mov	r1, r8
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fa72 	bl	80058f4 <_Bfree>
 8005410:	4639      	mov	r1, r7
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fa6e 	bl	80058f4 <_Bfree>
 8005418:	e69c      	b.n	8005154 <_dtoa_r+0x6c4>
 800541a:	2600      	movs	r6, #0
 800541c:	4637      	mov	r7, r6
 800541e:	e7e1      	b.n	80053e4 <_dtoa_r+0x954>
 8005420:	46bb      	mov	fp, r7
 8005422:	4637      	mov	r7, r6
 8005424:	e599      	b.n	8004f5a <_dtoa_r+0x4ca>
 8005426:	bf00      	nop
 8005428:	40240000 	.word	0x40240000
 800542c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80c8 	beq.w	80055c4 <_dtoa_r+0xb34>
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	2d00      	cmp	r5, #0
 800543a:	dd05      	ble.n	8005448 <_dtoa_r+0x9b8>
 800543c:	4639      	mov	r1, r7
 800543e:	462a      	mov	r2, r5
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fc27 	bl	8005c94 <__lshift>
 8005446:	4607      	mov	r7, r0
 8005448:	f1b8 0f00 	cmp.w	r8, #0
 800544c:	d05b      	beq.n	8005506 <_dtoa_r+0xa76>
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fa0f 	bl	8005874 <_Balloc>
 8005456:	4605      	mov	r5, r0
 8005458:	b928      	cbnz	r0, 8005466 <_dtoa_r+0x9d6>
 800545a:	4b83      	ldr	r3, [pc, #524]	; (8005668 <_dtoa_r+0xbd8>)
 800545c:	4602      	mov	r2, r0
 800545e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005462:	f7ff bb2e 	b.w	8004ac2 <_dtoa_r+0x32>
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	3202      	adds	r2, #2
 800546a:	0092      	lsls	r2, r2, #2
 800546c:	f107 010c 	add.w	r1, r7, #12
 8005470:	300c      	adds	r0, #12
 8005472:	f7ff fa76 	bl	8004962 <memcpy>
 8005476:	2201      	movs	r2, #1
 8005478:	4629      	mov	r1, r5
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fc0a 	bl	8005c94 <__lshift>
 8005480:	9b00      	ldr	r3, [sp, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800548a:	4413      	add	r3, r2
 800548c:	9308      	str	r3, [sp, #32]
 800548e:	9b02      	ldr	r3, [sp, #8]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	46b8      	mov	r8, r7
 8005496:	9306      	str	r3, [sp, #24]
 8005498:	4607      	mov	r7, r0
 800549a:	9b04      	ldr	r3, [sp, #16]
 800549c:	4631      	mov	r1, r6
 800549e:	3b01      	subs	r3, #1
 80054a0:	4650      	mov	r0, sl
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	f7ff fa6b 	bl	800497e <quorem>
 80054a8:	4641      	mov	r1, r8
 80054aa:	9002      	str	r0, [sp, #8]
 80054ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054b0:	4650      	mov	r0, sl
 80054b2:	f000 fc5b 	bl	8005d6c <__mcmp>
 80054b6:	463a      	mov	r2, r7
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	4631      	mov	r1, r6
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 fc71 	bl	8005da4 <__mdiff>
 80054c2:	68c2      	ldr	r2, [r0, #12]
 80054c4:	4605      	mov	r5, r0
 80054c6:	bb02      	cbnz	r2, 800550a <_dtoa_r+0xa7a>
 80054c8:	4601      	mov	r1, r0
 80054ca:	4650      	mov	r0, sl
 80054cc:	f000 fc4e 	bl	8005d6c <__mcmp>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4629      	mov	r1, r5
 80054d4:	4620      	mov	r0, r4
 80054d6:	9209      	str	r2, [sp, #36]	; 0x24
 80054d8:	f000 fa0c 	bl	80058f4 <_Bfree>
 80054dc:	9b07      	ldr	r3, [sp, #28]
 80054de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e0:	9d04      	ldr	r5, [sp, #16]
 80054e2:	ea43 0102 	orr.w	r1, r3, r2
 80054e6:	9b06      	ldr	r3, [sp, #24]
 80054e8:	4319      	orrs	r1, r3
 80054ea:	d110      	bne.n	800550e <_dtoa_r+0xa7e>
 80054ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054f0:	d029      	beq.n	8005546 <_dtoa_r+0xab6>
 80054f2:	9b05      	ldr	r3, [sp, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd02      	ble.n	80054fe <_dtoa_r+0xa6e>
 80054f8:	9b02      	ldr	r3, [sp, #8]
 80054fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	f883 9000 	strb.w	r9, [r3]
 8005504:	e774      	b.n	80053f0 <_dtoa_r+0x960>
 8005506:	4638      	mov	r0, r7
 8005508:	e7ba      	b.n	8005480 <_dtoa_r+0x9f0>
 800550a:	2201      	movs	r2, #1
 800550c:	e7e1      	b.n	80054d2 <_dtoa_r+0xa42>
 800550e:	9b05      	ldr	r3, [sp, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	db04      	blt.n	800551e <_dtoa_r+0xa8e>
 8005514:	9907      	ldr	r1, [sp, #28]
 8005516:	430b      	orrs	r3, r1
 8005518:	9906      	ldr	r1, [sp, #24]
 800551a:	430b      	orrs	r3, r1
 800551c:	d120      	bne.n	8005560 <_dtoa_r+0xad0>
 800551e:	2a00      	cmp	r2, #0
 8005520:	dded      	ble.n	80054fe <_dtoa_r+0xa6e>
 8005522:	4651      	mov	r1, sl
 8005524:	2201      	movs	r2, #1
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fbb4 	bl	8005c94 <__lshift>
 800552c:	4631      	mov	r1, r6
 800552e:	4682      	mov	sl, r0
 8005530:	f000 fc1c 	bl	8005d6c <__mcmp>
 8005534:	2800      	cmp	r0, #0
 8005536:	dc03      	bgt.n	8005540 <_dtoa_r+0xab0>
 8005538:	d1e1      	bne.n	80054fe <_dtoa_r+0xa6e>
 800553a:	f019 0f01 	tst.w	r9, #1
 800553e:	d0de      	beq.n	80054fe <_dtoa_r+0xa6e>
 8005540:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005544:	d1d8      	bne.n	80054f8 <_dtoa_r+0xa68>
 8005546:	9a01      	ldr	r2, [sp, #4]
 8005548:	2339      	movs	r3, #57	; 0x39
 800554a:	7013      	strb	r3, [r2, #0]
 800554c:	462b      	mov	r3, r5
 800554e:	461d      	mov	r5, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005556:	2a39      	cmp	r2, #57	; 0x39
 8005558:	d06c      	beq.n	8005634 <_dtoa_r+0xba4>
 800555a:	3201      	adds	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e747      	b.n	80053f0 <_dtoa_r+0x960>
 8005560:	2a00      	cmp	r2, #0
 8005562:	dd07      	ble.n	8005574 <_dtoa_r+0xae4>
 8005564:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005568:	d0ed      	beq.n	8005546 <_dtoa_r+0xab6>
 800556a:	9a01      	ldr	r2, [sp, #4]
 800556c:	f109 0301 	add.w	r3, r9, #1
 8005570:	7013      	strb	r3, [r2, #0]
 8005572:	e73d      	b.n	80053f0 <_dtoa_r+0x960>
 8005574:	9b04      	ldr	r3, [sp, #16]
 8005576:	9a08      	ldr	r2, [sp, #32]
 8005578:	f803 9c01 	strb.w	r9, [r3, #-1]
 800557c:	4293      	cmp	r3, r2
 800557e:	d043      	beq.n	8005608 <_dtoa_r+0xb78>
 8005580:	4651      	mov	r1, sl
 8005582:	2300      	movs	r3, #0
 8005584:	220a      	movs	r2, #10
 8005586:	4620      	mov	r0, r4
 8005588:	f000 f9d6 	bl	8005938 <__multadd>
 800558c:	45b8      	cmp	r8, r7
 800558e:	4682      	mov	sl, r0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f04f 020a 	mov.w	r2, #10
 8005598:	4641      	mov	r1, r8
 800559a:	4620      	mov	r0, r4
 800559c:	d107      	bne.n	80055ae <_dtoa_r+0xb1e>
 800559e:	f000 f9cb 	bl	8005938 <__multadd>
 80055a2:	4680      	mov	r8, r0
 80055a4:	4607      	mov	r7, r0
 80055a6:	9b04      	ldr	r3, [sp, #16]
 80055a8:	3301      	adds	r3, #1
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	e775      	b.n	800549a <_dtoa_r+0xa0a>
 80055ae:	f000 f9c3 	bl	8005938 <__multadd>
 80055b2:	4639      	mov	r1, r7
 80055b4:	4680      	mov	r8, r0
 80055b6:	2300      	movs	r3, #0
 80055b8:	220a      	movs	r2, #10
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f9bc 	bl	8005938 <__multadd>
 80055c0:	4607      	mov	r7, r0
 80055c2:	e7f0      	b.n	80055a6 <_dtoa_r+0xb16>
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	9d00      	ldr	r5, [sp, #0]
 80055ca:	4631      	mov	r1, r6
 80055cc:	4650      	mov	r0, sl
 80055ce:	f7ff f9d6 	bl	800497e <quorem>
 80055d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055d6:	9b00      	ldr	r3, [sp, #0]
 80055d8:	f805 9b01 	strb.w	r9, [r5], #1
 80055dc:	1aea      	subs	r2, r5, r3
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	dd07      	ble.n	80055f4 <_dtoa_r+0xb64>
 80055e4:	4651      	mov	r1, sl
 80055e6:	2300      	movs	r3, #0
 80055e8:	220a      	movs	r2, #10
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f9a4 	bl	8005938 <__multadd>
 80055f0:	4682      	mov	sl, r0
 80055f2:	e7ea      	b.n	80055ca <_dtoa_r+0xb3a>
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bfc8      	it	gt
 80055fa:	461d      	movgt	r5, r3
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	bfd8      	it	le
 8005600:	2501      	movle	r5, #1
 8005602:	441d      	add	r5, r3
 8005604:	f04f 0800 	mov.w	r8, #0
 8005608:	4651      	mov	r1, sl
 800560a:	2201      	movs	r2, #1
 800560c:	4620      	mov	r0, r4
 800560e:	f000 fb41 	bl	8005c94 <__lshift>
 8005612:	4631      	mov	r1, r6
 8005614:	4682      	mov	sl, r0
 8005616:	f000 fba9 	bl	8005d6c <__mcmp>
 800561a:	2800      	cmp	r0, #0
 800561c:	dc96      	bgt.n	800554c <_dtoa_r+0xabc>
 800561e:	d102      	bne.n	8005626 <_dtoa_r+0xb96>
 8005620:	f019 0f01 	tst.w	r9, #1
 8005624:	d192      	bne.n	800554c <_dtoa_r+0xabc>
 8005626:	462b      	mov	r3, r5
 8005628:	461d      	mov	r5, r3
 800562a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800562e:	2a30      	cmp	r2, #48	; 0x30
 8005630:	d0fa      	beq.n	8005628 <_dtoa_r+0xb98>
 8005632:	e6dd      	b.n	80053f0 <_dtoa_r+0x960>
 8005634:	9a00      	ldr	r2, [sp, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d189      	bne.n	800554e <_dtoa_r+0xabe>
 800563a:	f10b 0b01 	add.w	fp, fp, #1
 800563e:	2331      	movs	r3, #49	; 0x31
 8005640:	e796      	b.n	8005570 <_dtoa_r+0xae0>
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <_dtoa_r+0xbdc>)
 8005644:	f7ff ba99 	b.w	8004b7a <_dtoa_r+0xea>
 8005648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800564a:	2b00      	cmp	r3, #0
 800564c:	f47f aa6d 	bne.w	8004b2a <_dtoa_r+0x9a>
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <_dtoa_r+0xbe0>)
 8005652:	f7ff ba92 	b.w	8004b7a <_dtoa_r+0xea>
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dcb5      	bgt.n	80055c8 <_dtoa_r+0xb38>
 800565c:	9b07      	ldr	r3, [sp, #28]
 800565e:	2b02      	cmp	r3, #2
 8005660:	f73f aeb1 	bgt.w	80053c6 <_dtoa_r+0x936>
 8005664:	e7b0      	b.n	80055c8 <_dtoa_r+0xb38>
 8005666:	bf00      	nop
 8005668:	08006f2c 	.word	0x08006f2c
 800566c:	08006e8c 	.word	0x08006e8c
 8005670:	08006eb0 	.word	0x08006eb0

08005674 <_free_r>:
 8005674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005676:	2900      	cmp	r1, #0
 8005678:	d044      	beq.n	8005704 <_free_r+0x90>
 800567a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800567e:	9001      	str	r0, [sp, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f1a1 0404 	sub.w	r4, r1, #4
 8005686:	bfb8      	it	lt
 8005688:	18e4      	addlt	r4, r4, r3
 800568a:	f000 f8e7 	bl	800585c <__malloc_lock>
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <_free_r+0x94>)
 8005690:	9801      	ldr	r0, [sp, #4]
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	b933      	cbnz	r3, 80056a4 <_free_r+0x30>
 8005696:	6063      	str	r3, [r4, #4]
 8005698:	6014      	str	r4, [r2, #0]
 800569a:	b003      	add	sp, #12
 800569c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a0:	f000 b8e2 	b.w	8005868 <__malloc_unlock>
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d908      	bls.n	80056ba <_free_r+0x46>
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	1961      	adds	r1, r4, r5
 80056ac:	428b      	cmp	r3, r1
 80056ae:	bf01      	itttt	eq
 80056b0:	6819      	ldreq	r1, [r3, #0]
 80056b2:	685b      	ldreq	r3, [r3, #4]
 80056b4:	1949      	addeq	r1, r1, r5
 80056b6:	6021      	streq	r1, [r4, #0]
 80056b8:	e7ed      	b.n	8005696 <_free_r+0x22>
 80056ba:	461a      	mov	r2, r3
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	b10b      	cbz	r3, 80056c4 <_free_r+0x50>
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d9fa      	bls.n	80056ba <_free_r+0x46>
 80056c4:	6811      	ldr	r1, [r2, #0]
 80056c6:	1855      	adds	r5, r2, r1
 80056c8:	42a5      	cmp	r5, r4
 80056ca:	d10b      	bne.n	80056e4 <_free_r+0x70>
 80056cc:	6824      	ldr	r4, [r4, #0]
 80056ce:	4421      	add	r1, r4
 80056d0:	1854      	adds	r4, r2, r1
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	6011      	str	r1, [r2, #0]
 80056d6:	d1e0      	bne.n	800569a <_free_r+0x26>
 80056d8:	681c      	ldr	r4, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	6053      	str	r3, [r2, #4]
 80056de:	440c      	add	r4, r1
 80056e0:	6014      	str	r4, [r2, #0]
 80056e2:	e7da      	b.n	800569a <_free_r+0x26>
 80056e4:	d902      	bls.n	80056ec <_free_r+0x78>
 80056e6:	230c      	movs	r3, #12
 80056e8:	6003      	str	r3, [r0, #0]
 80056ea:	e7d6      	b.n	800569a <_free_r+0x26>
 80056ec:	6825      	ldr	r5, [r4, #0]
 80056ee:	1961      	adds	r1, r4, r5
 80056f0:	428b      	cmp	r3, r1
 80056f2:	bf04      	itt	eq
 80056f4:	6819      	ldreq	r1, [r3, #0]
 80056f6:	685b      	ldreq	r3, [r3, #4]
 80056f8:	6063      	str	r3, [r4, #4]
 80056fa:	bf04      	itt	eq
 80056fc:	1949      	addeq	r1, r1, r5
 80056fe:	6021      	streq	r1, [r4, #0]
 8005700:	6054      	str	r4, [r2, #4]
 8005702:	e7ca      	b.n	800569a <_free_r+0x26>
 8005704:	b003      	add	sp, #12
 8005706:	bd30      	pop	{r4, r5, pc}
 8005708:	200003a8 	.word	0x200003a8

0800570c <malloc>:
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <malloc+0xc>)
 800570e:	4601      	mov	r1, r0
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f000 b823 	b.w	800575c <_malloc_r>
 8005716:	bf00      	nop
 8005718:	20000070 	.word	0x20000070

0800571c <sbrk_aligned>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4e0e      	ldr	r6, [pc, #56]	; (8005758 <sbrk_aligned+0x3c>)
 8005720:	460c      	mov	r4, r1
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	4605      	mov	r5, r0
 8005726:	b911      	cbnz	r1, 800572e <sbrk_aligned+0x12>
 8005728:	f000 fe96 	bl	8006458 <_sbrk_r>
 800572c:	6030      	str	r0, [r6, #0]
 800572e:	4621      	mov	r1, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fe91 	bl	8006458 <_sbrk_r>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d00a      	beq.n	8005750 <sbrk_aligned+0x34>
 800573a:	1cc4      	adds	r4, r0, #3
 800573c:	f024 0403 	bic.w	r4, r4, #3
 8005740:	42a0      	cmp	r0, r4
 8005742:	d007      	beq.n	8005754 <sbrk_aligned+0x38>
 8005744:	1a21      	subs	r1, r4, r0
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fe86 	bl	8006458 <_sbrk_r>
 800574c:	3001      	adds	r0, #1
 800574e:	d101      	bne.n	8005754 <sbrk_aligned+0x38>
 8005750:	f04f 34ff 	mov.w	r4, #4294967295
 8005754:	4620      	mov	r0, r4
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	200003ac 	.word	0x200003ac

0800575c <_malloc_r>:
 800575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005760:	1ccd      	adds	r5, r1, #3
 8005762:	f025 0503 	bic.w	r5, r5, #3
 8005766:	3508      	adds	r5, #8
 8005768:	2d0c      	cmp	r5, #12
 800576a:	bf38      	it	cc
 800576c:	250c      	movcc	r5, #12
 800576e:	2d00      	cmp	r5, #0
 8005770:	4607      	mov	r7, r0
 8005772:	db01      	blt.n	8005778 <_malloc_r+0x1c>
 8005774:	42a9      	cmp	r1, r5
 8005776:	d905      	bls.n	8005784 <_malloc_r+0x28>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	2600      	movs	r6, #0
 800577e:	4630      	mov	r0, r6
 8005780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005784:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005858 <_malloc_r+0xfc>
 8005788:	f000 f868 	bl	800585c <__malloc_lock>
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	461c      	mov	r4, r3
 8005792:	bb5c      	cbnz	r4, 80057ec <_malloc_r+0x90>
 8005794:	4629      	mov	r1, r5
 8005796:	4638      	mov	r0, r7
 8005798:	f7ff ffc0 	bl	800571c <sbrk_aligned>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	4604      	mov	r4, r0
 80057a0:	d155      	bne.n	800584e <_malloc_r+0xf2>
 80057a2:	f8d8 4000 	ldr.w	r4, [r8]
 80057a6:	4626      	mov	r6, r4
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	d145      	bne.n	8005838 <_malloc_r+0xdc>
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	d048      	beq.n	8005842 <_malloc_r+0xe6>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	4631      	mov	r1, r6
 80057b4:	4638      	mov	r0, r7
 80057b6:	eb04 0903 	add.w	r9, r4, r3
 80057ba:	f000 fe4d 	bl	8006458 <_sbrk_r>
 80057be:	4581      	cmp	r9, r0
 80057c0:	d13f      	bne.n	8005842 <_malloc_r+0xe6>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	1a6d      	subs	r5, r5, r1
 80057c6:	4629      	mov	r1, r5
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff ffa7 	bl	800571c <sbrk_aligned>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d037      	beq.n	8005842 <_malloc_r+0xe6>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	442b      	add	r3, r5
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	f8d8 3000 	ldr.w	r3, [r8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d038      	beq.n	8005852 <_malloc_r+0xf6>
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	42a2      	cmp	r2, r4
 80057e4:	d12b      	bne.n	800583e <_malloc_r+0xe2>
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e00f      	b.n	800580c <_malloc_r+0xb0>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	1b52      	subs	r2, r2, r5
 80057f0:	d41f      	bmi.n	8005832 <_malloc_r+0xd6>
 80057f2:	2a0b      	cmp	r2, #11
 80057f4:	d917      	bls.n	8005826 <_malloc_r+0xca>
 80057f6:	1961      	adds	r1, r4, r5
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	bf18      	it	ne
 80057fe:	6059      	strne	r1, [r3, #4]
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	bf08      	it	eq
 8005804:	f8c8 1000 	streq.w	r1, [r8]
 8005808:	5162      	str	r2, [r4, r5]
 800580a:	604b      	str	r3, [r1, #4]
 800580c:	4638      	mov	r0, r7
 800580e:	f104 060b 	add.w	r6, r4, #11
 8005812:	f000 f829 	bl	8005868 <__malloc_unlock>
 8005816:	f026 0607 	bic.w	r6, r6, #7
 800581a:	1d23      	adds	r3, r4, #4
 800581c:	1af2      	subs	r2, r6, r3
 800581e:	d0ae      	beq.n	800577e <_malloc_r+0x22>
 8005820:	1b9b      	subs	r3, r3, r6
 8005822:	50a3      	str	r3, [r4, r2]
 8005824:	e7ab      	b.n	800577e <_malloc_r+0x22>
 8005826:	42a3      	cmp	r3, r4
 8005828:	6862      	ldr	r2, [r4, #4]
 800582a:	d1dd      	bne.n	80057e8 <_malloc_r+0x8c>
 800582c:	f8c8 2000 	str.w	r2, [r8]
 8005830:	e7ec      	b.n	800580c <_malloc_r+0xb0>
 8005832:	4623      	mov	r3, r4
 8005834:	6864      	ldr	r4, [r4, #4]
 8005836:	e7ac      	b.n	8005792 <_malloc_r+0x36>
 8005838:	4634      	mov	r4, r6
 800583a:	6876      	ldr	r6, [r6, #4]
 800583c:	e7b4      	b.n	80057a8 <_malloc_r+0x4c>
 800583e:	4613      	mov	r3, r2
 8005840:	e7cc      	b.n	80057dc <_malloc_r+0x80>
 8005842:	230c      	movs	r3, #12
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4638      	mov	r0, r7
 8005848:	f000 f80e 	bl	8005868 <__malloc_unlock>
 800584c:	e797      	b.n	800577e <_malloc_r+0x22>
 800584e:	6025      	str	r5, [r4, #0]
 8005850:	e7dc      	b.n	800580c <_malloc_r+0xb0>
 8005852:	605b      	str	r3, [r3, #4]
 8005854:	deff      	udf	#255	; 0xff
 8005856:	bf00      	nop
 8005858:	200003a8 	.word	0x200003a8

0800585c <__malloc_lock>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__malloc_lock+0x8>)
 800585e:	f7ff b87e 	b.w	800495e <__retarget_lock_acquire_recursive>
 8005862:	bf00      	nop
 8005864:	200003a4 	.word	0x200003a4

08005868 <__malloc_unlock>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__malloc_unlock+0x8>)
 800586a:	f7ff b879 	b.w	8004960 <__retarget_lock_release_recursive>
 800586e:	bf00      	nop
 8005870:	200003a4 	.word	0x200003a4

08005874 <_Balloc>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	69c6      	ldr	r6, [r0, #28]
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	b976      	cbnz	r6, 800589c <_Balloc+0x28>
 800587e:	2010      	movs	r0, #16
 8005880:	f7ff ff44 	bl	800570c <malloc>
 8005884:	4602      	mov	r2, r0
 8005886:	61e0      	str	r0, [r4, #28]
 8005888:	b920      	cbnz	r0, 8005894 <_Balloc+0x20>
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <_Balloc+0x78>)
 800588c:	4818      	ldr	r0, [pc, #96]	; (80058f0 <_Balloc+0x7c>)
 800588e:	216b      	movs	r1, #107	; 0x6b
 8005890:	f000 fdf2 	bl	8006478 <__assert_func>
 8005894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005898:	6006      	str	r6, [r0, #0]
 800589a:	60c6      	str	r6, [r0, #12]
 800589c:	69e6      	ldr	r6, [r4, #28]
 800589e:	68f3      	ldr	r3, [r6, #12]
 80058a0:	b183      	cbz	r3, 80058c4 <_Balloc+0x50>
 80058a2:	69e3      	ldr	r3, [r4, #28]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058aa:	b9b8      	cbnz	r0, 80058dc <_Balloc+0x68>
 80058ac:	2101      	movs	r1, #1
 80058ae:	fa01 f605 	lsl.w	r6, r1, r5
 80058b2:	1d72      	adds	r2, r6, #5
 80058b4:	0092      	lsls	r2, r2, #2
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fdfc 	bl	80064b4 <_calloc_r>
 80058bc:	b160      	cbz	r0, 80058d8 <_Balloc+0x64>
 80058be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058c2:	e00e      	b.n	80058e2 <_Balloc+0x6e>
 80058c4:	2221      	movs	r2, #33	; 0x21
 80058c6:	2104      	movs	r1, #4
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fdf3 	bl	80064b4 <_calloc_r>
 80058ce:	69e3      	ldr	r3, [r4, #28]
 80058d0:	60f0      	str	r0, [r6, #12]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e4      	bne.n	80058a2 <_Balloc+0x2e>
 80058d8:	2000      	movs	r0, #0
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	6802      	ldr	r2, [r0, #0]
 80058de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058e2:	2300      	movs	r3, #0
 80058e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058e8:	e7f7      	b.n	80058da <_Balloc+0x66>
 80058ea:	bf00      	nop
 80058ec:	08006ebd 	.word	0x08006ebd
 80058f0:	08006f3d 	.word	0x08006f3d

080058f4 <_Bfree>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	69c6      	ldr	r6, [r0, #28]
 80058f8:	4605      	mov	r5, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b976      	cbnz	r6, 800591c <_Bfree+0x28>
 80058fe:	2010      	movs	r0, #16
 8005900:	f7ff ff04 	bl	800570c <malloc>
 8005904:	4602      	mov	r2, r0
 8005906:	61e8      	str	r0, [r5, #28]
 8005908:	b920      	cbnz	r0, 8005914 <_Bfree+0x20>
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <_Bfree+0x3c>)
 800590c:	4809      	ldr	r0, [pc, #36]	; (8005934 <_Bfree+0x40>)
 800590e:	218f      	movs	r1, #143	; 0x8f
 8005910:	f000 fdb2 	bl	8006478 <__assert_func>
 8005914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005918:	6006      	str	r6, [r0, #0]
 800591a:	60c6      	str	r6, [r0, #12]
 800591c:	b13c      	cbz	r4, 800592e <_Bfree+0x3a>
 800591e:	69eb      	ldr	r3, [r5, #28]
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005928:	6021      	str	r1, [r4, #0]
 800592a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	08006ebd 	.word	0x08006ebd
 8005934:	08006f3d 	.word	0x08006f3d

08005938 <__multadd>:
 8005938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593c:	690d      	ldr	r5, [r1, #16]
 800593e:	4607      	mov	r7, r0
 8005940:	460c      	mov	r4, r1
 8005942:	461e      	mov	r6, r3
 8005944:	f101 0c14 	add.w	ip, r1, #20
 8005948:	2000      	movs	r0, #0
 800594a:	f8dc 3000 	ldr.w	r3, [ip]
 800594e:	b299      	uxth	r1, r3
 8005950:	fb02 6101 	mla	r1, r2, r1, r6
 8005954:	0c1e      	lsrs	r6, r3, #16
 8005956:	0c0b      	lsrs	r3, r1, #16
 8005958:	fb02 3306 	mla	r3, r2, r6, r3
 800595c:	b289      	uxth	r1, r1
 800595e:	3001      	adds	r0, #1
 8005960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005964:	4285      	cmp	r5, r0
 8005966:	f84c 1b04 	str.w	r1, [ip], #4
 800596a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800596e:	dcec      	bgt.n	800594a <__multadd+0x12>
 8005970:	b30e      	cbz	r6, 80059b6 <__multadd+0x7e>
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	42ab      	cmp	r3, r5
 8005976:	dc19      	bgt.n	80059ac <__multadd+0x74>
 8005978:	6861      	ldr	r1, [r4, #4]
 800597a:	4638      	mov	r0, r7
 800597c:	3101      	adds	r1, #1
 800597e:	f7ff ff79 	bl	8005874 <_Balloc>
 8005982:	4680      	mov	r8, r0
 8005984:	b928      	cbnz	r0, 8005992 <__multadd+0x5a>
 8005986:	4602      	mov	r2, r0
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <__multadd+0x84>)
 800598a:	480d      	ldr	r0, [pc, #52]	; (80059c0 <__multadd+0x88>)
 800598c:	21ba      	movs	r1, #186	; 0xba
 800598e:	f000 fd73 	bl	8006478 <__assert_func>
 8005992:	6922      	ldr	r2, [r4, #16]
 8005994:	3202      	adds	r2, #2
 8005996:	f104 010c 	add.w	r1, r4, #12
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	300c      	adds	r0, #12
 800599e:	f7fe ffe0 	bl	8004962 <memcpy>
 80059a2:	4621      	mov	r1, r4
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff ffa5 	bl	80058f4 <_Bfree>
 80059aa:	4644      	mov	r4, r8
 80059ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059b0:	3501      	adds	r5, #1
 80059b2:	615e      	str	r6, [r3, #20]
 80059b4:	6125      	str	r5, [r4, #16]
 80059b6:	4620      	mov	r0, r4
 80059b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059bc:	08006f2c 	.word	0x08006f2c
 80059c0:	08006f3d 	.word	0x08006f3d

080059c4 <__hi0bits>:
 80059c4:	0c03      	lsrs	r3, r0, #16
 80059c6:	041b      	lsls	r3, r3, #16
 80059c8:	b9d3      	cbnz	r3, 8005a00 <__hi0bits+0x3c>
 80059ca:	0400      	lsls	r0, r0, #16
 80059cc:	2310      	movs	r3, #16
 80059ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059d2:	bf04      	itt	eq
 80059d4:	0200      	lsleq	r0, r0, #8
 80059d6:	3308      	addeq	r3, #8
 80059d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059dc:	bf04      	itt	eq
 80059de:	0100      	lsleq	r0, r0, #4
 80059e0:	3304      	addeq	r3, #4
 80059e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059e6:	bf04      	itt	eq
 80059e8:	0080      	lsleq	r0, r0, #2
 80059ea:	3302      	addeq	r3, #2
 80059ec:	2800      	cmp	r0, #0
 80059ee:	db05      	blt.n	80059fc <__hi0bits+0x38>
 80059f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059f4:	f103 0301 	add.w	r3, r3, #1
 80059f8:	bf08      	it	eq
 80059fa:	2320      	moveq	r3, #32
 80059fc:	4618      	mov	r0, r3
 80059fe:	4770      	bx	lr
 8005a00:	2300      	movs	r3, #0
 8005a02:	e7e4      	b.n	80059ce <__hi0bits+0xa>

08005a04 <__lo0bits>:
 8005a04:	6803      	ldr	r3, [r0, #0]
 8005a06:	f013 0207 	ands.w	r2, r3, #7
 8005a0a:	d00c      	beq.n	8005a26 <__lo0bits+0x22>
 8005a0c:	07d9      	lsls	r1, r3, #31
 8005a0e:	d422      	bmi.n	8005a56 <__lo0bits+0x52>
 8005a10:	079a      	lsls	r2, r3, #30
 8005a12:	bf49      	itett	mi
 8005a14:	085b      	lsrmi	r3, r3, #1
 8005a16:	089b      	lsrpl	r3, r3, #2
 8005a18:	6003      	strmi	r3, [r0, #0]
 8005a1a:	2201      	movmi	r2, #1
 8005a1c:	bf5c      	itt	pl
 8005a1e:	6003      	strpl	r3, [r0, #0]
 8005a20:	2202      	movpl	r2, #2
 8005a22:	4610      	mov	r0, r2
 8005a24:	4770      	bx	lr
 8005a26:	b299      	uxth	r1, r3
 8005a28:	b909      	cbnz	r1, 8005a2e <__lo0bits+0x2a>
 8005a2a:	0c1b      	lsrs	r3, r3, #16
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	b2d9      	uxtb	r1, r3
 8005a30:	b909      	cbnz	r1, 8005a36 <__lo0bits+0x32>
 8005a32:	3208      	adds	r2, #8
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	0719      	lsls	r1, r3, #28
 8005a38:	bf04      	itt	eq
 8005a3a:	091b      	lsreq	r3, r3, #4
 8005a3c:	3204      	addeq	r2, #4
 8005a3e:	0799      	lsls	r1, r3, #30
 8005a40:	bf04      	itt	eq
 8005a42:	089b      	lsreq	r3, r3, #2
 8005a44:	3202      	addeq	r2, #2
 8005a46:	07d9      	lsls	r1, r3, #31
 8005a48:	d403      	bmi.n	8005a52 <__lo0bits+0x4e>
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	f102 0201 	add.w	r2, r2, #1
 8005a50:	d003      	beq.n	8005a5a <__lo0bits+0x56>
 8005a52:	6003      	str	r3, [r0, #0]
 8005a54:	e7e5      	b.n	8005a22 <__lo0bits+0x1e>
 8005a56:	2200      	movs	r2, #0
 8005a58:	e7e3      	b.n	8005a22 <__lo0bits+0x1e>
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	e7e1      	b.n	8005a22 <__lo0bits+0x1e>
	...

08005a60 <__i2b>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	460c      	mov	r4, r1
 8005a64:	2101      	movs	r1, #1
 8005a66:	f7ff ff05 	bl	8005874 <_Balloc>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	b928      	cbnz	r0, 8005a7a <__i2b+0x1a>
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <__i2b+0x24>)
 8005a70:	4805      	ldr	r0, [pc, #20]	; (8005a88 <__i2b+0x28>)
 8005a72:	f240 1145 	movw	r1, #325	; 0x145
 8005a76:	f000 fcff 	bl	8006478 <__assert_func>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	6144      	str	r4, [r0, #20]
 8005a7e:	6103      	str	r3, [r0, #16]
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	bf00      	nop
 8005a84:	08006f2c 	.word	0x08006f2c
 8005a88:	08006f3d 	.word	0x08006f3d

08005a8c <__multiply>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	4691      	mov	r9, r2
 8005a92:	690a      	ldr	r2, [r1, #16]
 8005a94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	bfb8      	it	lt
 8005a9c:	460b      	movlt	r3, r1
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	bfbc      	itt	lt
 8005aa2:	464c      	movlt	r4, r9
 8005aa4:	4699      	movlt	r9, r3
 8005aa6:	6927      	ldr	r7, [r4, #16]
 8005aa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005aac:	68a3      	ldr	r3, [r4, #8]
 8005aae:	6861      	ldr	r1, [r4, #4]
 8005ab0:	eb07 060a 	add.w	r6, r7, sl
 8005ab4:	42b3      	cmp	r3, r6
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	bfb8      	it	lt
 8005aba:	3101      	addlt	r1, #1
 8005abc:	f7ff feda 	bl	8005874 <_Balloc>
 8005ac0:	b930      	cbnz	r0, 8005ad0 <__multiply+0x44>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <__multiply+0x14c>)
 8005ac6:	4845      	ldr	r0, [pc, #276]	; (8005bdc <__multiply+0x150>)
 8005ac8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005acc:	f000 fcd4 	bl	8006478 <__assert_func>
 8005ad0:	f100 0514 	add.w	r5, r0, #20
 8005ad4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ad8:	462b      	mov	r3, r5
 8005ada:	2200      	movs	r2, #0
 8005adc:	4543      	cmp	r3, r8
 8005ade:	d321      	bcc.n	8005b24 <__multiply+0x98>
 8005ae0:	f104 0314 	add.w	r3, r4, #20
 8005ae4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ae8:	f109 0314 	add.w	r3, r9, #20
 8005aec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005af0:	9202      	str	r2, [sp, #8]
 8005af2:	1b3a      	subs	r2, r7, r4
 8005af4:	3a15      	subs	r2, #21
 8005af6:	f022 0203 	bic.w	r2, r2, #3
 8005afa:	3204      	adds	r2, #4
 8005afc:	f104 0115 	add.w	r1, r4, #21
 8005b00:	428f      	cmp	r7, r1
 8005b02:	bf38      	it	cc
 8005b04:	2204      	movcc	r2, #4
 8005b06:	9201      	str	r2, [sp, #4]
 8005b08:	9a02      	ldr	r2, [sp, #8]
 8005b0a:	9303      	str	r3, [sp, #12]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d80c      	bhi.n	8005b2a <__multiply+0x9e>
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	dd03      	ble.n	8005b1c <__multiply+0x90>
 8005b14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05b      	beq.n	8005bd4 <__multiply+0x148>
 8005b1c:	6106      	str	r6, [r0, #16]
 8005b1e:	b005      	add	sp, #20
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b24:	f843 2b04 	str.w	r2, [r3], #4
 8005b28:	e7d8      	b.n	8005adc <__multiply+0x50>
 8005b2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b2e:	f1ba 0f00 	cmp.w	sl, #0
 8005b32:	d024      	beq.n	8005b7e <__multiply+0xf2>
 8005b34:	f104 0e14 	add.w	lr, r4, #20
 8005b38:	46a9      	mov	r9, r5
 8005b3a:	f04f 0c00 	mov.w	ip, #0
 8005b3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b42:	f8d9 1000 	ldr.w	r1, [r9]
 8005b46:	fa1f fb82 	uxth.w	fp, r2
 8005b4a:	b289      	uxth	r1, r1
 8005b4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b54:	f8d9 2000 	ldr.w	r2, [r9]
 8005b58:	4461      	add	r1, ip
 8005b5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b66:	b289      	uxth	r1, r1
 8005b68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b6c:	4577      	cmp	r7, lr
 8005b6e:	f849 1b04 	str.w	r1, [r9], #4
 8005b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b76:	d8e2      	bhi.n	8005b3e <__multiply+0xb2>
 8005b78:	9a01      	ldr	r2, [sp, #4]
 8005b7a:	f845 c002 	str.w	ip, [r5, r2]
 8005b7e:	9a03      	ldr	r2, [sp, #12]
 8005b80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b84:	3304      	adds	r3, #4
 8005b86:	f1b9 0f00 	cmp.w	r9, #0
 8005b8a:	d021      	beq.n	8005bd0 <__multiply+0x144>
 8005b8c:	6829      	ldr	r1, [r5, #0]
 8005b8e:	f104 0c14 	add.w	ip, r4, #20
 8005b92:	46ae      	mov	lr, r5
 8005b94:	f04f 0a00 	mov.w	sl, #0
 8005b98:	f8bc b000 	ldrh.w	fp, [ip]
 8005b9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ba0:	fb09 220b 	mla	r2, r9, fp, r2
 8005ba4:	4452      	add	r2, sl
 8005ba6:	b289      	uxth	r1, r1
 8005ba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bac:	f84e 1b04 	str.w	r1, [lr], #4
 8005bb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005bb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bb8:	f8be 1000 	ldrh.w	r1, [lr]
 8005bbc:	fb09 110a 	mla	r1, r9, sl, r1
 8005bc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005bc4:	4567      	cmp	r7, ip
 8005bc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bca:	d8e5      	bhi.n	8005b98 <__multiply+0x10c>
 8005bcc:	9a01      	ldr	r2, [sp, #4]
 8005bce:	50a9      	str	r1, [r5, r2]
 8005bd0:	3504      	adds	r5, #4
 8005bd2:	e799      	b.n	8005b08 <__multiply+0x7c>
 8005bd4:	3e01      	subs	r6, #1
 8005bd6:	e79b      	b.n	8005b10 <__multiply+0x84>
 8005bd8:	08006f2c 	.word	0x08006f2c
 8005bdc:	08006f3d 	.word	0x08006f3d

08005be0 <__pow5mult>:
 8005be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be4:	4615      	mov	r5, r2
 8005be6:	f012 0203 	ands.w	r2, r2, #3
 8005bea:	4606      	mov	r6, r0
 8005bec:	460f      	mov	r7, r1
 8005bee:	d007      	beq.n	8005c00 <__pow5mult+0x20>
 8005bf0:	4c25      	ldr	r4, [pc, #148]	; (8005c88 <__pow5mult+0xa8>)
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bfa:	f7ff fe9d 	bl	8005938 <__multadd>
 8005bfe:	4607      	mov	r7, r0
 8005c00:	10ad      	asrs	r5, r5, #2
 8005c02:	d03d      	beq.n	8005c80 <__pow5mult+0xa0>
 8005c04:	69f4      	ldr	r4, [r6, #28]
 8005c06:	b97c      	cbnz	r4, 8005c28 <__pow5mult+0x48>
 8005c08:	2010      	movs	r0, #16
 8005c0a:	f7ff fd7f 	bl	800570c <malloc>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	61f0      	str	r0, [r6, #28]
 8005c12:	b928      	cbnz	r0, 8005c20 <__pow5mult+0x40>
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <__pow5mult+0xac>)
 8005c16:	481e      	ldr	r0, [pc, #120]	; (8005c90 <__pow5mult+0xb0>)
 8005c18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005c1c:	f000 fc2c 	bl	8006478 <__assert_func>
 8005c20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c24:	6004      	str	r4, [r0, #0]
 8005c26:	60c4      	str	r4, [r0, #12]
 8005c28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005c2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c30:	b94c      	cbnz	r4, 8005c46 <__pow5mult+0x66>
 8005c32:	f240 2171 	movw	r1, #625	; 0x271
 8005c36:	4630      	mov	r0, r6
 8005c38:	f7ff ff12 	bl	8005a60 <__i2b>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c42:	4604      	mov	r4, r0
 8005c44:	6003      	str	r3, [r0, #0]
 8005c46:	f04f 0900 	mov.w	r9, #0
 8005c4a:	07eb      	lsls	r3, r5, #31
 8005c4c:	d50a      	bpl.n	8005c64 <__pow5mult+0x84>
 8005c4e:	4639      	mov	r1, r7
 8005c50:	4622      	mov	r2, r4
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ff1a 	bl	8005a8c <__multiply>
 8005c58:	4639      	mov	r1, r7
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff fe49 	bl	80058f4 <_Bfree>
 8005c62:	4647      	mov	r7, r8
 8005c64:	106d      	asrs	r5, r5, #1
 8005c66:	d00b      	beq.n	8005c80 <__pow5mult+0xa0>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	b938      	cbnz	r0, 8005c7c <__pow5mult+0x9c>
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7ff ff0b 	bl	8005a8c <__multiply>
 8005c76:	6020      	str	r0, [r4, #0]
 8005c78:	f8c0 9000 	str.w	r9, [r0]
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	e7e4      	b.n	8005c4a <__pow5mult+0x6a>
 8005c80:	4638      	mov	r0, r7
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	bf00      	nop
 8005c88:	08007088 	.word	0x08007088
 8005c8c:	08006ebd 	.word	0x08006ebd
 8005c90:	08006f3d 	.word	0x08006f3d

08005c94 <__lshift>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	460c      	mov	r4, r1
 8005c9a:	6849      	ldr	r1, [r1, #4]
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	4691      	mov	r9, r2
 8005ca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cac:	f108 0601 	add.w	r6, r8, #1
 8005cb0:	42b3      	cmp	r3, r6
 8005cb2:	db0b      	blt.n	8005ccc <__lshift+0x38>
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f7ff fddd 	bl	8005874 <_Balloc>
 8005cba:	4605      	mov	r5, r0
 8005cbc:	b948      	cbnz	r0, 8005cd2 <__lshift+0x3e>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	4b28      	ldr	r3, [pc, #160]	; (8005d64 <__lshift+0xd0>)
 8005cc2:	4829      	ldr	r0, [pc, #164]	; (8005d68 <__lshift+0xd4>)
 8005cc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005cc8:	f000 fbd6 	bl	8006478 <__assert_func>
 8005ccc:	3101      	adds	r1, #1
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	e7ee      	b.n	8005cb0 <__lshift+0x1c>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f100 0114 	add.w	r1, r0, #20
 8005cd8:	f100 0210 	add.w	r2, r0, #16
 8005cdc:	4618      	mov	r0, r3
 8005cde:	4553      	cmp	r3, sl
 8005ce0:	db33      	blt.n	8005d4a <__lshift+0xb6>
 8005ce2:	6920      	ldr	r0, [r4, #16]
 8005ce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ce8:	f104 0314 	add.w	r3, r4, #20
 8005cec:	f019 091f 	ands.w	r9, r9, #31
 8005cf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cf8:	d02b      	beq.n	8005d52 <__lshift+0xbe>
 8005cfa:	f1c9 0e20 	rsb	lr, r9, #32
 8005cfe:	468a      	mov	sl, r1
 8005d00:	2200      	movs	r2, #0
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	fa00 f009 	lsl.w	r0, r0, r9
 8005d08:	4310      	orrs	r0, r2
 8005d0a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d12:	459c      	cmp	ip, r3
 8005d14:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d18:	d8f3      	bhi.n	8005d02 <__lshift+0x6e>
 8005d1a:	ebac 0304 	sub.w	r3, ip, r4
 8005d1e:	3b15      	subs	r3, #21
 8005d20:	f023 0303 	bic.w	r3, r3, #3
 8005d24:	3304      	adds	r3, #4
 8005d26:	f104 0015 	add.w	r0, r4, #21
 8005d2a:	4584      	cmp	ip, r0
 8005d2c:	bf38      	it	cc
 8005d2e:	2304      	movcc	r3, #4
 8005d30:	50ca      	str	r2, [r1, r3]
 8005d32:	b10a      	cbz	r2, 8005d38 <__lshift+0xa4>
 8005d34:	f108 0602 	add.w	r6, r8, #2
 8005d38:	3e01      	subs	r6, #1
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	612e      	str	r6, [r5, #16]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	f7ff fdd8 	bl	80058f4 <_Bfree>
 8005d44:	4628      	mov	r0, r5
 8005d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d4e:	3301      	adds	r3, #1
 8005d50:	e7c5      	b.n	8005cde <__lshift+0x4a>
 8005d52:	3904      	subs	r1, #4
 8005d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d58:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d5c:	459c      	cmp	ip, r3
 8005d5e:	d8f9      	bhi.n	8005d54 <__lshift+0xc0>
 8005d60:	e7ea      	b.n	8005d38 <__lshift+0xa4>
 8005d62:	bf00      	nop
 8005d64:	08006f2c 	.word	0x08006f2c
 8005d68:	08006f3d 	.word	0x08006f3d

08005d6c <__mcmp>:
 8005d6c:	b530      	push	{r4, r5, lr}
 8005d6e:	6902      	ldr	r2, [r0, #16]
 8005d70:	690c      	ldr	r4, [r1, #16]
 8005d72:	1b12      	subs	r2, r2, r4
 8005d74:	d10e      	bne.n	8005d94 <__mcmp+0x28>
 8005d76:	f100 0314 	add.w	r3, r0, #20
 8005d7a:	3114      	adds	r1, #20
 8005d7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d8c:	42a5      	cmp	r5, r4
 8005d8e:	d003      	beq.n	8005d98 <__mcmp+0x2c>
 8005d90:	d305      	bcc.n	8005d9e <__mcmp+0x32>
 8005d92:	2201      	movs	r2, #1
 8005d94:	4610      	mov	r0, r2
 8005d96:	bd30      	pop	{r4, r5, pc}
 8005d98:	4283      	cmp	r3, r0
 8005d9a:	d3f3      	bcc.n	8005d84 <__mcmp+0x18>
 8005d9c:	e7fa      	b.n	8005d94 <__mcmp+0x28>
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	e7f7      	b.n	8005d94 <__mcmp+0x28>

08005da4 <__mdiff>:
 8005da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	460c      	mov	r4, r1
 8005daa:	4606      	mov	r6, r0
 8005dac:	4611      	mov	r1, r2
 8005dae:	4620      	mov	r0, r4
 8005db0:	4690      	mov	r8, r2
 8005db2:	f7ff ffdb 	bl	8005d6c <__mcmp>
 8005db6:	1e05      	subs	r5, r0, #0
 8005db8:	d110      	bne.n	8005ddc <__mdiff+0x38>
 8005dba:	4629      	mov	r1, r5
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff fd59 	bl	8005874 <_Balloc>
 8005dc2:	b930      	cbnz	r0, 8005dd2 <__mdiff+0x2e>
 8005dc4:	4b3a      	ldr	r3, [pc, #232]	; (8005eb0 <__mdiff+0x10c>)
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	f240 2137 	movw	r1, #567	; 0x237
 8005dcc:	4839      	ldr	r0, [pc, #228]	; (8005eb4 <__mdiff+0x110>)
 8005dce:	f000 fb53 	bl	8006478 <__assert_func>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	bfa4      	itt	ge
 8005dde:	4643      	movge	r3, r8
 8005de0:	46a0      	movge	r8, r4
 8005de2:	4630      	mov	r0, r6
 8005de4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005de8:	bfa6      	itte	ge
 8005dea:	461c      	movge	r4, r3
 8005dec:	2500      	movge	r5, #0
 8005dee:	2501      	movlt	r5, #1
 8005df0:	f7ff fd40 	bl	8005874 <_Balloc>
 8005df4:	b920      	cbnz	r0, 8005e00 <__mdiff+0x5c>
 8005df6:	4b2e      	ldr	r3, [pc, #184]	; (8005eb0 <__mdiff+0x10c>)
 8005df8:	4602      	mov	r2, r0
 8005dfa:	f240 2145 	movw	r1, #581	; 0x245
 8005dfe:	e7e5      	b.n	8005dcc <__mdiff+0x28>
 8005e00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e04:	6926      	ldr	r6, [r4, #16]
 8005e06:	60c5      	str	r5, [r0, #12]
 8005e08:	f104 0914 	add.w	r9, r4, #20
 8005e0c:	f108 0514 	add.w	r5, r8, #20
 8005e10:	f100 0e14 	add.w	lr, r0, #20
 8005e14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e1c:	f108 0210 	add.w	r2, r8, #16
 8005e20:	46f2      	mov	sl, lr
 8005e22:	2100      	movs	r1, #0
 8005e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e2c:	fa11 f88b 	uxtah	r8, r1, fp
 8005e30:	b299      	uxth	r1, r3
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	eba8 0801 	sub.w	r8, r8, r1
 8005e38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e40:	fa1f f888 	uxth.w	r8, r8
 8005e44:	1419      	asrs	r1, r3, #16
 8005e46:	454e      	cmp	r6, r9
 8005e48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e4c:	f84a 3b04 	str.w	r3, [sl], #4
 8005e50:	d8e8      	bhi.n	8005e24 <__mdiff+0x80>
 8005e52:	1b33      	subs	r3, r6, r4
 8005e54:	3b15      	subs	r3, #21
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	3415      	adds	r4, #21
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	bf38      	it	cc
 8005e62:	2304      	movcc	r3, #4
 8005e64:	441d      	add	r5, r3
 8005e66:	4473      	add	r3, lr
 8005e68:	469e      	mov	lr, r3
 8005e6a:	462e      	mov	r6, r5
 8005e6c:	4566      	cmp	r6, ip
 8005e6e:	d30e      	bcc.n	8005e8e <__mdiff+0xea>
 8005e70:	f10c 0203 	add.w	r2, ip, #3
 8005e74:	1b52      	subs	r2, r2, r5
 8005e76:	f022 0203 	bic.w	r2, r2, #3
 8005e7a:	3d03      	subs	r5, #3
 8005e7c:	45ac      	cmp	ip, r5
 8005e7e:	bf38      	it	cc
 8005e80:	2200      	movcc	r2, #0
 8005e82:	4413      	add	r3, r2
 8005e84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005e88:	b17a      	cbz	r2, 8005eaa <__mdiff+0x106>
 8005e8a:	6107      	str	r7, [r0, #16]
 8005e8c:	e7a4      	b.n	8005dd8 <__mdiff+0x34>
 8005e8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e92:	fa11 f288 	uxtah	r2, r1, r8
 8005e96:	1414      	asrs	r4, r2, #16
 8005e98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ea2:	f84e 2b04 	str.w	r2, [lr], #4
 8005ea6:	1421      	asrs	r1, r4, #16
 8005ea8:	e7e0      	b.n	8005e6c <__mdiff+0xc8>
 8005eaa:	3f01      	subs	r7, #1
 8005eac:	e7ea      	b.n	8005e84 <__mdiff+0xe0>
 8005eae:	bf00      	nop
 8005eb0:	08006f2c 	.word	0x08006f2c
 8005eb4:	08006f3d 	.word	0x08006f3d

08005eb8 <__d2b>:
 8005eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	ec59 8b10 	vmov	r8, r9, d0
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	f7ff fcd5 	bl	8005874 <_Balloc>
 8005eca:	4604      	mov	r4, r0
 8005ecc:	b930      	cbnz	r0, 8005edc <__d2b+0x24>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <__d2b+0xac>)
 8005ed2:	4825      	ldr	r0, [pc, #148]	; (8005f68 <__d2b+0xb0>)
 8005ed4:	f240 310f 	movw	r1, #783	; 0x30f
 8005ed8:	f000 face 	bl	8006478 <__assert_func>
 8005edc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ee4:	bb2d      	cbnz	r5, 8005f32 <__d2b+0x7a>
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	f1b8 0300 	subs.w	r3, r8, #0
 8005eec:	d026      	beq.n	8005f3c <__d2b+0x84>
 8005eee:	4668      	mov	r0, sp
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	f7ff fd87 	bl	8005a04 <__lo0bits>
 8005ef6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005efa:	b1e8      	cbz	r0, 8005f38 <__d2b+0x80>
 8005efc:	f1c0 0320 	rsb	r3, r0, #32
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	430b      	orrs	r3, r1
 8005f06:	40c2      	lsrs	r2, r0
 8005f08:	6163      	str	r3, [r4, #20]
 8005f0a:	9201      	str	r2, [sp, #4]
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	61a3      	str	r3, [r4, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2202      	movne	r2, #2
 8005f16:	2201      	moveq	r2, #1
 8005f18:	6122      	str	r2, [r4, #16]
 8005f1a:	b1bd      	cbz	r5, 8005f4c <__d2b+0x94>
 8005f1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f20:	4405      	add	r5, r0
 8005f22:	603d      	str	r5, [r7, #0]
 8005f24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f28:	6030      	str	r0, [r6, #0]
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	b003      	add	sp, #12
 8005f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f36:	e7d6      	b.n	8005ee6 <__d2b+0x2e>
 8005f38:	6161      	str	r1, [r4, #20]
 8005f3a:	e7e7      	b.n	8005f0c <__d2b+0x54>
 8005f3c:	a801      	add	r0, sp, #4
 8005f3e:	f7ff fd61 	bl	8005a04 <__lo0bits>
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	3020      	adds	r0, #32
 8005f48:	2201      	movs	r2, #1
 8005f4a:	e7e5      	b.n	8005f18 <__d2b+0x60>
 8005f4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f54:	6038      	str	r0, [r7, #0]
 8005f56:	6918      	ldr	r0, [r3, #16]
 8005f58:	f7ff fd34 	bl	80059c4 <__hi0bits>
 8005f5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f60:	e7e2      	b.n	8005f28 <__d2b+0x70>
 8005f62:	bf00      	nop
 8005f64:	08006f2c 	.word	0x08006f2c
 8005f68:	08006f3d 	.word	0x08006f3d

08005f6c <__sfputc_r>:
 8005f6c:	6893      	ldr	r3, [r2, #8]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	b410      	push	{r4}
 8005f74:	6093      	str	r3, [r2, #8]
 8005f76:	da08      	bge.n	8005f8a <__sfputc_r+0x1e>
 8005f78:	6994      	ldr	r4, [r2, #24]
 8005f7a:	42a3      	cmp	r3, r4
 8005f7c:	db01      	blt.n	8005f82 <__sfputc_r+0x16>
 8005f7e:	290a      	cmp	r1, #10
 8005f80:	d103      	bne.n	8005f8a <__sfputc_r+0x1e>
 8005f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f86:	f7fe bbde 	b.w	8004746 <__swbuf_r>
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	1c58      	adds	r0, r3, #1
 8005f8e:	6010      	str	r0, [r2, #0]
 8005f90:	7019      	strb	r1, [r3, #0]
 8005f92:	4608      	mov	r0, r1
 8005f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <__sfputs_r>:
 8005f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	460f      	mov	r7, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	18d5      	adds	r5, r2, r3
 8005fa4:	42ac      	cmp	r4, r5
 8005fa6:	d101      	bne.n	8005fac <__sfputs_r+0x12>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e007      	b.n	8005fbc <__sfputs_r+0x22>
 8005fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb0:	463a      	mov	r2, r7
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f7ff ffda 	bl	8005f6c <__sfputc_r>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d1f3      	bne.n	8005fa4 <__sfputs_r+0xa>
 8005fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fc0 <_vfiprintf_r>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	b09d      	sub	sp, #116	; 0x74
 8005fc8:	4614      	mov	r4, r2
 8005fca:	4698      	mov	r8, r3
 8005fcc:	4606      	mov	r6, r0
 8005fce:	b118      	cbz	r0, 8005fd8 <_vfiprintf_r+0x18>
 8005fd0:	6a03      	ldr	r3, [r0, #32]
 8005fd2:	b90b      	cbnz	r3, 8005fd8 <_vfiprintf_r+0x18>
 8005fd4:	f7fe fad0 	bl	8004578 <__sinit>
 8005fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fda:	07d9      	lsls	r1, r3, #31
 8005fdc:	d405      	bmi.n	8005fea <_vfiprintf_r+0x2a>
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	059a      	lsls	r2, r3, #22
 8005fe2:	d402      	bmi.n	8005fea <_vfiprintf_r+0x2a>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe6:	f7fe fcba 	bl	800495e <__retarget_lock_acquire_recursive>
 8005fea:	89ab      	ldrh	r3, [r5, #12]
 8005fec:	071b      	lsls	r3, r3, #28
 8005fee:	d501      	bpl.n	8005ff4 <_vfiprintf_r+0x34>
 8005ff0:	692b      	ldr	r3, [r5, #16]
 8005ff2:	b99b      	cbnz	r3, 800601c <_vfiprintf_r+0x5c>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7fe fbe2 	bl	80047c0 <__swsetup_r>
 8005ffc:	b170      	cbz	r0, 800601c <_vfiprintf_r+0x5c>
 8005ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006000:	07dc      	lsls	r4, r3, #31
 8006002:	d504      	bpl.n	800600e <_vfiprintf_r+0x4e>
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	b01d      	add	sp, #116	; 0x74
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	89ab      	ldrh	r3, [r5, #12]
 8006010:	0598      	lsls	r0, r3, #22
 8006012:	d4f7      	bmi.n	8006004 <_vfiprintf_r+0x44>
 8006014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006016:	f7fe fca3 	bl	8004960 <__retarget_lock_release_recursive>
 800601a:	e7f3      	b.n	8006004 <_vfiprintf_r+0x44>
 800601c:	2300      	movs	r3, #0
 800601e:	9309      	str	r3, [sp, #36]	; 0x24
 8006020:	2320      	movs	r3, #32
 8006022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006026:	f8cd 800c 	str.w	r8, [sp, #12]
 800602a:	2330      	movs	r3, #48	; 0x30
 800602c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061e0 <_vfiprintf_r+0x220>
 8006030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006034:	f04f 0901 	mov.w	r9, #1
 8006038:	4623      	mov	r3, r4
 800603a:	469a      	mov	sl, r3
 800603c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006040:	b10a      	cbz	r2, 8006046 <_vfiprintf_r+0x86>
 8006042:	2a25      	cmp	r2, #37	; 0x25
 8006044:	d1f9      	bne.n	800603a <_vfiprintf_r+0x7a>
 8006046:	ebba 0b04 	subs.w	fp, sl, r4
 800604a:	d00b      	beq.n	8006064 <_vfiprintf_r+0xa4>
 800604c:	465b      	mov	r3, fp
 800604e:	4622      	mov	r2, r4
 8006050:	4629      	mov	r1, r5
 8006052:	4630      	mov	r0, r6
 8006054:	f7ff ffa1 	bl	8005f9a <__sfputs_r>
 8006058:	3001      	adds	r0, #1
 800605a:	f000 80a9 	beq.w	80061b0 <_vfiprintf_r+0x1f0>
 800605e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006060:	445a      	add	r2, fp
 8006062:	9209      	str	r2, [sp, #36]	; 0x24
 8006064:	f89a 3000 	ldrb.w	r3, [sl]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 80a1 	beq.w	80061b0 <_vfiprintf_r+0x1f0>
 800606e:	2300      	movs	r3, #0
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006078:	f10a 0a01 	add.w	sl, sl, #1
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	9307      	str	r3, [sp, #28]
 8006080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006084:	931a      	str	r3, [sp, #104]	; 0x68
 8006086:	4654      	mov	r4, sl
 8006088:	2205      	movs	r2, #5
 800608a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608e:	4854      	ldr	r0, [pc, #336]	; (80061e0 <_vfiprintf_r+0x220>)
 8006090:	f7fa f89e 	bl	80001d0 <memchr>
 8006094:	9a04      	ldr	r2, [sp, #16]
 8006096:	b9d8      	cbnz	r0, 80060d0 <_vfiprintf_r+0x110>
 8006098:	06d1      	lsls	r1, r2, #27
 800609a:	bf44      	itt	mi
 800609c:	2320      	movmi	r3, #32
 800609e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a2:	0713      	lsls	r3, r2, #28
 80060a4:	bf44      	itt	mi
 80060a6:	232b      	movmi	r3, #43	; 0x2b
 80060a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ac:	f89a 3000 	ldrb.w	r3, [sl]
 80060b0:	2b2a      	cmp	r3, #42	; 0x2a
 80060b2:	d015      	beq.n	80060e0 <_vfiprintf_r+0x120>
 80060b4:	9a07      	ldr	r2, [sp, #28]
 80060b6:	4654      	mov	r4, sl
 80060b8:	2000      	movs	r0, #0
 80060ba:	f04f 0c0a 	mov.w	ip, #10
 80060be:	4621      	mov	r1, r4
 80060c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060c4:	3b30      	subs	r3, #48	; 0x30
 80060c6:	2b09      	cmp	r3, #9
 80060c8:	d94d      	bls.n	8006166 <_vfiprintf_r+0x1a6>
 80060ca:	b1b0      	cbz	r0, 80060fa <_vfiprintf_r+0x13a>
 80060cc:	9207      	str	r2, [sp, #28]
 80060ce:	e014      	b.n	80060fa <_vfiprintf_r+0x13a>
 80060d0:	eba0 0308 	sub.w	r3, r0, r8
 80060d4:	fa09 f303 	lsl.w	r3, r9, r3
 80060d8:	4313      	orrs	r3, r2
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	46a2      	mov	sl, r4
 80060de:	e7d2      	b.n	8006086 <_vfiprintf_r+0xc6>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	1d19      	adds	r1, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	9103      	str	r1, [sp, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfbb      	ittet	lt
 80060ec:	425b      	neglt	r3, r3
 80060ee:	f042 0202 	orrlt.w	r2, r2, #2
 80060f2:	9307      	strge	r3, [sp, #28]
 80060f4:	9307      	strlt	r3, [sp, #28]
 80060f6:	bfb8      	it	lt
 80060f8:	9204      	strlt	r2, [sp, #16]
 80060fa:	7823      	ldrb	r3, [r4, #0]
 80060fc:	2b2e      	cmp	r3, #46	; 0x2e
 80060fe:	d10c      	bne.n	800611a <_vfiprintf_r+0x15a>
 8006100:	7863      	ldrb	r3, [r4, #1]
 8006102:	2b2a      	cmp	r3, #42	; 0x2a
 8006104:	d134      	bne.n	8006170 <_vfiprintf_r+0x1b0>
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	9203      	str	r2, [sp, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfb8      	it	lt
 8006112:	f04f 33ff 	movlt.w	r3, #4294967295
 8006116:	3402      	adds	r4, #2
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061f0 <_vfiprintf_r+0x230>
 800611e:	7821      	ldrb	r1, [r4, #0]
 8006120:	2203      	movs	r2, #3
 8006122:	4650      	mov	r0, sl
 8006124:	f7fa f854 	bl	80001d0 <memchr>
 8006128:	b138      	cbz	r0, 800613a <_vfiprintf_r+0x17a>
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	eba0 000a 	sub.w	r0, r0, sl
 8006130:	2240      	movs	r2, #64	; 0x40
 8006132:	4082      	lsls	r2, r0
 8006134:	4313      	orrs	r3, r2
 8006136:	3401      	adds	r4, #1
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613e:	4829      	ldr	r0, [pc, #164]	; (80061e4 <_vfiprintf_r+0x224>)
 8006140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006144:	2206      	movs	r2, #6
 8006146:	f7fa f843 	bl	80001d0 <memchr>
 800614a:	2800      	cmp	r0, #0
 800614c:	d03f      	beq.n	80061ce <_vfiprintf_r+0x20e>
 800614e:	4b26      	ldr	r3, [pc, #152]	; (80061e8 <_vfiprintf_r+0x228>)
 8006150:	bb1b      	cbnz	r3, 800619a <_vfiprintf_r+0x1da>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	3307      	adds	r3, #7
 8006156:	f023 0307 	bic.w	r3, r3, #7
 800615a:	3308      	adds	r3, #8
 800615c:	9303      	str	r3, [sp, #12]
 800615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006160:	443b      	add	r3, r7
 8006162:	9309      	str	r3, [sp, #36]	; 0x24
 8006164:	e768      	b.n	8006038 <_vfiprintf_r+0x78>
 8006166:	fb0c 3202 	mla	r2, ip, r2, r3
 800616a:	460c      	mov	r4, r1
 800616c:	2001      	movs	r0, #1
 800616e:	e7a6      	b.n	80060be <_vfiprintf_r+0xfe>
 8006170:	2300      	movs	r3, #0
 8006172:	3401      	adds	r4, #1
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	4619      	mov	r1, r3
 8006178:	f04f 0c0a 	mov.w	ip, #10
 800617c:	4620      	mov	r0, r4
 800617e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006182:	3a30      	subs	r2, #48	; 0x30
 8006184:	2a09      	cmp	r2, #9
 8006186:	d903      	bls.n	8006190 <_vfiprintf_r+0x1d0>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0c6      	beq.n	800611a <_vfiprintf_r+0x15a>
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	e7c4      	b.n	800611a <_vfiprintf_r+0x15a>
 8006190:	fb0c 2101 	mla	r1, ip, r1, r2
 8006194:	4604      	mov	r4, r0
 8006196:	2301      	movs	r3, #1
 8006198:	e7f0      	b.n	800617c <_vfiprintf_r+0x1bc>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <_vfiprintf_r+0x22c>)
 80061a2:	a904      	add	r1, sp, #16
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7fd fd95 	bl	8003cd4 <_printf_float>
 80061aa:	4607      	mov	r7, r0
 80061ac:	1c78      	adds	r0, r7, #1
 80061ae:	d1d6      	bne.n	800615e <_vfiprintf_r+0x19e>
 80061b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061b2:	07d9      	lsls	r1, r3, #31
 80061b4:	d405      	bmi.n	80061c2 <_vfiprintf_r+0x202>
 80061b6:	89ab      	ldrh	r3, [r5, #12]
 80061b8:	059a      	lsls	r2, r3, #22
 80061ba:	d402      	bmi.n	80061c2 <_vfiprintf_r+0x202>
 80061bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061be:	f7fe fbcf 	bl	8004960 <__retarget_lock_release_recursive>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	065b      	lsls	r3, r3, #25
 80061c6:	f53f af1d 	bmi.w	8006004 <_vfiprintf_r+0x44>
 80061ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061cc:	e71c      	b.n	8006008 <_vfiprintf_r+0x48>
 80061ce:	ab03      	add	r3, sp, #12
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	462a      	mov	r2, r5
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <_vfiprintf_r+0x22c>)
 80061d6:	a904      	add	r1, sp, #16
 80061d8:	4630      	mov	r0, r6
 80061da:	f7fe f81f 	bl	800421c <_printf_i>
 80061de:	e7e4      	b.n	80061aa <_vfiprintf_r+0x1ea>
 80061e0:	08007094 	.word	0x08007094
 80061e4:	0800709e 	.word	0x0800709e
 80061e8:	08003cd5 	.word	0x08003cd5
 80061ec:	08005f9b 	.word	0x08005f9b
 80061f0:	0800709a 	.word	0x0800709a

080061f4 <__sflush_r>:
 80061f4:	898a      	ldrh	r2, [r1, #12]
 80061f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fa:	4605      	mov	r5, r0
 80061fc:	0710      	lsls	r0, r2, #28
 80061fe:	460c      	mov	r4, r1
 8006200:	d458      	bmi.n	80062b4 <__sflush_r+0xc0>
 8006202:	684b      	ldr	r3, [r1, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	dc05      	bgt.n	8006214 <__sflush_r+0x20>
 8006208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc02      	bgt.n	8006214 <__sflush_r+0x20>
 800620e:	2000      	movs	r0, #0
 8006210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006216:	2e00      	cmp	r6, #0
 8006218:	d0f9      	beq.n	800620e <__sflush_r+0x1a>
 800621a:	2300      	movs	r3, #0
 800621c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006220:	682f      	ldr	r7, [r5, #0]
 8006222:	6a21      	ldr	r1, [r4, #32]
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	d032      	beq.n	800628e <__sflush_r+0x9a>
 8006228:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	075a      	lsls	r2, r3, #29
 800622e:	d505      	bpl.n	800623c <__sflush_r+0x48>
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	1ac0      	subs	r0, r0, r3
 8006234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006236:	b10b      	cbz	r3, 800623c <__sflush_r+0x48>
 8006238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800623a:	1ac0      	subs	r0, r0, r3
 800623c:	2300      	movs	r3, #0
 800623e:	4602      	mov	r2, r0
 8006240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006242:	6a21      	ldr	r1, [r4, #32]
 8006244:	4628      	mov	r0, r5
 8006246:	47b0      	blx	r6
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	d106      	bne.n	800625c <__sflush_r+0x68>
 800624e:	6829      	ldr	r1, [r5, #0]
 8006250:	291d      	cmp	r1, #29
 8006252:	d82b      	bhi.n	80062ac <__sflush_r+0xb8>
 8006254:	4a29      	ldr	r2, [pc, #164]	; (80062fc <__sflush_r+0x108>)
 8006256:	410a      	asrs	r2, r1
 8006258:	07d6      	lsls	r6, r2, #31
 800625a:	d427      	bmi.n	80062ac <__sflush_r+0xb8>
 800625c:	2200      	movs	r2, #0
 800625e:	6062      	str	r2, [r4, #4]
 8006260:	04d9      	lsls	r1, r3, #19
 8006262:	6922      	ldr	r2, [r4, #16]
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	d504      	bpl.n	8006272 <__sflush_r+0x7e>
 8006268:	1c42      	adds	r2, r0, #1
 800626a:	d101      	bne.n	8006270 <__sflush_r+0x7c>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b903      	cbnz	r3, 8006272 <__sflush_r+0x7e>
 8006270:	6560      	str	r0, [r4, #84]	; 0x54
 8006272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006274:	602f      	str	r7, [r5, #0]
 8006276:	2900      	cmp	r1, #0
 8006278:	d0c9      	beq.n	800620e <__sflush_r+0x1a>
 800627a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800627e:	4299      	cmp	r1, r3
 8006280:	d002      	beq.n	8006288 <__sflush_r+0x94>
 8006282:	4628      	mov	r0, r5
 8006284:	f7ff f9f6 	bl	8005674 <_free_r>
 8006288:	2000      	movs	r0, #0
 800628a:	6360      	str	r0, [r4, #52]	; 0x34
 800628c:	e7c0      	b.n	8006210 <__sflush_r+0x1c>
 800628e:	2301      	movs	r3, #1
 8006290:	4628      	mov	r0, r5
 8006292:	47b0      	blx	r6
 8006294:	1c41      	adds	r1, r0, #1
 8006296:	d1c8      	bne.n	800622a <__sflush_r+0x36>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0c5      	beq.n	800622a <__sflush_r+0x36>
 800629e:	2b1d      	cmp	r3, #29
 80062a0:	d001      	beq.n	80062a6 <__sflush_r+0xb2>
 80062a2:	2b16      	cmp	r3, #22
 80062a4:	d101      	bne.n	80062aa <__sflush_r+0xb6>
 80062a6:	602f      	str	r7, [r5, #0]
 80062a8:	e7b1      	b.n	800620e <__sflush_r+0x1a>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	e7ad      	b.n	8006210 <__sflush_r+0x1c>
 80062b4:	690f      	ldr	r7, [r1, #16]
 80062b6:	2f00      	cmp	r7, #0
 80062b8:	d0a9      	beq.n	800620e <__sflush_r+0x1a>
 80062ba:	0793      	lsls	r3, r2, #30
 80062bc:	680e      	ldr	r6, [r1, #0]
 80062be:	bf08      	it	eq
 80062c0:	694b      	ldreq	r3, [r1, #20]
 80062c2:	600f      	str	r7, [r1, #0]
 80062c4:	bf18      	it	ne
 80062c6:	2300      	movne	r3, #0
 80062c8:	eba6 0807 	sub.w	r8, r6, r7
 80062cc:	608b      	str	r3, [r1, #8]
 80062ce:	f1b8 0f00 	cmp.w	r8, #0
 80062d2:	dd9c      	ble.n	800620e <__sflush_r+0x1a>
 80062d4:	6a21      	ldr	r1, [r4, #32]
 80062d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062d8:	4643      	mov	r3, r8
 80062da:	463a      	mov	r2, r7
 80062dc:	4628      	mov	r0, r5
 80062de:	47b0      	blx	r6
 80062e0:	2800      	cmp	r0, #0
 80062e2:	dc06      	bgt.n	80062f2 <__sflush_r+0xfe>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	e78e      	b.n	8006210 <__sflush_r+0x1c>
 80062f2:	4407      	add	r7, r0
 80062f4:	eba8 0800 	sub.w	r8, r8, r0
 80062f8:	e7e9      	b.n	80062ce <__sflush_r+0xda>
 80062fa:	bf00      	nop
 80062fc:	dfbffffe 	.word	0xdfbffffe

08006300 <_fflush_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	690b      	ldr	r3, [r1, #16]
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b913      	cbnz	r3, 8006310 <_fflush_r+0x10>
 800630a:	2500      	movs	r5, #0
 800630c:	4628      	mov	r0, r5
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	b118      	cbz	r0, 800631a <_fflush_r+0x1a>
 8006312:	6a03      	ldr	r3, [r0, #32]
 8006314:	b90b      	cbnz	r3, 800631a <_fflush_r+0x1a>
 8006316:	f7fe f92f 	bl	8004578 <__sinit>
 800631a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f3      	beq.n	800630a <_fflush_r+0xa>
 8006322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006324:	07d0      	lsls	r0, r2, #31
 8006326:	d404      	bmi.n	8006332 <_fflush_r+0x32>
 8006328:	0599      	lsls	r1, r3, #22
 800632a:	d402      	bmi.n	8006332 <_fflush_r+0x32>
 800632c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800632e:	f7fe fb16 	bl	800495e <__retarget_lock_acquire_recursive>
 8006332:	4628      	mov	r0, r5
 8006334:	4621      	mov	r1, r4
 8006336:	f7ff ff5d 	bl	80061f4 <__sflush_r>
 800633a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800633c:	07da      	lsls	r2, r3, #31
 800633e:	4605      	mov	r5, r0
 8006340:	d4e4      	bmi.n	800630c <_fflush_r+0xc>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	059b      	lsls	r3, r3, #22
 8006346:	d4e1      	bmi.n	800630c <_fflush_r+0xc>
 8006348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800634a:	f7fe fb09 	bl	8004960 <__retarget_lock_release_recursive>
 800634e:	e7dd      	b.n	800630c <_fflush_r+0xc>

08006350 <__swhatbuf_r>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	2900      	cmp	r1, #0
 800635a:	b096      	sub	sp, #88	; 0x58
 800635c:	4615      	mov	r5, r2
 800635e:	461e      	mov	r6, r3
 8006360:	da0d      	bge.n	800637e <__swhatbuf_r+0x2e>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	bf0c      	ite	eq
 800636e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006372:	2340      	movne	r3, #64	; 0x40
 8006374:	2000      	movs	r0, #0
 8006376:	6031      	str	r1, [r6, #0]
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	b016      	add	sp, #88	; 0x58
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	466a      	mov	r2, sp
 8006380:	f000 f848 	bl	8006414 <_fstat_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	dbec      	blt.n	8006362 <__swhatbuf_r+0x12>
 8006388:	9901      	ldr	r1, [sp, #4]
 800638a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800638e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006392:	4259      	negs	r1, r3
 8006394:	4159      	adcs	r1, r3
 8006396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800639a:	e7eb      	b.n	8006374 <__swhatbuf_r+0x24>

0800639c <__smakebuf_r>:
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063a0:	079d      	lsls	r5, r3, #30
 80063a2:	4606      	mov	r6, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	d507      	bpl.n	80063b8 <__smakebuf_r+0x1c>
 80063a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	2301      	movs	r3, #1
 80063b2:	6163      	str	r3, [r4, #20]
 80063b4:	b002      	add	sp, #8
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	ab01      	add	r3, sp, #4
 80063ba:	466a      	mov	r2, sp
 80063bc:	f7ff ffc8 	bl	8006350 <__swhatbuf_r>
 80063c0:	9900      	ldr	r1, [sp, #0]
 80063c2:	4605      	mov	r5, r0
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7ff f9c9 	bl	800575c <_malloc_r>
 80063ca:	b948      	cbnz	r0, 80063e0 <__smakebuf_r+0x44>
 80063cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d0:	059a      	lsls	r2, r3, #22
 80063d2:	d4ef      	bmi.n	80063b4 <__smakebuf_r+0x18>
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	e7e3      	b.n	80063a8 <__smakebuf_r+0xc>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	6163      	str	r3, [r4, #20]
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	6120      	str	r0, [r4, #16]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x70>
 80063f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f81d 	bl	8006438 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x70>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	431d      	orrs	r5, r3
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cf      	b.n	80063b4 <__smakebuf_r+0x18>

08006414 <_fstat_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d07      	ldr	r5, [pc, #28]	; (8006434 <_fstat_r+0x20>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f000 fa20 	bl	8006866 <_fstat>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_fstat_r+0x1c>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b103      	cbz	r3, 8006430 <_fstat_r+0x1c>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	200003a0 	.word	0x200003a0

08006438 <_isatty_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d06      	ldr	r5, [pc, #24]	; (8006454 <_isatty_r+0x1c>)
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	f000 fb82 	bl	8006b4c <_isatty>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_isatty_r+0x1a>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_isatty_r+0x1a>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	200003a0 	.word	0x200003a0

08006458 <_sbrk_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	; (8006474 <_sbrk_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f000 f9ba 	bl	80067dc <_sbrk>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_sbrk_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_sbrk_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	200003a0 	.word	0x200003a0

08006478 <__assert_func>:
 8006478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800647a:	4614      	mov	r4, r2
 800647c:	461a      	mov	r2, r3
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <__assert_func+0x2c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4605      	mov	r5, r0
 8006484:	68d8      	ldr	r0, [r3, #12]
 8006486:	b14c      	cbz	r4, 800649c <__assert_func+0x24>
 8006488:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <__assert_func+0x30>)
 800648a:	9100      	str	r1, [sp, #0]
 800648c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006490:	4906      	ldr	r1, [pc, #24]	; (80064ac <__assert_func+0x34>)
 8006492:	462b      	mov	r3, r5
 8006494:	f000 f844 	bl	8006520 <fiprintf>
 8006498:	f000 f854 	bl	8006544 <abort>
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <__assert_func+0x38>)
 800649e:	461c      	mov	r4, r3
 80064a0:	e7f3      	b.n	800648a <__assert_func+0x12>
 80064a2:	bf00      	nop
 80064a4:	20000070 	.word	0x20000070
 80064a8:	080070af 	.word	0x080070af
 80064ac:	080070bc 	.word	0x080070bc
 80064b0:	080070ea 	.word	0x080070ea

080064b4 <_calloc_r>:
 80064b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064b6:	fba1 2402 	umull	r2, r4, r1, r2
 80064ba:	b94c      	cbnz	r4, 80064d0 <_calloc_r+0x1c>
 80064bc:	4611      	mov	r1, r2
 80064be:	9201      	str	r2, [sp, #4]
 80064c0:	f7ff f94c 	bl	800575c <_malloc_r>
 80064c4:	9a01      	ldr	r2, [sp, #4]
 80064c6:	4605      	mov	r5, r0
 80064c8:	b930      	cbnz	r0, 80064d8 <_calloc_r+0x24>
 80064ca:	4628      	mov	r0, r5
 80064cc:	b003      	add	sp, #12
 80064ce:	bd30      	pop	{r4, r5, pc}
 80064d0:	220c      	movs	r2, #12
 80064d2:	6002      	str	r2, [r0, #0]
 80064d4:	2500      	movs	r5, #0
 80064d6:	e7f8      	b.n	80064ca <_calloc_r+0x16>
 80064d8:	4621      	mov	r1, r4
 80064da:	f7fe f9c9 	bl	8004870 <memset>
 80064de:	e7f4      	b.n	80064ca <_calloc_r+0x16>

080064e0 <__ascii_mbtowc>:
 80064e0:	b082      	sub	sp, #8
 80064e2:	b901      	cbnz	r1, 80064e6 <__ascii_mbtowc+0x6>
 80064e4:	a901      	add	r1, sp, #4
 80064e6:	b142      	cbz	r2, 80064fa <__ascii_mbtowc+0x1a>
 80064e8:	b14b      	cbz	r3, 80064fe <__ascii_mbtowc+0x1e>
 80064ea:	7813      	ldrb	r3, [r2, #0]
 80064ec:	600b      	str	r3, [r1, #0]
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	1e10      	subs	r0, r2, #0
 80064f2:	bf18      	it	ne
 80064f4:	2001      	movne	r0, #1
 80064f6:	b002      	add	sp, #8
 80064f8:	4770      	bx	lr
 80064fa:	4610      	mov	r0, r2
 80064fc:	e7fb      	b.n	80064f6 <__ascii_mbtowc+0x16>
 80064fe:	f06f 0001 	mvn.w	r0, #1
 8006502:	e7f8      	b.n	80064f6 <__ascii_mbtowc+0x16>

08006504 <__ascii_wctomb>:
 8006504:	b149      	cbz	r1, 800651a <__ascii_wctomb+0x16>
 8006506:	2aff      	cmp	r2, #255	; 0xff
 8006508:	bf85      	ittet	hi
 800650a:	238a      	movhi	r3, #138	; 0x8a
 800650c:	6003      	strhi	r3, [r0, #0]
 800650e:	700a      	strbls	r2, [r1, #0]
 8006510:	f04f 30ff 	movhi.w	r0, #4294967295
 8006514:	bf98      	it	ls
 8006516:	2001      	movls	r0, #1
 8006518:	4770      	bx	lr
 800651a:	4608      	mov	r0, r1
 800651c:	4770      	bx	lr
	...

08006520 <fiprintf>:
 8006520:	b40e      	push	{r1, r2, r3}
 8006522:	b503      	push	{r0, r1, lr}
 8006524:	4601      	mov	r1, r0
 8006526:	ab03      	add	r3, sp, #12
 8006528:	4805      	ldr	r0, [pc, #20]	; (8006540 <fiprintf+0x20>)
 800652a:	f853 2b04 	ldr.w	r2, [r3], #4
 800652e:	6800      	ldr	r0, [r0, #0]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	f7ff fd45 	bl	8005fc0 <_vfiprintf_r>
 8006536:	b002      	add	sp, #8
 8006538:	f85d eb04 	ldr.w	lr, [sp], #4
 800653c:	b003      	add	sp, #12
 800653e:	4770      	bx	lr
 8006540:	20000070 	.word	0x20000070

08006544 <abort>:
 8006544:	b508      	push	{r3, lr}
 8006546:	2006      	movs	r0, #6
 8006548:	f000 f82c 	bl	80065a4 <raise>
 800654c:	2001      	movs	r0, #1
 800654e:	f000 fb19 	bl	8006b84 <_exit>

08006552 <_raise_r>:
 8006552:	291f      	cmp	r1, #31
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4604      	mov	r4, r0
 8006558:	460d      	mov	r5, r1
 800655a:	d904      	bls.n	8006566 <_raise_r+0x14>
 800655c:	2316      	movs	r3, #22
 800655e:	6003      	str	r3, [r0, #0]
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	bd38      	pop	{r3, r4, r5, pc}
 8006566:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006568:	b112      	cbz	r2, 8006570 <_raise_r+0x1e>
 800656a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800656e:	b94b      	cbnz	r3, 8006584 <_raise_r+0x32>
 8006570:	4620      	mov	r0, r4
 8006572:	f000 f831 	bl	80065d8 <_getpid_r>
 8006576:	462a      	mov	r2, r5
 8006578:	4601      	mov	r1, r0
 800657a:	4620      	mov	r0, r4
 800657c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006580:	f000 b818 	b.w	80065b4 <_kill_r>
 8006584:	2b01      	cmp	r3, #1
 8006586:	d00a      	beq.n	800659e <_raise_r+0x4c>
 8006588:	1c59      	adds	r1, r3, #1
 800658a:	d103      	bne.n	8006594 <_raise_r+0x42>
 800658c:	2316      	movs	r3, #22
 800658e:	6003      	str	r3, [r0, #0]
 8006590:	2001      	movs	r0, #1
 8006592:	e7e7      	b.n	8006564 <_raise_r+0x12>
 8006594:	2400      	movs	r4, #0
 8006596:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800659a:	4628      	mov	r0, r5
 800659c:	4798      	blx	r3
 800659e:	2000      	movs	r0, #0
 80065a0:	e7e0      	b.n	8006564 <_raise_r+0x12>
	...

080065a4 <raise>:
 80065a4:	4b02      	ldr	r3, [pc, #8]	; (80065b0 <raise+0xc>)
 80065a6:	4601      	mov	r1, r0
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	f7ff bfd2 	b.w	8006552 <_raise_r>
 80065ae:	bf00      	nop
 80065b0:	20000070 	.word	0x20000070

080065b4 <_kill_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4d07      	ldr	r5, [pc, #28]	; (80065d4 <_kill_r+0x20>)
 80065b8:	2300      	movs	r3, #0
 80065ba:	4604      	mov	r4, r0
 80065bc:	4608      	mov	r0, r1
 80065be:	4611      	mov	r1, r2
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	f000 fafd 	bl	8006bc0 <_kill>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	d102      	bne.n	80065d0 <_kill_r+0x1c>
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	b103      	cbz	r3, 80065d0 <_kill_r+0x1c>
 80065ce:	6023      	str	r3, [r4, #0]
 80065d0:	bd38      	pop	{r3, r4, r5, pc}
 80065d2:	bf00      	nop
 80065d4:	200003a0 	.word	0x200003a0

080065d8 <_getpid_r>:
 80065d8:	f000 b8fe 	b.w	80067d8 <_getpid>

080065dc <findslot>:
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <findslot+0x2c>)
 80065de:	b510      	push	{r4, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	b118      	cbz	r0, 80065ee <findslot+0x12>
 80065e6:	6a03      	ldr	r3, [r0, #32]
 80065e8:	b90b      	cbnz	r3, 80065ee <findslot+0x12>
 80065ea:	f7fd ffc5 	bl	8004578 <__sinit>
 80065ee:	2c13      	cmp	r4, #19
 80065f0:	d807      	bhi.n	8006602 <findslot+0x26>
 80065f2:	4806      	ldr	r0, [pc, #24]	; (800660c <findslot+0x30>)
 80065f4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80065f8:	3201      	adds	r2, #1
 80065fa:	d002      	beq.n	8006602 <findslot+0x26>
 80065fc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006600:	bd10      	pop	{r4, pc}
 8006602:	2000      	movs	r0, #0
 8006604:	e7fc      	b.n	8006600 <findslot+0x24>
 8006606:	bf00      	nop
 8006608:	20000070 	.word	0x20000070
 800660c:	200003c0 	.word	0x200003c0

08006610 <error>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	4604      	mov	r4, r0
 8006614:	f000 fae0 	bl	8006bd8 <__errno>
 8006618:	2613      	movs	r6, #19
 800661a:	4605      	mov	r5, r0
 800661c:	2700      	movs	r7, #0
 800661e:	4630      	mov	r0, r6
 8006620:	4639      	mov	r1, r7
 8006622:	beab      	bkpt	0x00ab
 8006624:	4606      	mov	r6, r0
 8006626:	602e      	str	r6, [r5, #0]
 8006628:	4620      	mov	r0, r4
 800662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800662c <checkerror>:
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d101      	bne.n	8006634 <checkerror+0x8>
 8006630:	f7ff bfee 	b.w	8006610 <error>
 8006634:	4770      	bx	lr

08006636 <_swiread>:
 8006636:	b530      	push	{r4, r5, lr}
 8006638:	b085      	sub	sp, #20
 800663a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800663e:	9203      	str	r2, [sp, #12]
 8006640:	2406      	movs	r4, #6
 8006642:	ad01      	add	r5, sp, #4
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	beab      	bkpt	0x00ab
 800664a:	4604      	mov	r4, r0
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff ffed 	bl	800662c <checkerror>
 8006652:	b005      	add	sp, #20
 8006654:	bd30      	pop	{r4, r5, pc}

08006656 <_read>:
 8006656:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006658:	4615      	mov	r5, r2
 800665a:	9101      	str	r1, [sp, #4]
 800665c:	f7ff ffbe 	bl	80065dc <findslot>
 8006660:	9901      	ldr	r1, [sp, #4]
 8006662:	4604      	mov	r4, r0
 8006664:	b938      	cbnz	r0, 8006676 <_read+0x20>
 8006666:	f000 fab7 	bl	8006bd8 <__errno>
 800666a:	2309      	movs	r3, #9
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	f04f 30ff 	mov.w	r0, #4294967295
 8006672:	b003      	add	sp, #12
 8006674:	bd30      	pop	{r4, r5, pc}
 8006676:	6800      	ldr	r0, [r0, #0]
 8006678:	462a      	mov	r2, r5
 800667a:	f7ff ffdc 	bl	8006636 <_swiread>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d0f7      	beq.n	8006672 <_read+0x1c>
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	1a2a      	subs	r2, r5, r0
 8006686:	4413      	add	r3, r2
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	4610      	mov	r0, r2
 800668c:	e7f1      	b.n	8006672 <_read+0x1c>

0800668e <_swilseek>:
 800668e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006690:	460c      	mov	r4, r1
 8006692:	4616      	mov	r6, r2
 8006694:	f7ff ffa2 	bl	80065dc <findslot>
 8006698:	4605      	mov	r5, r0
 800669a:	b940      	cbnz	r0, 80066ae <_swilseek+0x20>
 800669c:	f000 fa9c 	bl	8006bd8 <__errno>
 80066a0:	2309      	movs	r3, #9
 80066a2:	6003      	str	r3, [r0, #0]
 80066a4:	f04f 34ff 	mov.w	r4, #4294967295
 80066a8:	4620      	mov	r0, r4
 80066aa:	b003      	add	sp, #12
 80066ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ae:	2e02      	cmp	r6, #2
 80066b0:	d903      	bls.n	80066ba <_swilseek+0x2c>
 80066b2:	f000 fa91 	bl	8006bd8 <__errno>
 80066b6:	2316      	movs	r3, #22
 80066b8:	e7f3      	b.n	80066a2 <_swilseek+0x14>
 80066ba:	2e01      	cmp	r6, #1
 80066bc:	d112      	bne.n	80066e4 <_swilseek+0x56>
 80066be:	6843      	ldr	r3, [r0, #4]
 80066c0:	18e4      	adds	r4, r4, r3
 80066c2:	d4f6      	bmi.n	80066b2 <_swilseek+0x24>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	260a      	movs	r6, #10
 80066c8:	e9cd 3400 	strd	r3, r4, [sp]
 80066cc:	466f      	mov	r7, sp
 80066ce:	4630      	mov	r0, r6
 80066d0:	4639      	mov	r1, r7
 80066d2:	beab      	bkpt	0x00ab
 80066d4:	4606      	mov	r6, r0
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ffa8 	bl	800662c <checkerror>
 80066dc:	2800      	cmp	r0, #0
 80066de:	dbe1      	blt.n	80066a4 <_swilseek+0x16>
 80066e0:	606c      	str	r4, [r5, #4]
 80066e2:	e7e1      	b.n	80066a8 <_swilseek+0x1a>
 80066e4:	2e02      	cmp	r6, #2
 80066e6:	6803      	ldr	r3, [r0, #0]
 80066e8:	d1ec      	bne.n	80066c4 <_swilseek+0x36>
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	260c      	movs	r6, #12
 80066ee:	466f      	mov	r7, sp
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	beab      	bkpt	0x00ab
 80066f6:	4606      	mov	r6, r0
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ff97 	bl	800662c <checkerror>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	d0d0      	beq.n	80066a4 <_swilseek+0x16>
 8006702:	4404      	add	r4, r0
 8006704:	e7de      	b.n	80066c4 <_swilseek+0x36>

08006706 <_lseek>:
 8006706:	f7ff bfc2 	b.w	800668e <_swilseek>

0800670a <_swiwrite>:
 800670a:	b530      	push	{r4, r5, lr}
 800670c:	b085      	sub	sp, #20
 800670e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006712:	9203      	str	r2, [sp, #12]
 8006714:	2405      	movs	r4, #5
 8006716:	ad01      	add	r5, sp, #4
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	beab      	bkpt	0x00ab
 800671e:	4604      	mov	r4, r0
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff ff83 	bl	800662c <checkerror>
 8006726:	b005      	add	sp, #20
 8006728:	bd30      	pop	{r4, r5, pc}

0800672a <_write>:
 800672a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800672c:	4615      	mov	r5, r2
 800672e:	9101      	str	r1, [sp, #4]
 8006730:	f7ff ff54 	bl	80065dc <findslot>
 8006734:	9901      	ldr	r1, [sp, #4]
 8006736:	4604      	mov	r4, r0
 8006738:	b930      	cbnz	r0, 8006748 <_write+0x1e>
 800673a:	f000 fa4d 	bl	8006bd8 <__errno>
 800673e:	2309      	movs	r3, #9
 8006740:	6003      	str	r3, [r0, #0]
 8006742:	f04f 30ff 	mov.w	r0, #4294967295
 8006746:	e012      	b.n	800676e <_write+0x44>
 8006748:	6800      	ldr	r0, [r0, #0]
 800674a:	462a      	mov	r2, r5
 800674c:	f7ff ffdd 	bl	800670a <_swiwrite>
 8006750:	2800      	cmp	r0, #0
 8006752:	dbf6      	blt.n	8006742 <_write+0x18>
 8006754:	6862      	ldr	r2, [r4, #4]
 8006756:	1a2b      	subs	r3, r5, r0
 8006758:	441a      	add	r2, r3
 800675a:	42a8      	cmp	r0, r5
 800675c:	6062      	str	r2, [r4, #4]
 800675e:	d105      	bne.n	800676c <_write+0x42>
 8006760:	2000      	movs	r0, #0
 8006762:	b003      	add	sp, #12
 8006764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006768:	f7ff bf52 	b.w	8006610 <error>
 800676c:	4618      	mov	r0, r3
 800676e:	b003      	add	sp, #12
 8006770:	bd30      	pop	{r4, r5, pc}

08006772 <_swiclose>:
 8006772:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006774:	2402      	movs	r4, #2
 8006776:	9001      	str	r0, [sp, #4]
 8006778:	ad01      	add	r5, sp, #4
 800677a:	4620      	mov	r0, r4
 800677c:	4629      	mov	r1, r5
 800677e:	beab      	bkpt	0x00ab
 8006780:	4604      	mov	r4, r0
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ff52 	bl	800662c <checkerror>
 8006788:	b003      	add	sp, #12
 800678a:	bd30      	pop	{r4, r5, pc}

0800678c <_close>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4605      	mov	r5, r0
 8006790:	f7ff ff24 	bl	80065dc <findslot>
 8006794:	4604      	mov	r4, r0
 8006796:	b930      	cbnz	r0, 80067a6 <_close+0x1a>
 8006798:	f000 fa1e 	bl	8006bd8 <__errno>
 800679c:	2309      	movs	r3, #9
 800679e:	6003      	str	r3, [r0, #0]
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	3d01      	subs	r5, #1
 80067a8:	2d01      	cmp	r5, #1
 80067aa:	d809      	bhi.n	80067c0 <_close+0x34>
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <_close+0x48>)
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d104      	bne.n	80067c0 <_close+0x34>
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	6003      	str	r3, [r0, #0]
 80067bc:	2000      	movs	r0, #0
 80067be:	e7f1      	b.n	80067a4 <_close+0x18>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	f7ff ffd6 	bl	8006772 <_swiclose>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d1ec      	bne.n	80067a4 <_close+0x18>
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	e7e8      	b.n	80067a4 <_close+0x18>
 80067d2:	bf00      	nop
 80067d4:	200003c0 	.word	0x200003c0

080067d8 <_getpid>:
 80067d8:	2001      	movs	r0, #1
 80067da:	4770      	bx	lr

080067dc <_sbrk>:
 80067dc:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <_sbrk+0x38>)
 80067de:	6811      	ldr	r1, [r2, #0]
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4603      	mov	r3, r0
 80067e4:	b909      	cbnz	r1, 80067ea <_sbrk+0xe>
 80067e6:	490c      	ldr	r1, [pc, #48]	; (8006818 <_sbrk+0x3c>)
 80067e8:	6011      	str	r1, [r2, #0]
 80067ea:	6810      	ldr	r0, [r2, #0]
 80067ec:	4669      	mov	r1, sp
 80067ee:	4403      	add	r3, r0
 80067f0:	428b      	cmp	r3, r1
 80067f2:	d806      	bhi.n	8006802 <_sbrk+0x26>
 80067f4:	4909      	ldr	r1, [pc, #36]	; (800681c <_sbrk+0x40>)
 80067f6:	4c0a      	ldr	r4, [pc, #40]	; (8006820 <_sbrk+0x44>)
 80067f8:	6809      	ldr	r1, [r1, #0]
 80067fa:	42a1      	cmp	r1, r4
 80067fc:	d008      	beq.n	8006810 <_sbrk+0x34>
 80067fe:	428b      	cmp	r3, r1
 8006800:	d906      	bls.n	8006810 <_sbrk+0x34>
 8006802:	f000 f9e9 	bl	8006bd8 <__errno>
 8006806:	230c      	movs	r3, #12
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	bd10      	pop	{r4, pc}
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e7fc      	b.n	800680e <_sbrk+0x32>
 8006814:	200003b0 	.word	0x200003b0
 8006818:	20000460 	.word	0x20000460
 800681c:	200001e0 	.word	0x200001e0
 8006820:	cafedead 	.word	0xcafedead

08006824 <_swistat>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	460c      	mov	r4, r1
 8006828:	f7ff fed8 	bl	80065dc <findslot>
 800682c:	4605      	mov	r5, r0
 800682e:	b930      	cbnz	r0, 800683e <_swistat+0x1a>
 8006830:	f000 f9d2 	bl	8006bd8 <__errno>
 8006834:	2309      	movs	r3, #9
 8006836:	6003      	str	r3, [r0, #0]
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684a:	64a3      	str	r3, [r4, #72]	; 0x48
 800684c:	260c      	movs	r6, #12
 800684e:	4630      	mov	r0, r6
 8006850:	4629      	mov	r1, r5
 8006852:	beab      	bkpt	0x00ab
 8006854:	4605      	mov	r5, r0
 8006856:	4628      	mov	r0, r5
 8006858:	f7ff fee8 	bl	800662c <checkerror>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	bf1c      	itt	ne
 8006860:	6120      	strne	r0, [r4, #16]
 8006862:	2000      	movne	r0, #0
 8006864:	e7ea      	b.n	800683c <_swistat+0x18>

08006866 <_fstat>:
 8006866:	460b      	mov	r3, r1
 8006868:	b510      	push	{r4, lr}
 800686a:	2100      	movs	r1, #0
 800686c:	4604      	mov	r4, r0
 800686e:	2258      	movs	r2, #88	; 0x58
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd fffd 	bl	8004870 <memset>
 8006876:	4601      	mov	r1, r0
 8006878:	4620      	mov	r0, r4
 800687a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687e:	f7ff bfd1 	b.w	8006824 <_swistat>

08006882 <_stat>:
 8006882:	b538      	push	{r3, r4, r5, lr}
 8006884:	460d      	mov	r5, r1
 8006886:	4604      	mov	r4, r0
 8006888:	2258      	movs	r2, #88	; 0x58
 800688a:	2100      	movs	r1, #0
 800688c:	4628      	mov	r0, r5
 800688e:	f7fd ffef 	bl	8004870 <memset>
 8006892:	4620      	mov	r0, r4
 8006894:	2100      	movs	r1, #0
 8006896:	f000 f811 	bl	80068bc <_swiopen>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	4604      	mov	r4, r0
 800689e:	d00b      	beq.n	80068b8 <_stat+0x36>
 80068a0:	686b      	ldr	r3, [r5, #4]
 80068a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068a6:	606b      	str	r3, [r5, #4]
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7ff ffbb 	bl	8006824 <_swistat>
 80068ae:	4605      	mov	r5, r0
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff ff6b 	bl	800678c <_close>
 80068b6:	462c      	mov	r4, r5
 80068b8:	4620      	mov	r0, r4
 80068ba:	bd38      	pop	{r3, r4, r5, pc}

080068bc <_swiopen>:
 80068bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068c0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800696c <_swiopen+0xb0>
 80068c4:	b097      	sub	sp, #92	; 0x5c
 80068c6:	4607      	mov	r7, r0
 80068c8:	460e      	mov	r6, r1
 80068ca:	2500      	movs	r5, #0
 80068cc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80068d0:	1c61      	adds	r1, r4, #1
 80068d2:	d037      	beq.n	8006944 <_swiopen+0x88>
 80068d4:	3501      	adds	r5, #1
 80068d6:	2d14      	cmp	r5, #20
 80068d8:	d1f8      	bne.n	80068cc <_swiopen+0x10>
 80068da:	f000 f97d 	bl	8006bd8 <__errno>
 80068de:	2318      	movs	r3, #24
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	f04f 34ff 	mov.w	r4, #4294967295
 80068e6:	e03d      	b.n	8006964 <_swiopen+0xa8>
 80068e8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80068ec:	f240 6301 	movw	r3, #1537	; 0x601
 80068f0:	07b2      	lsls	r2, r6, #30
 80068f2:	bf48      	it	mi
 80068f4:	f044 0402 	orrmi.w	r4, r4, #2
 80068f8:	421e      	tst	r6, r3
 80068fa:	bf18      	it	ne
 80068fc:	f044 0404 	orrne.w	r4, r4, #4
 8006900:	0733      	lsls	r3, r6, #28
 8006902:	bf48      	it	mi
 8006904:	f024 0404 	bicmi.w	r4, r4, #4
 8006908:	4638      	mov	r0, r7
 800690a:	bf48      	it	mi
 800690c:	f044 0408 	orrmi.w	r4, r4, #8
 8006910:	9700      	str	r7, [sp, #0]
 8006912:	f7f9 fcad 	bl	8000270 <strlen>
 8006916:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800691a:	2401      	movs	r4, #1
 800691c:	4620      	mov	r0, r4
 800691e:	4649      	mov	r1, r9
 8006920:	beab      	bkpt	0x00ab
 8006922:	4604      	mov	r4, r0
 8006924:	2c00      	cmp	r4, #0
 8006926:	db08      	blt.n	800693a <_swiopen+0x7e>
 8006928:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800692c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8006930:	2300      	movs	r3, #0
 8006932:	f8c8 3004 	str.w	r3, [r8, #4]
 8006936:	462c      	mov	r4, r5
 8006938:	e014      	b.n	8006964 <_swiopen+0xa8>
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff fe68 	bl	8006610 <error>
 8006940:	4604      	mov	r4, r0
 8006942:	e00f      	b.n	8006964 <_swiopen+0xa8>
 8006944:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8006948:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800694c:	46e9      	mov	r9, sp
 800694e:	d1cb      	bne.n	80068e8 <_swiopen+0x2c>
 8006950:	4649      	mov	r1, r9
 8006952:	4638      	mov	r0, r7
 8006954:	f7ff ff95 	bl	8006882 <_stat>
 8006958:	3001      	adds	r0, #1
 800695a:	d0c5      	beq.n	80068e8 <_swiopen+0x2c>
 800695c:	f000 f93c 	bl	8006bd8 <__errno>
 8006960:	2311      	movs	r3, #17
 8006962:	6003      	str	r3, [r0, #0]
 8006964:	4620      	mov	r0, r4
 8006966:	b017      	add	sp, #92	; 0x5c
 8006968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800696c:	200003c0 	.word	0x200003c0

08006970 <_get_semihosting_exts>:
 8006970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006974:	4606      	mov	r6, r0
 8006976:	460f      	mov	r7, r1
 8006978:	482a      	ldr	r0, [pc, #168]	; (8006a24 <_get_semihosting_exts+0xb4>)
 800697a:	2100      	movs	r1, #0
 800697c:	4615      	mov	r5, r2
 800697e:	f7ff ff9d 	bl	80068bc <_swiopen>
 8006982:	462a      	mov	r2, r5
 8006984:	4604      	mov	r4, r0
 8006986:	2100      	movs	r1, #0
 8006988:	4630      	mov	r0, r6
 800698a:	f7fd ff71 	bl	8004870 <memset>
 800698e:	1c63      	adds	r3, r4, #1
 8006990:	d016      	beq.n	80069c0 <_get_semihosting_exts+0x50>
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fe22 	bl	80065dc <findslot>
 8006998:	f04f 080c 	mov.w	r8, #12
 800699c:	4681      	mov	r9, r0
 800699e:	4640      	mov	r0, r8
 80069a0:	4649      	mov	r1, r9
 80069a2:	beab      	bkpt	0x00ab
 80069a4:	4680      	mov	r8, r0
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fe40 	bl	800662c <checkerror>
 80069ac:	2803      	cmp	r0, #3
 80069ae:	dd02      	ble.n	80069b6 <_get_semihosting_exts+0x46>
 80069b0:	1ec3      	subs	r3, r0, #3
 80069b2:	42ab      	cmp	r3, r5
 80069b4:	dc08      	bgt.n	80069c8 <_get_semihosting_exts+0x58>
 80069b6:	4620      	mov	r0, r4
 80069b8:	f7ff fee8 	bl	800678c <_close>
 80069bc:	f04f 34ff 	mov.w	r4, #4294967295
 80069c0:	4620      	mov	r0, r4
 80069c2:	b003      	add	sp, #12
 80069c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069c8:	2204      	movs	r2, #4
 80069ca:	eb0d 0102 	add.w	r1, sp, r2
 80069ce:	4620      	mov	r0, r4
 80069d0:	f7ff fe41 	bl	8006656 <_read>
 80069d4:	2803      	cmp	r0, #3
 80069d6:	ddee      	ble.n	80069b6 <_get_semihosting_exts+0x46>
 80069d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80069dc:	2b53      	cmp	r3, #83	; 0x53
 80069de:	d1ea      	bne.n	80069b6 <_get_semihosting_exts+0x46>
 80069e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80069e4:	2b48      	cmp	r3, #72	; 0x48
 80069e6:	d1e6      	bne.n	80069b6 <_get_semihosting_exts+0x46>
 80069e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80069ec:	2b46      	cmp	r3, #70	; 0x46
 80069ee:	d1e2      	bne.n	80069b6 <_get_semihosting_exts+0x46>
 80069f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80069f4:	2b42      	cmp	r3, #66	; 0x42
 80069f6:	d1de      	bne.n	80069b6 <_get_semihosting_exts+0x46>
 80069f8:	2201      	movs	r2, #1
 80069fa:	4639      	mov	r1, r7
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7ff fe46 	bl	800668e <_swilseek>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	dbd7      	blt.n	80069b6 <_get_semihosting_exts+0x46>
 8006a06:	462a      	mov	r2, r5
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7ff fe23 	bl	8006656 <_read>
 8006a10:	4605      	mov	r5, r0
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7ff feba 	bl	800678c <_close>
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff fe07 	bl	800662c <checkerror>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	e7ce      	b.n	80069c0 <_get_semihosting_exts+0x50>
 8006a22:	bf00      	nop
 8006a24:	080071ec 	.word	0x080071ec

08006a28 <initialise_semihosting_exts>:
 8006a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a2a:	4d0a      	ldr	r5, [pc, #40]	; (8006a54 <initialise_semihosting_exts+0x2c>)
 8006a2c:	4c0a      	ldr	r4, [pc, #40]	; (8006a58 <initialise_semihosting_exts+0x30>)
 8006a2e:	2100      	movs	r1, #0
 8006a30:	2201      	movs	r2, #1
 8006a32:	a801      	add	r0, sp, #4
 8006a34:	6029      	str	r1, [r5, #0]
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	f7ff ff9a 	bl	8006970 <_get_semihosting_exts>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	dd07      	ble.n	8006a50 <initialise_semihosting_exts+0x28>
 8006a40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006a44:	f003 0201 	and.w	r2, r3, #1
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	602a      	str	r2, [r5, #0]
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	b003      	add	sp, #12
 8006a52:	bd30      	pop	{r4, r5, pc}
 8006a54:	200001e4 	.word	0x200001e4
 8006a58:	200001e8 	.word	0x200001e8

08006a5c <_has_ext_exit_extended>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	4c04      	ldr	r4, [pc, #16]	; (8006a70 <_has_ext_exit_extended+0x14>)
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	da01      	bge.n	8006a6a <_has_ext_exit_extended+0xe>
 8006a66:	f7ff ffdf 	bl	8006a28 <initialise_semihosting_exts>
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	bf00      	nop
 8006a70:	200001e4 	.word	0x200001e4

08006a74 <_has_ext_stdout_stderr>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4c04      	ldr	r4, [pc, #16]	; (8006a88 <_has_ext_stdout_stderr+0x14>)
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da01      	bge.n	8006a82 <_has_ext_stdout_stderr+0xe>
 8006a7e:	f7ff ffd3 	bl	8006a28 <initialise_semihosting_exts>
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	bf00      	nop
 8006a88:	200001e8 	.word	0x200001e8

08006a8c <initialise_monitor_handles>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	b085      	sub	sp, #20
 8006a92:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8006b44 <initialise_monitor_handles+0xb8>
 8006a96:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	2400      	movs	r4, #0
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	af01      	add	r7, sp, #4
 8006aa2:	9402      	str	r4, [sp, #8]
 8006aa4:	2501      	movs	r5, #1
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	beab      	bkpt	0x00ab
 8006aac:	4605      	mov	r5, r0
 8006aae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006b48 <initialise_monitor_handles+0xbc>
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	4c20      	ldr	r4, [pc, #128]	; (8006b38 <initialise_monitor_handles+0xac>)
 8006ab6:	f8c8 5000 	str.w	r5, [r8]
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	2b14      	cmp	r3, #20
 8006ac6:	d1fa      	bne.n	8006abe <initialise_monitor_handles+0x32>
 8006ac8:	f7ff ffd4 	bl	8006a74 <_has_ext_stdout_stderr>
 8006acc:	4d1b      	ldr	r5, [pc, #108]	; (8006b3c <initialise_monitor_handles+0xb0>)
 8006ace:	b1d0      	cbz	r0, 8006b06 <initialise_monitor_handles+0x7a>
 8006ad0:	f04f 0a03 	mov.w	sl, #3
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ada:	2601      	movs	r6, #1
 8006adc:	f8cd a00c 	str.w	sl, [sp, #12]
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	beab      	bkpt	0x00ab
 8006ae8:	4683      	mov	fp, r0
 8006aea:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <initialise_monitor_handles+0xb4>)
 8006aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006af0:	f8c3 b000 	str.w	fp, [r3]
 8006af4:	2308      	movs	r3, #8
 8006af6:	f8cd a00c 	str.w	sl, [sp, #12]
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	beab      	bkpt	0x00ab
 8006b02:	4606      	mov	r6, r0
 8006b04:	602e      	str	r6, [r5, #0]
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	bf02      	ittt	eq
 8006b0c:	4b0c      	ldreq	r3, [pc, #48]	; (8006b40 <initialise_monitor_handles+0xb4>)
 8006b0e:	681b      	ldreq	r3, [r3, #0]
 8006b10:	602b      	streq	r3, [r5, #0]
 8006b12:	2600      	movs	r6, #0
 8006b14:	f8d8 3000 	ldr.w	r3, [r8]
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6066      	str	r6, [r4, #4]
 8006b1c:	f7ff ffaa 	bl	8006a74 <_has_ext_stdout_stderr>
 8006b20:	b130      	cbz	r0, 8006b30 <initialise_monitor_handles+0xa4>
 8006b22:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <initialise_monitor_handles+0xb4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006b30:	b005      	add	sp, #20
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	bf00      	nop
 8006b38:	200003c0 	.word	0x200003c0
 8006b3c:	200003b4 	.word	0x200003b4
 8006b40:	200003bc 	.word	0x200003bc
 8006b44:	08007202 	.word	0x08007202
 8006b48:	200003b8 	.word	0x200003b8

08006b4c <_isatty>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	f7ff fd45 	bl	80065dc <findslot>
 8006b52:	2509      	movs	r5, #9
 8006b54:	4604      	mov	r4, r0
 8006b56:	b920      	cbnz	r0, 8006b62 <_isatty+0x16>
 8006b58:	f000 f83e 	bl	8006bd8 <__errno>
 8006b5c:	6005      	str	r5, [r0, #0]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	4628      	mov	r0, r5
 8006b64:	4621      	mov	r1, r4
 8006b66:	beab      	bkpt	0x00ab
 8006b68:	4604      	mov	r4, r0
 8006b6a:	2c01      	cmp	r4, #1
 8006b6c:	d0f7      	beq.n	8006b5e <_isatty+0x12>
 8006b6e:	f000 f833 	bl	8006bd8 <__errno>
 8006b72:	2400      	movs	r4, #0
 8006b74:	4605      	mov	r5, r0
 8006b76:	2613      	movs	r6, #19
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	beab      	bkpt	0x00ab
 8006b7e:	4606      	mov	r6, r0
 8006b80:	602e      	str	r6, [r5, #0]
 8006b82:	e7ec      	b.n	8006b5e <_isatty+0x12>

08006b84 <_exit>:
 8006b84:	4601      	mov	r1, r0
 8006b86:	b508      	push	{r3, lr}
 8006b88:	4a02      	ldr	r2, [pc, #8]	; (8006b94 <_exit+0x10>)
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8e:	f000 f803 	bl	8006b98 <_kill_shared>
 8006b92:	bf00      	nop
 8006b94:	00020026 	.word	0x00020026

08006b98 <_kill_shared>:
 8006b98:	b507      	push	{r0, r1, r2, lr}
 8006b9a:	e9cd 2100 	strd	r2, r1, [sp]
 8006b9e:	f7ff ff5d 	bl	8006a5c <_has_ext_exit_extended>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	bf14      	ite	ne
 8006ba6:	2420      	movne	r4, #32
 8006ba8:	2418      	moveq	r4, #24
 8006baa:	f7ff ff57 	bl	8006a5c <_has_ext_exit_extended>
 8006bae:	b120      	cbz	r0, 8006bba <_kill_shared+0x22>
 8006bb0:	466d      	mov	r5, sp
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	beab      	bkpt	0x00ab
 8006bb8:	4604      	mov	r4, r0
 8006bba:	9d00      	ldr	r5, [sp, #0]
 8006bbc:	e7f9      	b.n	8006bb2 <_kill_shared+0x1a>
	...

08006bc0 <_kill>:
 8006bc0:	2906      	cmp	r1, #6
 8006bc2:	b508      	push	{r3, lr}
 8006bc4:	bf0c      	ite	eq
 8006bc6:	4a02      	ldreq	r2, [pc, #8]	; (8006bd0 <_kill+0x10>)
 8006bc8:	4a02      	ldrne	r2, [pc, #8]	; (8006bd4 <_kill+0x14>)
 8006bca:	f7ff ffe5 	bl	8006b98 <_kill_shared>
 8006bce:	bf00      	nop
 8006bd0:	00020023 	.word	0x00020023
 8006bd4:	00020026 	.word	0x00020026

08006bd8 <__errno>:
 8006bd8:	4b01      	ldr	r3, [pc, #4]	; (8006be0 <__errno+0x8>)
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	20000070 	.word	0x20000070

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
